// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zjhuserinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zjhuserinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjhuserinfo {

namespace {

const ::google::protobuf::Descriptor* zjhUserinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zjhUserinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* zjhDeskUserinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zjhDeskUserinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* zjhDeskinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zjhDeskinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* zjhDeskResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zjhDeskResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* zjhUserResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zjhUserResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* zjhMatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zjhMatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* zjhSelfRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zjhSelfRoomInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zjhuserinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_zjhuserinfo_2eproto() {
  protobuf_AddDesc_zjhuserinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zjhuserinfo.proto");
  GOOGLE_CHECK(file != NULL);
  zjhUserinfo_descriptor_ = file->message_type(0);
  static const int zjhUserinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserinfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserinfo, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserinfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserinfo, ingotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserinfo, gender_),
  };
  zjhUserinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      zjhUserinfo_descriptor_,
      zjhUserinfo::default_instance_,
      zjhUserinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(zjhUserinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserinfo, _is_default_instance_));
  Card_descriptor_ = file->message_type(1);
  static const int Card_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, value_),
  };
  Card_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      -1,
      -1,
      -1,
      sizeof(Card),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _is_default_instance_));
  zjhDeskUserinfo_descriptor_ = file->message_type(2);
  static const int zjhDeskUserinfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, offline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, ifauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, poker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, matchscore_),
  };
  zjhDeskUserinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      zjhDeskUserinfo_descriptor_,
      zjhDeskUserinfo::default_instance_,
      zjhDeskUserinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(zjhDeskUserinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskUserinfo, _is_default_instance_));
  zjhDeskinfo_descriptor_ = file->message_type(3);
  static const int zjhDeskinfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, sumtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, singlebet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, roundcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, matchid_),
  };
  zjhDeskinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      zjhDeskinfo_descriptor_,
      zjhDeskinfo::default_instance_,
      zjhDeskinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(zjhDeskinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskinfo, _is_default_instance_));
  zjhDeskResultinfo_descriptor_ = file->message_type(4);
  static const int zjhDeskResultinfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskResultinfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskResultinfo, sumtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskResultinfo, singlebet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskResultinfo, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskResultinfo, winpos_),
  };
  zjhDeskResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      zjhDeskResultinfo_descriptor_,
      zjhDeskResultinfo::default_instance_,
      zjhDeskResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(zjhDeskResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhDeskResultinfo, _is_default_instance_));
  zjhUserResultinfo_descriptor_ = file->message_type(5);
  static const int zjhUserResultinfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserResultinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserResultinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserResultinfo, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserResultinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserResultinfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserResultinfo, leftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserResultinfo, leftvalue_),
  };
  zjhUserResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      zjhUserResultinfo_descriptor_,
      zjhUserResultinfo::default_instance_,
      zjhUserResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(zjhUserResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhUserResultinfo, _is_default_instance_));
  zjhMatchInfo_descriptor_ = file->message_type(6);
  static const int zjhMatchInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhMatchInfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhMatchInfo, trunindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhMatchInfo, curnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhMatchInfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhMatchInfo, ifmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhMatchInfo, leftnum_),
  };
  zjhMatchInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      zjhMatchInfo_descriptor_,
      zjhMatchInfo::default_instance_,
      zjhMatchInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(zjhMatchInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhMatchInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhMatchInfo, _is_default_instance_));
  zjhSelfRoomInfo_descriptor_ = file->message_type(7);
  static const int zjhSelfRoomInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhSelfRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhSelfRoomInfo, roomcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhSelfRoomInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhSelfRoomInfo, createuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhSelfRoomInfo, basecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhSelfRoomInfo, playcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhSelfRoomInfo, pos_),
  };
  zjhSelfRoomInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      zjhSelfRoomInfo_descriptor_,
      zjhSelfRoomInfo::default_instance_,
      zjhSelfRoomInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(zjhSelfRoomInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhSelfRoomInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zjhSelfRoomInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zjhuserinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      zjhUserinfo_descriptor_, &zjhUserinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      zjhDeskUserinfo_descriptor_, &zjhDeskUserinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      zjhDeskinfo_descriptor_, &zjhDeskinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      zjhDeskResultinfo_descriptor_, &zjhDeskResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      zjhUserResultinfo_descriptor_, &zjhUserResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      zjhMatchInfo_descriptor_, &zjhMatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      zjhSelfRoomInfo_descriptor_, &zjhSelfRoomInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zjhuserinfo_2eproto() {
  delete zjhUserinfo::default_instance_;
  delete zjhUserinfo_reflection_;
  delete Card::default_instance_;
  delete Card_reflection_;
  delete zjhDeskUserinfo::default_instance_;
  delete zjhDeskUserinfo_reflection_;
  delete zjhDeskinfo::default_instance_;
  delete zjhDeskinfo_reflection_;
  delete zjhDeskResultinfo::default_instance_;
  delete zjhDeskResultinfo_reflection_;
  delete zjhUserResultinfo::default_instance_;
  delete zjhUserResultinfo_reflection_;
  delete zjhMatchInfo::default_instance_;
  delete zjhMatchInfo_reflection_;
  delete zjhSelfRoomInfo::default_instance_;
  delete zjhSelfRoomInfo_reflection_;
}

void protobuf_AddDesc_zjhuserinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_zjhuserinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021zjhuserinfo.proto\022\013zjhuserinfo\"n\n\013zjhU"
    "serinfo\022\013\n\003uid\030\001 \001(\r\022\r\n\005uname\030\002 \001(\014\022\017\n\007c"
    "oinnum\030\003 \001(\r\022\020\n\010integral\030\004 \001(\r\022\020\n\010ingotn"
    "um\030\005 \001(\r\022\016\n\006gender\030\006 \001(\r\"\025\n\004Card\022\r\n\005valu"
    "e\030\001 \001(\r\"\343\001\n\017zjhDeskUserinfo\022\013\n\003uid\030\001 \001(\r"
    "\022\r\n\005uname\030\002 \001(\014\022\017\n\007coinnum\030\003 \001(\r\022\017\n\007head"
    "url\030\004 \001(\014\022\016\n\006deskid\030\005 \001(\r\022\013\n\003pos\030\006 \001(\r\022\016"
    "\n\006status\030\007 \001(\r\022\017\n\007offline\030\010 \001(\r\022\016\n\006ifaut"
    "o\030\t \001(\r\022 \n\005poker\030\n \003(\0132\021.zjhuserinfo.Car"
    "d\022\016\n\006gender\030\013 \001(\r\022\022\n\nmatchscore\030\014 \001(\005\"\267\001"
    "\n\013zjhDeskinfo\022\016\n\006deskid\030\001 \001(\r\022\016\n\006status\030"
    "\002 \001(\r\022\016\n\006curpos\030\003 \001(\r\022\020\n\010sumTotal\030\004 \001(\r\022"
    "\021\n\tsingleBet\030\005 \001(\r\022.\n\010userlist\030\006 \003(\0132\034.z"
    "jhuserinfo.zjhDeskUserinfo\022\022\n\nroundCount"
    "\030\007 \001(\r\022\017\n\007matchid\030\010 \001(\r\"\211\001\n\021zjhDeskResul"
    "tinfo\022\r\n\005point\030\001 \001(\r\022\020\n\010sumTotal\030\002 \001(\r\022\021"
    "\n\tsingleBet\030\003 \001(\r\0220\n\010userlist\030\004 \003(\0132\036.zj"
    "huserinfo.zjhUserResultinfo\022\016\n\006winpos\030\005 "
    "\001(\005\"\231\001\n\021zjhUserResultinfo\022\013\n\003uid\030\001 \001(\r\022\013"
    "\n\003pos\030\002 \001(\r\022#\n\010usercard\030\003 \003(\0132\021.zjhuseri"
    "nfo.Card\022\021\n\tgamevalue\030\004 \001(\005\022\014\n\004rank\030\005 \001("
    "\r\022\021\n\tleftcount\030\006 \001(\005\022\021\n\tleftvalue\030\007 \001(\r\""
    "w\n\014zjhMatchInfo\022\017\n\007matchid\030\001 \001(\r\022\021\n\ttrun"
    "index\030\002 \001(\r\022\016\n\006curnum\030\003 \001(\r\022\021\n\tgamevalue"
    "\030\004 \001(\005\022\017\n\007ifmatch\030\005 \001(\005\022\017\n\007leftnum\030\006 \001(\r"
    "\"\211\001\n\017zjhSelfRoomInfo\022\016\n\006roomid\030\001 \001(\r\022\020\n\010"
    "roomcode\030\002 \001(\014\022\017\n\007endtime\030\003 \001(\r\022\021\n\tcreat"
    "euid\030\004 \001(\r\022\020\n\010basecoin\030\005 \001(\r\022\021\n\tplaycoun"
    "t\030\006 \001(\r\022\013\n\003pos\030\007 \001(\005b\006proto3", 1148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zjhuserinfo.proto", &protobuf_RegisterTypes);
  zjhUserinfo::default_instance_ = new zjhUserinfo();
  Card::default_instance_ = new Card();
  zjhDeskUserinfo::default_instance_ = new zjhDeskUserinfo();
  zjhDeskinfo::default_instance_ = new zjhDeskinfo();
  zjhDeskResultinfo::default_instance_ = new zjhDeskResultinfo();
  zjhUserResultinfo::default_instance_ = new zjhUserResultinfo();
  zjhMatchInfo::default_instance_ = new zjhMatchInfo();
  zjhSelfRoomInfo::default_instance_ = new zjhSelfRoomInfo();
  zjhUserinfo::default_instance_->InitAsDefaultInstance();
  Card::default_instance_->InitAsDefaultInstance();
  zjhDeskUserinfo::default_instance_->InitAsDefaultInstance();
  zjhDeskinfo::default_instance_->InitAsDefaultInstance();
  zjhDeskResultinfo::default_instance_->InitAsDefaultInstance();
  zjhUserResultinfo::default_instance_->InitAsDefaultInstance();
  zjhMatchInfo::default_instance_->InitAsDefaultInstance();
  zjhSelfRoomInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zjhuserinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zjhuserinfo_2eproto {
  StaticDescriptorInitializer_zjhuserinfo_2eproto() {
    protobuf_AddDesc_zjhuserinfo_2eproto();
  }
} static_descriptor_initializer_zjhuserinfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int zjhUserinfo::kUidFieldNumber;
const int zjhUserinfo::kUnameFieldNumber;
const int zjhUserinfo::kCoinnumFieldNumber;
const int zjhUserinfo::kIntegralFieldNumber;
const int zjhUserinfo::kIngotnumFieldNumber;
const int zjhUserinfo::kGenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

zjhUserinfo::zjhUserinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjhuserinfo.zjhUserinfo)
}

void zjhUserinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

zjhUserinfo::zjhUserinfo(const zjhUserinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zjhuserinfo.zjhUserinfo)
}

void zjhUserinfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinnum_ = 0u;
  integral_ = 0u;
  ingotnum_ = 0u;
  gender_ = 0u;
}

zjhUserinfo::~zjhUserinfo() {
  // @@protoc_insertion_point(destructor:zjhuserinfo.zjhUserinfo)
  SharedDtor();
}

void zjhUserinfo::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void zjhUserinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zjhUserinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zjhUserinfo_descriptor_;
}

const zjhUserinfo& zjhUserinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zjhuserinfo_2eproto();
  return *default_instance_;
}

zjhUserinfo* zjhUserinfo::default_instance_ = NULL;

zjhUserinfo* zjhUserinfo::New(::google::protobuf::Arena* arena) const {
  zjhUserinfo* n = new zjhUserinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void zjhUserinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjhuserinfo.zjhUserinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(zjhUserinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<zjhUserinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, gender_);
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool zjhUserinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjhuserinfo.zjhUserinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uname;
        break;
      }

      // optional bytes uname = 2;
      case 2: {
        if (tag == 18) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coinnum;
        break;
      }

      // optional uint32 coinnum = 3;
      case 3: {
        if (tag == 24) {
         parse_coinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 4;
      case 4: {
        if (tag == 32) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ingotnum;
        break;
      }

      // optional uint32 ingotnum = 5;
      case 5: {
        if (tag == 40) {
         parse_ingotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingotnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 6;
      case 6: {
        if (tag == 48) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjhuserinfo.zjhUserinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjhuserinfo.zjhUserinfo)
  return false;
#undef DO_
}

void zjhUserinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjhuserinfo.zjhUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coinnum(), output);
  }

  // optional uint32 integral = 4;
  if (this->integral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->integral(), output);
  }

  // optional uint32 ingotnum = 5;
  if (this->ingotnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ingotnum(), output);
  }

  // optional uint32 gender = 6;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gender(), output);
  }

  // @@protoc_insertion_point(serialize_end:zjhuserinfo.zjhUserinfo)
}

::google::protobuf::uint8* zjhUserinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjhuserinfo.zjhUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uname(), target);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coinnum(), target);
  }

  // optional uint32 integral = 4;
  if (this->integral() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->integral(), target);
  }

  // optional uint32 ingotnum = 5;
  if (this->ingotnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ingotnum(), target);
  }

  // optional uint32 gender = 6;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gender(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zjhuserinfo.zjhUserinfo)
  return target;
}

int zjhUserinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zjhuserinfo.zjhUserinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uname());
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coinnum());
  }

  // optional uint32 integral = 4;
  if (this->integral() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->integral());
  }

  // optional uint32 ingotnum = 5;
  if (this->ingotnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ingotnum());
  }

  // optional uint32 gender = 6;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zjhUserinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjhuserinfo.zjhUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const zjhUserinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const zjhUserinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjhuserinfo.zjhUserinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjhuserinfo.zjhUserinfo)
    MergeFrom(*source);
  }
}

void zjhUserinfo::MergeFrom(const zjhUserinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjhuserinfo.zjhUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.coinnum() != 0) {
    set_coinnum(from.coinnum());
  }
  if (from.integral() != 0) {
    set_integral(from.integral());
  }
  if (from.ingotnum() != 0) {
    set_ingotnum(from.ingotnum());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
}

void zjhUserinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjhuserinfo.zjhUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zjhUserinfo::CopyFrom(const zjhUserinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjhuserinfo.zjhUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zjhUserinfo::IsInitialized() const {

  return true;
}

void zjhUserinfo::Swap(zjhUserinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void zjhUserinfo::InternalSwap(zjhUserinfo* other) {
  std::swap(uid_, other->uid_);
  uname_.Swap(&other->uname_);
  std::swap(coinnum_, other->coinnum_);
  std::swap(integral_, other->integral_);
  std::swap(ingotnum_, other->ingotnum_);
  std::swap(gender_, other->gender_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata zjhUserinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zjhUserinfo_descriptor_;
  metadata.reflection = zjhUserinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// zjhUserinfo

// optional uint32 uid = 1;
void zjhUserinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 zjhUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserinfo.uid)
  return uid_;
}
 void zjhUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserinfo.uid)
}

// optional bytes uname = 2;
void zjhUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& zjhUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void zjhUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserinfo.uname)
}
 void zjhUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjhuserinfo.zjhUserinfo.uname)
}
 void zjhUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjhuserinfo.zjhUserinfo.uname)
}
 ::std::string* zjhUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:zjhuserinfo.zjhUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* zjhUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:zjhuserinfo.zjhUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void zjhUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:zjhuserinfo.zjhUserinfo.uname)
}

// optional uint32 coinnum = 3;
void zjhUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
 ::google::protobuf::uint32 zjhUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserinfo.coinnum)
  return coinnum_;
}
 void zjhUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserinfo.coinnum)
}

// optional uint32 integral = 4;
void zjhUserinfo::clear_integral() {
  integral_ = 0u;
}
 ::google::protobuf::uint32 zjhUserinfo::integral() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserinfo.integral)
  return integral_;
}
 void zjhUserinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserinfo.integral)
}

// optional uint32 ingotnum = 5;
void zjhUserinfo::clear_ingotnum() {
  ingotnum_ = 0u;
}
 ::google::protobuf::uint32 zjhUserinfo::ingotnum() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserinfo.ingotnum)
  return ingotnum_;
}
 void zjhUserinfo::set_ingotnum(::google::protobuf::uint32 value) {
  
  ingotnum_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserinfo.ingotnum)
}

// optional uint32 gender = 6;
void zjhUserinfo::clear_gender() {
  gender_ = 0u;
}
 ::google::protobuf::uint32 zjhUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserinfo.gender)
  return gender_;
}
 void zjhUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserinfo.gender)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Card::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Card::Card()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjhuserinfo.Card)
}

void Card::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Card::Card(const Card& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zjhuserinfo.Card)
}

void Card::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:zjhuserinfo.Card)
  SharedDtor();
}

void Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zjhuserinfo_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New(::google::protobuf::Arena* arena) const {
  Card* n = new Card;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:zjhuserinfo.Card)
  value_ = 0u;
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjhuserinfo.Card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjhuserinfo.Card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjhuserinfo.Card)
  return false;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjhuserinfo.Card)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:zjhuserinfo.Card)
}

::google::protobuf::uint8* Card::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjhuserinfo.Card)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zjhuserinfo.Card)
  return target;
}

int Card::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zjhuserinfo.Card)
  int total_size = 0;

  // optional uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjhuserinfo.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Card* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Card>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjhuserinfo.Card)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjhuserinfo.Card)
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjhuserinfo.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjhuserinfo.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjhuserinfo.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {

  return true;
}

void Card::Swap(Card* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Card::InternalSwap(Card* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional uint32 value = 1;
void Card::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 Card::value() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.Card.value)
  return value_;
}
 void Card::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.Card.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int zjhDeskUserinfo::kUidFieldNumber;
const int zjhDeskUserinfo::kUnameFieldNumber;
const int zjhDeskUserinfo::kCoinnumFieldNumber;
const int zjhDeskUserinfo::kHeadurlFieldNumber;
const int zjhDeskUserinfo::kDeskidFieldNumber;
const int zjhDeskUserinfo::kPosFieldNumber;
const int zjhDeskUserinfo::kStatusFieldNumber;
const int zjhDeskUserinfo::kOfflineFieldNumber;
const int zjhDeskUserinfo::kIfautoFieldNumber;
const int zjhDeskUserinfo::kPokerFieldNumber;
const int zjhDeskUserinfo::kGenderFieldNumber;
const int zjhDeskUserinfo::kMatchscoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

zjhDeskUserinfo::zjhDeskUserinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjhuserinfo.zjhDeskUserinfo)
}

void zjhDeskUserinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

zjhDeskUserinfo::zjhDeskUserinfo(const zjhDeskUserinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zjhuserinfo.zjhDeskUserinfo)
}

void zjhDeskUserinfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinnum_ = 0u;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deskid_ = 0u;
  pos_ = 0u;
  status_ = 0u;
  offline_ = 0u;
  ifauto_ = 0u;
  gender_ = 0u;
  matchscore_ = 0;
}

zjhDeskUserinfo::~zjhDeskUserinfo() {
  // @@protoc_insertion_point(destructor:zjhuserinfo.zjhDeskUserinfo)
  SharedDtor();
}

void zjhDeskUserinfo::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void zjhDeskUserinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zjhDeskUserinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zjhDeskUserinfo_descriptor_;
}

const zjhDeskUserinfo& zjhDeskUserinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zjhuserinfo_2eproto();
  return *default_instance_;
}

zjhDeskUserinfo* zjhDeskUserinfo::default_instance_ = NULL;

zjhDeskUserinfo* zjhDeskUserinfo::New(::google::protobuf::Arena* arena) const {
  zjhDeskUserinfo* n = new zjhDeskUserinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void zjhDeskUserinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjhuserinfo.zjhDeskUserinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(zjhDeskUserinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<zjhDeskUserinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, coinnum_);
  ZR_(deskid_, offline_);
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(ifauto_, matchscore_);

#undef ZR_HELPER_
#undef ZR_

  poker_.Clear();
}

bool zjhDeskUserinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjhuserinfo.zjhDeskUserinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uname;
        break;
      }

      // optional bytes uname = 2;
      case 2: {
        if (tag == 18) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coinnum;
        break;
      }

      // optional uint32 coinnum = 3;
      case 3: {
        if (tag == 24) {
         parse_coinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_headurl;
        break;
      }

      // optional bytes headurl = 4;
      case 4: {
        if (tag == 34) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_headurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deskid;
        break;
      }

      // optional uint32 deskid = 5;
      case 5: {
        if (tag == 40) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 6;
      case 6: {
        if (tag == 48) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offline;
        break;
      }

      // optional uint32 offline = 8;
      case 8: {
        if (tag == 64) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ifauto;
        break;
      }

      // optional uint32 ifauto = 9;
      case 9: {
        if (tag == 72) {
         parse_ifauto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ifauto_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_poker;
        break;
      }

      // repeated .zjhuserinfo.Card poker = 10;
      case 10: {
        if (tag == 82) {
         parse_poker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_poker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_poker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_poker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 11;
      case 11: {
        if (tag == 88) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_matchscore;
        break;
      }

      // optional int32 matchscore = 12;
      case 12: {
        if (tag == 96) {
         parse_matchscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchscore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjhuserinfo.zjhDeskUserinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjhuserinfo.zjhDeskUserinfo)
  return false;
#undef DO_
}

void zjhDeskUserinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjhuserinfo.zjhDeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coinnum(), output);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->headurl(), output);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deskid(), output);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos(), output);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offline(), output);
  }

  // optional uint32 ifauto = 9;
  if (this->ifauto() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ifauto(), output);
  }

  // repeated .zjhuserinfo.Card poker = 10;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->poker(i), output);
  }

  // optional uint32 gender = 11;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gender(), output);
  }

  // optional int32 matchscore = 12;
  if (this->matchscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->matchscore(), output);
  }

  // @@protoc_insertion_point(serialize_end:zjhuserinfo.zjhDeskUserinfo)
}

::google::protobuf::uint8* zjhDeskUserinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjhuserinfo.zjhDeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uname(), target);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coinnum(), target);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->headurl(), target);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deskid(), target);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos(), target);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->offline(), target);
  }

  // optional uint32 ifauto = 9;
  if (this->ifauto() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ifauto(), target);
  }

  // repeated .zjhuserinfo.Card poker = 10;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->poker(i), false, target);
  }

  // optional uint32 gender = 11;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gender(), target);
  }

  // optional int32 matchscore = 12;
  if (this->matchscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->matchscore(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zjhuserinfo.zjhDeskUserinfo)
  return target;
}

int zjhDeskUserinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zjhuserinfo.zjhDeskUserinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uname());
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coinnum());
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->headurl());
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline());
  }

  // optional uint32 ifauto = 9;
  if (this->ifauto() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ifauto());
  }

  // optional uint32 gender = 11;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional int32 matchscore = 12;
  if (this->matchscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->matchscore());
  }

  // repeated .zjhuserinfo.Card poker = 10;
  total_size += 1 * this->poker_size();
  for (int i = 0; i < this->poker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poker(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zjhDeskUserinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjhuserinfo.zjhDeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const zjhDeskUserinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const zjhDeskUserinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjhuserinfo.zjhDeskUserinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjhuserinfo.zjhDeskUserinfo)
    MergeFrom(*source);
  }
}

void zjhDeskUserinfo::MergeFrom(const zjhDeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjhuserinfo.zjhDeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  poker_.MergeFrom(from.poker_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.coinnum() != 0) {
    set_coinnum(from.coinnum());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.offline() != 0) {
    set_offline(from.offline());
  }
  if (from.ifauto() != 0) {
    set_ifauto(from.ifauto());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.matchscore() != 0) {
    set_matchscore(from.matchscore());
  }
}

void zjhDeskUserinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjhuserinfo.zjhDeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zjhDeskUserinfo::CopyFrom(const zjhDeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjhuserinfo.zjhDeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zjhDeskUserinfo::IsInitialized() const {

  return true;
}

void zjhDeskUserinfo::Swap(zjhDeskUserinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void zjhDeskUserinfo::InternalSwap(zjhDeskUserinfo* other) {
  std::swap(uid_, other->uid_);
  uname_.Swap(&other->uname_);
  std::swap(coinnum_, other->coinnum_);
  headurl_.Swap(&other->headurl_);
  std::swap(deskid_, other->deskid_);
  std::swap(pos_, other->pos_);
  std::swap(status_, other->status_);
  std::swap(offline_, other->offline_);
  std::swap(ifauto_, other->ifauto_);
  poker_.UnsafeArenaSwap(&other->poker_);
  std::swap(gender_, other->gender_);
  std::swap(matchscore_, other->matchscore_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata zjhDeskUserinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zjhDeskUserinfo_descriptor_;
  metadata.reflection = zjhDeskUserinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// zjhDeskUserinfo

// optional uint32 uid = 1;
void zjhDeskUserinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.uid)
  return uid_;
}
 void zjhDeskUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.uid)
}

// optional bytes uname = 2;
void zjhDeskUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& zjhDeskUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void zjhDeskUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.uname)
}
 void zjhDeskUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjhuserinfo.zjhDeskUserinfo.uname)
}
 void zjhDeskUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjhuserinfo.zjhDeskUserinfo.uname)
}
 ::std::string* zjhDeskUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:zjhuserinfo.zjhDeskUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* zjhDeskUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:zjhuserinfo.zjhDeskUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void zjhDeskUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:zjhuserinfo.zjhDeskUserinfo.uname)
}

// optional uint32 coinnum = 3;
void zjhDeskUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.coinnum)
  return coinnum_;
}
 void zjhDeskUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.coinnum)
}

// optional bytes headurl = 4;
void zjhDeskUserinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& zjhDeskUserinfo::headurl() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void zjhDeskUserinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.headurl)
}
 void zjhDeskUserinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjhuserinfo.zjhDeskUserinfo.headurl)
}
 void zjhDeskUserinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjhuserinfo.zjhDeskUserinfo.headurl)
}
 ::std::string* zjhDeskUserinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:zjhuserinfo.zjhDeskUserinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* zjhDeskUserinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:zjhuserinfo.zjhDeskUserinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void zjhDeskUserinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:zjhuserinfo.zjhDeskUserinfo.headurl)
}

// optional uint32 deskid = 5;
void zjhDeskUserinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskUserinfo::deskid() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.deskid)
  return deskid_;
}
 void zjhDeskUserinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.deskid)
}

// optional uint32 pos = 6;
void zjhDeskUserinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskUserinfo::pos() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.pos)
  return pos_;
}
 void zjhDeskUserinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.pos)
}

// optional uint32 status = 7;
void zjhDeskUserinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskUserinfo::status() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.status)
  return status_;
}
 void zjhDeskUserinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.status)
}

// optional uint32 offline = 8;
void zjhDeskUserinfo::clear_offline() {
  offline_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskUserinfo::offline() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.offline)
  return offline_;
}
 void zjhDeskUserinfo::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.offline)
}

// optional uint32 ifauto = 9;
void zjhDeskUserinfo::clear_ifauto() {
  ifauto_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskUserinfo::ifauto() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.ifauto)
  return ifauto_;
}
 void zjhDeskUserinfo::set_ifauto(::google::protobuf::uint32 value) {
  
  ifauto_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.ifauto)
}

// repeated .zjhuserinfo.Card poker = 10;
int zjhDeskUserinfo::poker_size() const {
  return poker_.size();
}
void zjhDeskUserinfo::clear_poker() {
  poker_.Clear();
}
const ::zjhuserinfo::Card& zjhDeskUserinfo::poker(int index) const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.poker)
  return poker_.Get(index);
}
::zjhuserinfo::Card* zjhDeskUserinfo::mutable_poker(int index) {
  // @@protoc_insertion_point(field_mutable:zjhuserinfo.zjhDeskUserinfo.poker)
  return poker_.Mutable(index);
}
::zjhuserinfo::Card* zjhDeskUserinfo::add_poker() {
  // @@protoc_insertion_point(field_add:zjhuserinfo.zjhDeskUserinfo.poker)
  return poker_.Add();
}
::google::protobuf::RepeatedPtrField< ::zjhuserinfo::Card >*
zjhDeskUserinfo::mutable_poker() {
  // @@protoc_insertion_point(field_mutable_list:zjhuserinfo.zjhDeskUserinfo.poker)
  return &poker_;
}
const ::google::protobuf::RepeatedPtrField< ::zjhuserinfo::Card >&
zjhDeskUserinfo::poker() const {
  // @@protoc_insertion_point(field_list:zjhuserinfo.zjhDeskUserinfo.poker)
  return poker_;
}

// optional uint32 gender = 11;
void zjhDeskUserinfo::clear_gender() {
  gender_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.gender)
  return gender_;
}
 void zjhDeskUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.gender)
}

// optional int32 matchscore = 12;
void zjhDeskUserinfo::clear_matchscore() {
  matchscore_ = 0;
}
 ::google::protobuf::int32 zjhDeskUserinfo::matchscore() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskUserinfo.matchscore)
  return matchscore_;
}
 void zjhDeskUserinfo::set_matchscore(::google::protobuf::int32 value) {
  
  matchscore_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskUserinfo.matchscore)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int zjhDeskinfo::kDeskidFieldNumber;
const int zjhDeskinfo::kStatusFieldNumber;
const int zjhDeskinfo::kCurposFieldNumber;
const int zjhDeskinfo::kSumTotalFieldNumber;
const int zjhDeskinfo::kSingleBetFieldNumber;
const int zjhDeskinfo::kUserlistFieldNumber;
const int zjhDeskinfo::kRoundCountFieldNumber;
const int zjhDeskinfo::kMatchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

zjhDeskinfo::zjhDeskinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjhuserinfo.zjhDeskinfo)
}

void zjhDeskinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

zjhDeskinfo::zjhDeskinfo(const zjhDeskinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zjhuserinfo.zjhDeskinfo)
}

void zjhDeskinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  deskid_ = 0u;
  status_ = 0u;
  curpos_ = 0u;
  sumtotal_ = 0u;
  singlebet_ = 0u;
  roundcount_ = 0u;
  matchid_ = 0u;
}

zjhDeskinfo::~zjhDeskinfo() {
  // @@protoc_insertion_point(destructor:zjhuserinfo.zjhDeskinfo)
  SharedDtor();
}

void zjhDeskinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void zjhDeskinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zjhDeskinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zjhDeskinfo_descriptor_;
}

const zjhDeskinfo& zjhDeskinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zjhuserinfo_2eproto();
  return *default_instance_;
}

zjhDeskinfo* zjhDeskinfo::default_instance_ = NULL;

zjhDeskinfo* zjhDeskinfo::New(::google::protobuf::Arena* arena) const {
  zjhDeskinfo* n = new zjhDeskinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void zjhDeskinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjhuserinfo.zjhDeskinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(zjhDeskinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<zjhDeskinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deskid_, sumtotal_);
  ZR_(singlebet_, matchid_);

#undef ZR_HELPER_
#undef ZR_

  userlist_.Clear();
}

bool zjhDeskinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjhuserinfo.zjhDeskinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curpos;
        break;
      }

      // optional uint32 curpos = 3;
      case 3: {
        if (tag == 24) {
         parse_curpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sumTotal;
        break;
      }

      // optional uint32 sumTotal = 4;
      case 4: {
        if (tag == 32) {
         parse_sumTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sumtotal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_singleBet;
        break;
      }

      // optional uint32 singleBet = 5;
      case 5: {
        if (tag == 40) {
         parse_singleBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &singlebet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_userlist;
        break;
      }

      // repeated .zjhuserinfo.zjhDeskUserinfo userlist = 6;
      case 6: {
        if (tag == 50) {
         parse_userlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_roundCount;
        break;
      }

      // optional uint32 roundCount = 7;
      case 7: {
        if (tag == 56) {
         parse_roundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roundcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_matchid;
        break;
      }

      // optional uint32 matchid = 8;
      case 8: {
        if (tag == 64) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjhuserinfo.zjhDeskinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjhuserinfo.zjhDeskinfo)
  return false;
#undef DO_
}

void zjhDeskinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjhuserinfo.zjhDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deskid(), output);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpos(), output);
  }

  // optional uint32 sumTotal = 4;
  if (this->sumtotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sumtotal(), output);
  }

  // optional uint32 singleBet = 5;
  if (this->singlebet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->singlebet(), output);
  }

  // repeated .zjhuserinfo.zjhDeskUserinfo userlist = 6;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->userlist(i), output);
  }

  // optional uint32 roundCount = 7;
  if (this->roundcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->roundcount(), output);
  }

  // optional uint32 matchid = 8;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->matchid(), output);
  }

  // @@protoc_insertion_point(serialize_end:zjhuserinfo.zjhDeskinfo)
}

::google::protobuf::uint8* zjhDeskinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjhuserinfo.zjhDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deskid(), target);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpos(), target);
  }

  // optional uint32 sumTotal = 4;
  if (this->sumtotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sumtotal(), target);
  }

  // optional uint32 singleBet = 5;
  if (this->singlebet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->singlebet(), target);
  }

  // repeated .zjhuserinfo.zjhDeskUserinfo userlist = 6;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->userlist(i), false, target);
  }

  // optional uint32 roundCount = 7;
  if (this->roundcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->roundcount(), target);
  }

  // optional uint32 matchid = 8;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->matchid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zjhuserinfo.zjhDeskinfo)
  return target;
}

int zjhDeskinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zjhuserinfo.zjhDeskinfo)
  int total_size = 0;

  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curpos());
  }

  // optional uint32 sumTotal = 4;
  if (this->sumtotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sumtotal());
  }

  // optional uint32 singleBet = 5;
  if (this->singlebet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->singlebet());
  }

  // optional uint32 roundCount = 7;
  if (this->roundcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roundcount());
  }

  // optional uint32 matchid = 8;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // repeated .zjhuserinfo.zjhDeskUserinfo userlist = 6;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zjhDeskinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjhuserinfo.zjhDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const zjhDeskinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const zjhDeskinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjhuserinfo.zjhDeskinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjhuserinfo.zjhDeskinfo)
    MergeFrom(*source);
  }
}

void zjhDeskinfo::MergeFrom(const zjhDeskinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjhuserinfo.zjhDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.curpos() != 0) {
    set_curpos(from.curpos());
  }
  if (from.sumtotal() != 0) {
    set_sumtotal(from.sumtotal());
  }
  if (from.singlebet() != 0) {
    set_singlebet(from.singlebet());
  }
  if (from.roundcount() != 0) {
    set_roundcount(from.roundcount());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void zjhDeskinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjhuserinfo.zjhDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zjhDeskinfo::CopyFrom(const zjhDeskinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjhuserinfo.zjhDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zjhDeskinfo::IsInitialized() const {

  return true;
}

void zjhDeskinfo::Swap(zjhDeskinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void zjhDeskinfo::InternalSwap(zjhDeskinfo* other) {
  std::swap(deskid_, other->deskid_);
  std::swap(status_, other->status_);
  std::swap(curpos_, other->curpos_);
  std::swap(sumtotal_, other->sumtotal_);
  std::swap(singlebet_, other->singlebet_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  std::swap(roundcount_, other->roundcount_);
  std::swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata zjhDeskinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zjhDeskinfo_descriptor_;
  metadata.reflection = zjhDeskinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// zjhDeskinfo

// optional uint32 deskid = 1;
void zjhDeskinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskinfo::deskid() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskinfo.deskid)
  return deskid_;
}
 void zjhDeskinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskinfo.deskid)
}

// optional uint32 status = 2;
void zjhDeskinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskinfo::status() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskinfo.status)
  return status_;
}
 void zjhDeskinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskinfo.status)
}

// optional uint32 curpos = 3;
void zjhDeskinfo::clear_curpos() {
  curpos_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskinfo::curpos() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskinfo.curpos)
  return curpos_;
}
 void zjhDeskinfo::set_curpos(::google::protobuf::uint32 value) {
  
  curpos_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskinfo.curpos)
}

// optional uint32 sumTotal = 4;
void zjhDeskinfo::clear_sumtotal() {
  sumtotal_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskinfo::sumtotal() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskinfo.sumTotal)
  return sumtotal_;
}
 void zjhDeskinfo::set_sumtotal(::google::protobuf::uint32 value) {
  
  sumtotal_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskinfo.sumTotal)
}

// optional uint32 singleBet = 5;
void zjhDeskinfo::clear_singlebet() {
  singlebet_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskinfo::singlebet() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskinfo.singleBet)
  return singlebet_;
}
 void zjhDeskinfo::set_singlebet(::google::protobuf::uint32 value) {
  
  singlebet_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskinfo.singleBet)
}

// repeated .zjhuserinfo.zjhDeskUserinfo userlist = 6;
int zjhDeskinfo::userlist_size() const {
  return userlist_.size();
}
void zjhDeskinfo::clear_userlist() {
  userlist_.Clear();
}
const ::zjhuserinfo::zjhDeskUserinfo& zjhDeskinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskinfo.userlist)
  return userlist_.Get(index);
}
::zjhuserinfo::zjhDeskUserinfo* zjhDeskinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:zjhuserinfo.zjhDeskinfo.userlist)
  return userlist_.Mutable(index);
}
::zjhuserinfo::zjhDeskUserinfo* zjhDeskinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:zjhuserinfo.zjhDeskinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::zjhuserinfo::zjhDeskUserinfo >*
zjhDeskinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:zjhuserinfo.zjhDeskinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::zjhuserinfo::zjhDeskUserinfo >&
zjhDeskinfo::userlist() const {
  // @@protoc_insertion_point(field_list:zjhuserinfo.zjhDeskinfo.userlist)
  return userlist_;
}

// optional uint32 roundCount = 7;
void zjhDeskinfo::clear_roundcount() {
  roundcount_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskinfo::roundcount() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskinfo.roundCount)
  return roundcount_;
}
 void zjhDeskinfo::set_roundcount(::google::protobuf::uint32 value) {
  
  roundcount_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskinfo.roundCount)
}

// optional uint32 matchid = 8;
void zjhDeskinfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskinfo::matchid() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskinfo.matchid)
  return matchid_;
}
 void zjhDeskinfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskinfo.matchid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int zjhDeskResultinfo::kPointFieldNumber;
const int zjhDeskResultinfo::kSumTotalFieldNumber;
const int zjhDeskResultinfo::kSingleBetFieldNumber;
const int zjhDeskResultinfo::kUserlistFieldNumber;
const int zjhDeskResultinfo::kWinposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

zjhDeskResultinfo::zjhDeskResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjhuserinfo.zjhDeskResultinfo)
}

void zjhDeskResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

zjhDeskResultinfo::zjhDeskResultinfo(const zjhDeskResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zjhuserinfo.zjhDeskResultinfo)
}

void zjhDeskResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  point_ = 0u;
  sumtotal_ = 0u;
  singlebet_ = 0u;
  winpos_ = 0;
}

zjhDeskResultinfo::~zjhDeskResultinfo() {
  // @@protoc_insertion_point(destructor:zjhuserinfo.zjhDeskResultinfo)
  SharedDtor();
}

void zjhDeskResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void zjhDeskResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zjhDeskResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zjhDeskResultinfo_descriptor_;
}

const zjhDeskResultinfo& zjhDeskResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zjhuserinfo_2eproto();
  return *default_instance_;
}

zjhDeskResultinfo* zjhDeskResultinfo::default_instance_ = NULL;

zjhDeskResultinfo* zjhDeskResultinfo::New(::google::protobuf::Arena* arena) const {
  zjhDeskResultinfo* n = new zjhDeskResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void zjhDeskResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjhuserinfo.zjhDeskResultinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(zjhDeskResultinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<zjhDeskResultinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(point_, sumtotal_);
  ZR_(singlebet_, winpos_);

#undef ZR_HELPER_
#undef ZR_

  userlist_.Clear();
}

bool zjhDeskResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjhuserinfo.zjhDeskResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sumTotal;
        break;
      }

      // optional uint32 sumTotal = 2;
      case 2: {
        if (tag == 16) {
         parse_sumTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sumtotal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_singleBet;
        break;
      }

      // optional uint32 singleBet = 3;
      case 3: {
        if (tag == 24) {
         parse_singleBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &singlebet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userlist;
        break;
      }

      // repeated .zjhuserinfo.zjhUserResultinfo userlist = 4;
      case 4: {
        if (tag == 34) {
         parse_userlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_winpos;
        break;
      }

      // optional int32 winpos = 5;
      case 5: {
        if (tag == 40) {
         parse_winpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjhuserinfo.zjhDeskResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjhuserinfo.zjhDeskResultinfo)
  return false;
#undef DO_
}

void zjhDeskResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjhuserinfo.zjhDeskResultinfo)
  // optional uint32 point = 1;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point(), output);
  }

  // optional uint32 sumTotal = 2;
  if (this->sumtotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sumtotal(), output);
  }

  // optional uint32 singleBet = 3;
  if (this->singlebet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->singlebet(), output);
  }

  // repeated .zjhuserinfo.zjhUserResultinfo userlist = 4;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userlist(i), output);
  }

  // optional int32 winpos = 5;
  if (this->winpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winpos(), output);
  }

  // @@protoc_insertion_point(serialize_end:zjhuserinfo.zjhDeskResultinfo)
}

::google::protobuf::uint8* zjhDeskResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjhuserinfo.zjhDeskResultinfo)
  // optional uint32 point = 1;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point(), target);
  }

  // optional uint32 sumTotal = 2;
  if (this->sumtotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sumtotal(), target);
  }

  // optional uint32 singleBet = 3;
  if (this->singlebet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->singlebet(), target);
  }

  // repeated .zjhuserinfo.zjhUserResultinfo userlist = 4;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->userlist(i), false, target);
  }

  // optional int32 winpos = 5;
  if (this->winpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winpos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zjhuserinfo.zjhDeskResultinfo)
  return target;
}

int zjhDeskResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zjhuserinfo.zjhDeskResultinfo)
  int total_size = 0;

  // optional uint32 point = 1;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point());
  }

  // optional uint32 sumTotal = 2;
  if (this->sumtotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sumtotal());
  }

  // optional uint32 singleBet = 3;
  if (this->singlebet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->singlebet());
  }

  // optional int32 winpos = 5;
  if (this->winpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->winpos());
  }

  // repeated .zjhuserinfo.zjhUserResultinfo userlist = 4;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zjhDeskResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjhuserinfo.zjhDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const zjhDeskResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const zjhDeskResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjhuserinfo.zjhDeskResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjhuserinfo.zjhDeskResultinfo)
    MergeFrom(*source);
  }
}

void zjhDeskResultinfo::MergeFrom(const zjhDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjhuserinfo.zjhDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.sumtotal() != 0) {
    set_sumtotal(from.sumtotal());
  }
  if (from.singlebet() != 0) {
    set_singlebet(from.singlebet());
  }
  if (from.winpos() != 0) {
    set_winpos(from.winpos());
  }
}

void zjhDeskResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjhuserinfo.zjhDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zjhDeskResultinfo::CopyFrom(const zjhDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjhuserinfo.zjhDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zjhDeskResultinfo::IsInitialized() const {

  return true;
}

void zjhDeskResultinfo::Swap(zjhDeskResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void zjhDeskResultinfo::InternalSwap(zjhDeskResultinfo* other) {
  std::swap(point_, other->point_);
  std::swap(sumtotal_, other->sumtotal_);
  std::swap(singlebet_, other->singlebet_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  std::swap(winpos_, other->winpos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata zjhDeskResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zjhDeskResultinfo_descriptor_;
  metadata.reflection = zjhDeskResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// zjhDeskResultinfo

// optional uint32 point = 1;
void zjhDeskResultinfo::clear_point() {
  point_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskResultinfo::point() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskResultinfo.point)
  return point_;
}
 void zjhDeskResultinfo::set_point(::google::protobuf::uint32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskResultinfo.point)
}

// optional uint32 sumTotal = 2;
void zjhDeskResultinfo::clear_sumtotal() {
  sumtotal_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskResultinfo::sumtotal() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskResultinfo.sumTotal)
  return sumtotal_;
}
 void zjhDeskResultinfo::set_sumtotal(::google::protobuf::uint32 value) {
  
  sumtotal_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskResultinfo.sumTotal)
}

// optional uint32 singleBet = 3;
void zjhDeskResultinfo::clear_singlebet() {
  singlebet_ = 0u;
}
 ::google::protobuf::uint32 zjhDeskResultinfo::singlebet() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskResultinfo.singleBet)
  return singlebet_;
}
 void zjhDeskResultinfo::set_singlebet(::google::protobuf::uint32 value) {
  
  singlebet_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskResultinfo.singleBet)
}

// repeated .zjhuserinfo.zjhUserResultinfo userlist = 4;
int zjhDeskResultinfo::userlist_size() const {
  return userlist_.size();
}
void zjhDeskResultinfo::clear_userlist() {
  userlist_.Clear();
}
const ::zjhuserinfo::zjhUserResultinfo& zjhDeskResultinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskResultinfo.userlist)
  return userlist_.Get(index);
}
::zjhuserinfo::zjhUserResultinfo* zjhDeskResultinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:zjhuserinfo.zjhDeskResultinfo.userlist)
  return userlist_.Mutable(index);
}
::zjhuserinfo::zjhUserResultinfo* zjhDeskResultinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:zjhuserinfo.zjhDeskResultinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::zjhuserinfo::zjhUserResultinfo >*
zjhDeskResultinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:zjhuserinfo.zjhDeskResultinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::zjhuserinfo::zjhUserResultinfo >&
zjhDeskResultinfo::userlist() const {
  // @@protoc_insertion_point(field_list:zjhuserinfo.zjhDeskResultinfo.userlist)
  return userlist_;
}

// optional int32 winpos = 5;
void zjhDeskResultinfo::clear_winpos() {
  winpos_ = 0;
}
 ::google::protobuf::int32 zjhDeskResultinfo::winpos() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhDeskResultinfo.winpos)
  return winpos_;
}
 void zjhDeskResultinfo::set_winpos(::google::protobuf::int32 value) {
  
  winpos_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhDeskResultinfo.winpos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int zjhUserResultinfo::kUidFieldNumber;
const int zjhUserResultinfo::kPosFieldNumber;
const int zjhUserResultinfo::kUsercardFieldNumber;
const int zjhUserResultinfo::kGamevalueFieldNumber;
const int zjhUserResultinfo::kRankFieldNumber;
const int zjhUserResultinfo::kLeftcountFieldNumber;
const int zjhUserResultinfo::kLeftvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

zjhUserResultinfo::zjhUserResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjhuserinfo.zjhUserResultinfo)
}

void zjhUserResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

zjhUserResultinfo::zjhUserResultinfo(const zjhUserResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zjhuserinfo.zjhUserResultinfo)
}

void zjhUserResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0u;
  pos_ = 0u;
  gamevalue_ = 0;
  rank_ = 0u;
  leftcount_ = 0;
  leftvalue_ = 0u;
}

zjhUserResultinfo::~zjhUserResultinfo() {
  // @@protoc_insertion_point(destructor:zjhuserinfo.zjhUserResultinfo)
  SharedDtor();
}

void zjhUserResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void zjhUserResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zjhUserResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zjhUserResultinfo_descriptor_;
}

const zjhUserResultinfo& zjhUserResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zjhuserinfo_2eproto();
  return *default_instance_;
}

zjhUserResultinfo* zjhUserResultinfo::default_instance_ = NULL;

zjhUserResultinfo* zjhUserResultinfo::New(::google::protobuf::Arena* arena) const {
  zjhUserResultinfo* n = new zjhUserResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void zjhUserResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjhuserinfo.zjhUserResultinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(zjhUserResultinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<zjhUserResultinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, pos_);
  ZR_(gamevalue_, leftvalue_);

#undef ZR_HELPER_
#undef ZR_

  usercard_.Clear();
}

bool zjhUserResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjhuserinfo.zjhUserResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_usercard;
        break;
      }

      // repeated .zjhuserinfo.Card usercard = 3;
      case 3: {
        if (tag == 26) {
         parse_usercard:
          DO_(input->IncrementRecursionDepth());
         parse_loop_usercard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_usercard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_usercard;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 4;
      case 4: {
        if (tag == 32) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 5;
      case 5: {
        if (tag == 40) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_leftcount;
        break;
      }

      // optional int32 leftcount = 6;
      case 6: {
        if (tag == 48) {
         parse_leftcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_leftvalue;
        break;
      }

      // optional uint32 leftvalue = 7;
      case 7: {
        if (tag == 56) {
         parse_leftvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftvalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjhuserinfo.zjhUserResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjhuserinfo.zjhUserResultinfo)
  return false;
#undef DO_
}

void zjhUserResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjhuserinfo.zjhUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // repeated .zjhuserinfo.Card usercard = 3;
  for (unsigned int i = 0, n = this->usercard_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usercard(i), output);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gamevalue(), output);
  }

  // optional uint32 rank = 5;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rank(), output);
  }

  // optional int32 leftcount = 6;
  if (this->leftcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leftcount(), output);
  }

  // optional uint32 leftvalue = 7;
  if (this->leftvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->leftvalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:zjhuserinfo.zjhUserResultinfo)
}

::google::protobuf::uint8* zjhUserResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjhuserinfo.zjhUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // repeated .zjhuserinfo.Card usercard = 3;
  for (unsigned int i = 0, n = this->usercard_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->usercard(i), false, target);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gamevalue(), target);
  }

  // optional uint32 rank = 5;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rank(), target);
  }

  // optional int32 leftcount = 6;
  if (this->leftcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leftcount(), target);
  }

  // optional uint32 leftvalue = 7;
  if (this->leftvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->leftvalue(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zjhuserinfo.zjhUserResultinfo)
  return target;
}

int zjhUserResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zjhuserinfo.zjhUserResultinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 rank = 5;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // optional int32 leftcount = 6;
  if (this->leftcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftcount());
  }

  // optional uint32 leftvalue = 7;
  if (this->leftvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftvalue());
  }

  // repeated .zjhuserinfo.Card usercard = 3;
  total_size += 1 * this->usercard_size();
  for (int i = 0; i < this->usercard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercard(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zjhUserResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjhuserinfo.zjhUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const zjhUserResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const zjhUserResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjhuserinfo.zjhUserResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjhuserinfo.zjhUserResultinfo)
    MergeFrom(*source);
  }
}

void zjhUserResultinfo::MergeFrom(const zjhUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjhuserinfo.zjhUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  usercard_.MergeFrom(from.usercard_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.leftcount() != 0) {
    set_leftcount(from.leftcount());
  }
  if (from.leftvalue() != 0) {
    set_leftvalue(from.leftvalue());
  }
}

void zjhUserResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjhuserinfo.zjhUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zjhUserResultinfo::CopyFrom(const zjhUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjhuserinfo.zjhUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zjhUserResultinfo::IsInitialized() const {

  return true;
}

void zjhUserResultinfo::Swap(zjhUserResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void zjhUserResultinfo::InternalSwap(zjhUserResultinfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(pos_, other->pos_);
  usercard_.UnsafeArenaSwap(&other->usercard_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(rank_, other->rank_);
  std::swap(leftcount_, other->leftcount_);
  std::swap(leftvalue_, other->leftvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata zjhUserResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zjhUserResultinfo_descriptor_;
  metadata.reflection = zjhUserResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// zjhUserResultinfo

// optional uint32 uid = 1;
void zjhUserResultinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 zjhUserResultinfo::uid() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserResultinfo.uid)
  return uid_;
}
 void zjhUserResultinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserResultinfo.uid)
}

// optional uint32 pos = 2;
void zjhUserResultinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 zjhUserResultinfo::pos() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserResultinfo.pos)
  return pos_;
}
 void zjhUserResultinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserResultinfo.pos)
}

// repeated .zjhuserinfo.Card usercard = 3;
int zjhUserResultinfo::usercard_size() const {
  return usercard_.size();
}
void zjhUserResultinfo::clear_usercard() {
  usercard_.Clear();
}
const ::zjhuserinfo::Card& zjhUserResultinfo::usercard(int index) const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserResultinfo.usercard)
  return usercard_.Get(index);
}
::zjhuserinfo::Card* zjhUserResultinfo::mutable_usercard(int index) {
  // @@protoc_insertion_point(field_mutable:zjhuserinfo.zjhUserResultinfo.usercard)
  return usercard_.Mutable(index);
}
::zjhuserinfo::Card* zjhUserResultinfo::add_usercard() {
  // @@protoc_insertion_point(field_add:zjhuserinfo.zjhUserResultinfo.usercard)
  return usercard_.Add();
}
::google::protobuf::RepeatedPtrField< ::zjhuserinfo::Card >*
zjhUserResultinfo::mutable_usercard() {
  // @@protoc_insertion_point(field_mutable_list:zjhuserinfo.zjhUserResultinfo.usercard)
  return &usercard_;
}
const ::google::protobuf::RepeatedPtrField< ::zjhuserinfo::Card >&
zjhUserResultinfo::usercard() const {
  // @@protoc_insertion_point(field_list:zjhuserinfo.zjhUserResultinfo.usercard)
  return usercard_;
}

// optional int32 gamevalue = 4;
void zjhUserResultinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 zjhUserResultinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserResultinfo.gamevalue)
  return gamevalue_;
}
 void zjhUserResultinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserResultinfo.gamevalue)
}

// optional uint32 rank = 5;
void zjhUserResultinfo::clear_rank() {
  rank_ = 0u;
}
 ::google::protobuf::uint32 zjhUserResultinfo::rank() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserResultinfo.rank)
  return rank_;
}
 void zjhUserResultinfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserResultinfo.rank)
}

// optional int32 leftcount = 6;
void zjhUserResultinfo::clear_leftcount() {
  leftcount_ = 0;
}
 ::google::protobuf::int32 zjhUserResultinfo::leftcount() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserResultinfo.leftcount)
  return leftcount_;
}
 void zjhUserResultinfo::set_leftcount(::google::protobuf::int32 value) {
  
  leftcount_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserResultinfo.leftcount)
}

// optional uint32 leftvalue = 7;
void zjhUserResultinfo::clear_leftvalue() {
  leftvalue_ = 0u;
}
 ::google::protobuf::uint32 zjhUserResultinfo::leftvalue() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhUserResultinfo.leftvalue)
  return leftvalue_;
}
 void zjhUserResultinfo::set_leftvalue(::google::protobuf::uint32 value) {
  
  leftvalue_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhUserResultinfo.leftvalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int zjhMatchInfo::kMatchidFieldNumber;
const int zjhMatchInfo::kTrunindexFieldNumber;
const int zjhMatchInfo::kCurnumFieldNumber;
const int zjhMatchInfo::kGamevalueFieldNumber;
const int zjhMatchInfo::kIfmatchFieldNumber;
const int zjhMatchInfo::kLeftnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

zjhMatchInfo::zjhMatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjhuserinfo.zjhMatchInfo)
}

void zjhMatchInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

zjhMatchInfo::zjhMatchInfo(const zjhMatchInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zjhuserinfo.zjhMatchInfo)
}

void zjhMatchInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  matchid_ = 0u;
  trunindex_ = 0u;
  curnum_ = 0u;
  gamevalue_ = 0;
  ifmatch_ = 0;
  leftnum_ = 0u;
}

zjhMatchInfo::~zjhMatchInfo() {
  // @@protoc_insertion_point(destructor:zjhuserinfo.zjhMatchInfo)
  SharedDtor();
}

void zjhMatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void zjhMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zjhMatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zjhMatchInfo_descriptor_;
}

const zjhMatchInfo& zjhMatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zjhuserinfo_2eproto();
  return *default_instance_;
}

zjhMatchInfo* zjhMatchInfo::default_instance_ = NULL;

zjhMatchInfo* zjhMatchInfo::New(::google::protobuf::Arena* arena) const {
  zjhMatchInfo* n = new zjhMatchInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void zjhMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjhuserinfo.zjhMatchInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(zjhMatchInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<zjhMatchInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(matchid_, leftnum_);

#undef ZR_HELPER_
#undef ZR_

}

bool zjhMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjhuserinfo.zjhMatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matchid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trunindex;
        break;
      }

      // optional uint32 trunindex = 2;
      case 2: {
        if (tag == 16) {
         parse_trunindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trunindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curnum;
        break;
      }

      // optional uint32 curnum = 3;
      case 3: {
        if (tag == 24) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 4;
      case 4: {
        if (tag == 32) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ifmatch;
        break;
      }

      // optional int32 ifmatch = 5;
      case 5: {
        if (tag == 40) {
         parse_ifmatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifmatch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_leftnum;
        break;
      }

      // optional uint32 leftnum = 6;
      case 6: {
        if (tag == 48) {
         parse_leftnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjhuserinfo.zjhMatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjhuserinfo.zjhMatchInfo)
  return false;
#undef DO_
}

void zjhMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjhuserinfo.zjhMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trunindex(), output);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curnum(), output);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gamevalue(), output);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifmatch(), output);
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leftnum(), output);
  }

  // @@protoc_insertion_point(serialize_end:zjhuserinfo.zjhMatchInfo)
}

::google::protobuf::uint8* zjhMatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjhuserinfo.zjhMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trunindex(), target);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curnum(), target);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gamevalue(), target);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifmatch(), target);
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->leftnum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zjhuserinfo.zjhMatchInfo)
  return target;
}

int zjhMatchInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zjhuserinfo.zjhMatchInfo)
  int total_size = 0;

  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trunindex());
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curnum());
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ifmatch());
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftnum());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zjhMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjhuserinfo.zjhMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const zjhMatchInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const zjhMatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjhuserinfo.zjhMatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjhuserinfo.zjhMatchInfo)
    MergeFrom(*source);
  }
}

void zjhMatchInfo::MergeFrom(const zjhMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjhuserinfo.zjhMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.trunindex() != 0) {
    set_trunindex(from.trunindex());
  }
  if (from.curnum() != 0) {
    set_curnum(from.curnum());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.ifmatch() != 0) {
    set_ifmatch(from.ifmatch());
  }
  if (from.leftnum() != 0) {
    set_leftnum(from.leftnum());
  }
}

void zjhMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjhuserinfo.zjhMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zjhMatchInfo::CopyFrom(const zjhMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjhuserinfo.zjhMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zjhMatchInfo::IsInitialized() const {

  return true;
}

void zjhMatchInfo::Swap(zjhMatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void zjhMatchInfo::InternalSwap(zjhMatchInfo* other) {
  std::swap(matchid_, other->matchid_);
  std::swap(trunindex_, other->trunindex_);
  std::swap(curnum_, other->curnum_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(ifmatch_, other->ifmatch_);
  std::swap(leftnum_, other->leftnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata zjhMatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zjhMatchInfo_descriptor_;
  metadata.reflection = zjhMatchInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// zjhMatchInfo

// optional uint32 matchid = 1;
void zjhMatchInfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 zjhMatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhMatchInfo.matchid)
  return matchid_;
}
 void zjhMatchInfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhMatchInfo.matchid)
}

// optional uint32 trunindex = 2;
void zjhMatchInfo::clear_trunindex() {
  trunindex_ = 0u;
}
 ::google::protobuf::uint32 zjhMatchInfo::trunindex() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhMatchInfo.trunindex)
  return trunindex_;
}
 void zjhMatchInfo::set_trunindex(::google::protobuf::uint32 value) {
  
  trunindex_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhMatchInfo.trunindex)
}

// optional uint32 curnum = 3;
void zjhMatchInfo::clear_curnum() {
  curnum_ = 0u;
}
 ::google::protobuf::uint32 zjhMatchInfo::curnum() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhMatchInfo.curnum)
  return curnum_;
}
 void zjhMatchInfo::set_curnum(::google::protobuf::uint32 value) {
  
  curnum_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhMatchInfo.curnum)
}

// optional int32 gamevalue = 4;
void zjhMatchInfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 zjhMatchInfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhMatchInfo.gamevalue)
  return gamevalue_;
}
 void zjhMatchInfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhMatchInfo.gamevalue)
}

// optional int32 ifmatch = 5;
void zjhMatchInfo::clear_ifmatch() {
  ifmatch_ = 0;
}
 ::google::protobuf::int32 zjhMatchInfo::ifmatch() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhMatchInfo.ifmatch)
  return ifmatch_;
}
 void zjhMatchInfo::set_ifmatch(::google::protobuf::int32 value) {
  
  ifmatch_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhMatchInfo.ifmatch)
}

// optional uint32 leftnum = 6;
void zjhMatchInfo::clear_leftnum() {
  leftnum_ = 0u;
}
 ::google::protobuf::uint32 zjhMatchInfo::leftnum() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhMatchInfo.leftnum)
  return leftnum_;
}
 void zjhMatchInfo::set_leftnum(::google::protobuf::uint32 value) {
  
  leftnum_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhMatchInfo.leftnum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int zjhSelfRoomInfo::kRoomidFieldNumber;
const int zjhSelfRoomInfo::kRoomcodeFieldNumber;
const int zjhSelfRoomInfo::kEndtimeFieldNumber;
const int zjhSelfRoomInfo::kCreateuidFieldNumber;
const int zjhSelfRoomInfo::kBasecoinFieldNumber;
const int zjhSelfRoomInfo::kPlaycountFieldNumber;
const int zjhSelfRoomInfo::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

zjhSelfRoomInfo::zjhSelfRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjhuserinfo.zjhSelfRoomInfo)
}

void zjhSelfRoomInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

zjhSelfRoomInfo::zjhSelfRoomInfo(const zjhSelfRoomInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zjhuserinfo.zjhSelfRoomInfo)
}

void zjhSelfRoomInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0u;
  roomcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = 0u;
  createuid_ = 0u;
  basecoin_ = 0u;
  playcount_ = 0u;
  pos_ = 0;
}

zjhSelfRoomInfo::~zjhSelfRoomInfo() {
  // @@protoc_insertion_point(destructor:zjhuserinfo.zjhSelfRoomInfo)
  SharedDtor();
}

void zjhSelfRoomInfo::SharedDtor() {
  roomcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void zjhSelfRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zjhSelfRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zjhSelfRoomInfo_descriptor_;
}

const zjhSelfRoomInfo& zjhSelfRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zjhuserinfo_2eproto();
  return *default_instance_;
}

zjhSelfRoomInfo* zjhSelfRoomInfo::default_instance_ = NULL;

zjhSelfRoomInfo* zjhSelfRoomInfo::New(::google::protobuf::Arena* arena) const {
  zjhSelfRoomInfo* n = new zjhSelfRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void zjhSelfRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjhuserinfo.zjhSelfRoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(zjhSelfRoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<zjhSelfRoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roomid_, pos_);
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool zjhSelfRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjhuserinfo.zjhSelfRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roomid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomcode;
        break;
      }

      // optional bytes roomcode = 2;
      case 2: {
        if (tag == 18) {
         parse_roomcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createuid;
        break;
      }

      // optional uint32 createuid = 4;
      case 4: {
        if (tag == 32) {
         parse_createuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createuid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basecoin;
        break;
      }

      // optional uint32 basecoin = 5;
      case 5: {
        if (tag == 40) {
         parse_basecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basecoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playcount;
        break;
      }

      // optional uint32 playcount = 6;
      case 6: {
        if (tag == 48) {
         parse_playcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pos;
        break;
      }

      // optional int32 pos = 7;
      case 7: {
        if (tag == 56) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjhuserinfo.zjhSelfRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjhuserinfo.zjhSelfRoomInfo)
  return false;
#undef DO_
}

void zjhSelfRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjhuserinfo.zjhSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomcode(), output);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createuid(), output);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->basecoin(), output);
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playcount(), output);
  }

  // optional int32 pos = 7;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos(), output);
  }

  // @@protoc_insertion_point(serialize_end:zjhuserinfo.zjhSelfRoomInfo)
}

::google::protobuf::uint8* zjhSelfRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjhuserinfo.zjhSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomcode(), target);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createuid(), target);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->basecoin(), target);
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playcount(), target);
  }

  // optional int32 pos = 7;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zjhuserinfo.zjhSelfRoomInfo)
  return target;
}

int zjhSelfRoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zjhuserinfo.zjhSelfRoomInfo)
  int total_size = 0;

  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomcode());
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endtime());
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createuid());
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->basecoin());
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playcount());
  }

  // optional int32 pos = 7;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zjhSelfRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjhuserinfo.zjhSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const zjhSelfRoomInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const zjhSelfRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjhuserinfo.zjhSelfRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjhuserinfo.zjhSelfRoomInfo)
    MergeFrom(*source);
  }
}

void zjhSelfRoomInfo::MergeFrom(const zjhSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjhuserinfo.zjhSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.roomcode().size() > 0) {

    roomcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomcode_);
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.createuid() != 0) {
    set_createuid(from.createuid());
  }
  if (from.basecoin() != 0) {
    set_basecoin(from.basecoin());
  }
  if (from.playcount() != 0) {
    set_playcount(from.playcount());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void zjhSelfRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjhuserinfo.zjhSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zjhSelfRoomInfo::CopyFrom(const zjhSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjhuserinfo.zjhSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zjhSelfRoomInfo::IsInitialized() const {

  return true;
}

void zjhSelfRoomInfo::Swap(zjhSelfRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void zjhSelfRoomInfo::InternalSwap(zjhSelfRoomInfo* other) {
  std::swap(roomid_, other->roomid_);
  roomcode_.Swap(&other->roomcode_);
  std::swap(endtime_, other->endtime_);
  std::swap(createuid_, other->createuid_);
  std::swap(basecoin_, other->basecoin_);
  std::swap(playcount_, other->playcount_);
  std::swap(pos_, other->pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata zjhSelfRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zjhSelfRoomInfo_descriptor_;
  metadata.reflection = zjhSelfRoomInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// zjhSelfRoomInfo

// optional uint32 roomid = 1;
void zjhSelfRoomInfo::clear_roomid() {
  roomid_ = 0u;
}
 ::google::protobuf::uint32 zjhSelfRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhSelfRoomInfo.roomid)
  return roomid_;
}
 void zjhSelfRoomInfo::set_roomid(::google::protobuf::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhSelfRoomInfo.roomid)
}

// optional bytes roomcode = 2;
void zjhSelfRoomInfo::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& zjhSelfRoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhSelfRoomInfo.roomcode)
  return roomcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void zjhSelfRoomInfo::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhSelfRoomInfo.roomcode)
}
 void zjhSelfRoomInfo::set_roomcode(const char* value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjhuserinfo.zjhSelfRoomInfo.roomcode)
}
 void zjhSelfRoomInfo::set_roomcode(const void* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjhuserinfo.zjhSelfRoomInfo.roomcode)
}
 ::std::string* zjhSelfRoomInfo::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:zjhuserinfo.zjhSelfRoomInfo.roomcode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* zjhSelfRoomInfo::release_roomcode() {
  // @@protoc_insertion_point(field_release:zjhuserinfo.zjhSelfRoomInfo.roomcode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void zjhSelfRoomInfo::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:zjhuserinfo.zjhSelfRoomInfo.roomcode)
}

// optional uint32 endtime = 3;
void zjhSelfRoomInfo::clear_endtime() {
  endtime_ = 0u;
}
 ::google::protobuf::uint32 zjhSelfRoomInfo::endtime() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhSelfRoomInfo.endtime)
  return endtime_;
}
 void zjhSelfRoomInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhSelfRoomInfo.endtime)
}

// optional uint32 createuid = 4;
void zjhSelfRoomInfo::clear_createuid() {
  createuid_ = 0u;
}
 ::google::protobuf::uint32 zjhSelfRoomInfo::createuid() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhSelfRoomInfo.createuid)
  return createuid_;
}
 void zjhSelfRoomInfo::set_createuid(::google::protobuf::uint32 value) {
  
  createuid_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhSelfRoomInfo.createuid)
}

// optional uint32 basecoin = 5;
void zjhSelfRoomInfo::clear_basecoin() {
  basecoin_ = 0u;
}
 ::google::protobuf::uint32 zjhSelfRoomInfo::basecoin() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhSelfRoomInfo.basecoin)
  return basecoin_;
}
 void zjhSelfRoomInfo::set_basecoin(::google::protobuf::uint32 value) {
  
  basecoin_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhSelfRoomInfo.basecoin)
}

// optional uint32 playcount = 6;
void zjhSelfRoomInfo::clear_playcount() {
  playcount_ = 0u;
}
 ::google::protobuf::uint32 zjhSelfRoomInfo::playcount() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhSelfRoomInfo.playcount)
  return playcount_;
}
 void zjhSelfRoomInfo::set_playcount(::google::protobuf::uint32 value) {
  
  playcount_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhSelfRoomInfo.playcount)
}

// optional int32 pos = 7;
void zjhSelfRoomInfo::clear_pos() {
  pos_ = 0;
}
 ::google::protobuf::int32 zjhSelfRoomInfo::pos() const {
  // @@protoc_insertion_point(field_get:zjhuserinfo.zjhSelfRoomInfo.pos)
  return pos_;
}
 void zjhSelfRoomInfo::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:zjhuserinfo.zjhSelfRoomInfo.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zjhuserinfo

// @@protoc_insertion_point(global_scope)
