// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "userinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace userinfo {

namespace {

const ::google::protobuf::Descriptor* Userinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Userinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeskUserinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeskUserinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DdzDeskinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DdzDeskinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DdzDeskResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DdzDeskResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DdzUserResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DdzUserResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DdzMatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DdzMatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DdzSelfRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DdzSelfRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeskNnUserinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeskNnUserinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NnDeskinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NnDeskinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NnUserPokerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NnUserPokerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NnUserPoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NnUserPoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* NNDeskResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NNDeskResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NNUserResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NNUserResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NnUserBetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NnUserBetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NnUserBet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NnUserBet_reflection_ = NULL;
const ::google::protobuf::Descriptor* NnMatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NnMatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NnSelfRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NnSelfRoomInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_userinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_userinfo_2eproto() {
  protobuf_AddDesc_userinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "userinfo.proto");
  GOOGLE_CHECK(file != NULL);
  Userinfo_descriptor_ = file->message_type(0);
  static const int Userinfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, ingotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, nowtime_),
  };
  Userinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Userinfo_descriptor_,
      Userinfo::default_instance_,
      Userinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(Userinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Userinfo, _is_default_instance_));
  Card_descriptor_ = file->message_type(1);
  static const int Card_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, value_),
  };
  Card_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      -1,
      -1,
      -1,
      sizeof(Card),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _is_default_instance_));
  DeskUserinfo_descriptor_ = file->message_type(2);
  static const int DeskUserinfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, offline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, ifauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, ifdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, ifshowcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, poker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, pokerlen_),
  };
  DeskUserinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeskUserinfo_descriptor_,
      DeskUserinfo::default_instance_,
      DeskUserinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeskUserinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskUserinfo, _is_default_instance_));
  DdzDeskinfo_descriptor_ = file->message_type(3);
  static const int DdzDeskinfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, bombnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, lastpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, putpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, pubpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, matchid_),
  };
  DdzDeskinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DdzDeskinfo_descriptor_,
      DdzDeskinfo::default_instance_,
      DdzDeskinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(DdzDeskinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskinfo, _is_default_instance_));
  DdzDeskResultinfo_descriptor_ = file->message_type(4);
  static const int DdzDeskResultinfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskResultinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskResultinfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskResultinfo, bombnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskResultinfo, ifspring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskResultinfo, userlist_),
  };
  DdzDeskResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DdzDeskResultinfo_descriptor_,
      DdzDeskResultinfo::default_instance_,
      DdzDeskResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(DdzDeskResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzDeskResultinfo, _is_default_instance_));
  DdzUserResultinfo_descriptor_ = file->message_type(5);
  static const int DdzUserResultinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, leftvalue_),
  };
  DdzUserResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DdzUserResultinfo_descriptor_,
      DdzUserResultinfo::default_instance_,
      DdzUserResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(DdzUserResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzUserResultinfo, _is_default_instance_));
  DdzMatchInfo_descriptor_ = file->message_type(6);
  static const int DdzMatchInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzMatchInfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzMatchInfo, trunindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzMatchInfo, curnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzMatchInfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzMatchInfo, ifmatch_),
  };
  DdzMatchInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DdzMatchInfo_descriptor_,
      DdzMatchInfo::default_instance_,
      DdzMatchInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(DdzMatchInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzMatchInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzMatchInfo, _is_default_instance_));
  DdzSelfRoomInfo_descriptor_ = file->message_type(7);
  static const int DdzSelfRoomInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzSelfRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzSelfRoomInfo, roomcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzSelfRoomInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzSelfRoomInfo, createuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzSelfRoomInfo, basecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzSelfRoomInfo, basetimes_),
  };
  DdzSelfRoomInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DdzSelfRoomInfo_descriptor_,
      DdzSelfRoomInfo::default_instance_,
      DdzSelfRoomInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(DdzSelfRoomInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzSelfRoomInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DdzSelfRoomInfo, _is_default_instance_));
  DeskNnUserinfo_descriptor_ = file->message_type(8);
  static const int DeskNnUserinfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, offline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, poker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, betnum_),
  };
  DeskNnUserinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeskNnUserinfo_descriptor_,
      DeskNnUserinfo::default_instance_,
      DeskNnUserinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeskNnUserinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskNnUserinfo, _is_default_instance_));
  NnDeskinfo_descriptor_ = file->message_type(9);
  static const int NnDeskinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnDeskinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnDeskinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnDeskinfo, hostpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnDeskinfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnDeskinfo, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnDeskinfo, matchid_),
  };
  NnDeskinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NnDeskinfo_descriptor_,
      NnDeskinfo::default_instance_,
      NnDeskinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NnDeskinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnDeskinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnDeskinfo, _is_default_instance_));
  NnUserPokerList_descriptor_ = file->message_type(10);
  static const int NnUserPokerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserPokerList, userlist_),
  };
  NnUserPokerList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NnUserPokerList_descriptor_,
      NnUserPokerList::default_instance_,
      NnUserPokerList_offsets_,
      -1,
      -1,
      -1,
      sizeof(NnUserPokerList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserPokerList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserPokerList, _is_default_instance_));
  NnUserPoker_descriptor_ = file->message_type(11);
  static const int NnUserPoker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserPoker, userpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserPoker, pokerlist_),
  };
  NnUserPoker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NnUserPoker_descriptor_,
      NnUserPoker::default_instance_,
      NnUserPoker_offsets_,
      -1,
      -1,
      -1,
      sizeof(NnUserPoker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserPoker, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserPoker, _is_default_instance_));
  NNDeskResultinfo_descriptor_ = file->message_type(12);
  static const int NNDeskResultinfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNDeskResultinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNDeskResultinfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNDeskResultinfo, userlist_),
  };
  NNDeskResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NNDeskResultinfo_descriptor_,
      NNDeskResultinfo::default_instance_,
      NNDeskResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NNDeskResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNDeskResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNDeskResultinfo, _is_default_instance_));
  NNUserResultinfo_descriptor_ = file->message_type(13);
  static const int NNUserResultinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, leftvalue_),
  };
  NNUserResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NNUserResultinfo_descriptor_,
      NNUserResultinfo::default_instance_,
      NNUserResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NNUserResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NNUserResultinfo, _is_default_instance_));
  NnUserBetList_descriptor_ = file->message_type(14);
  static const int NnUserBetList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserBetList, userlist_),
  };
  NnUserBetList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NnUserBetList_descriptor_,
      NnUserBetList::default_instance_,
      NnUserBetList_offsets_,
      -1,
      -1,
      -1,
      sizeof(NnUserBetList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserBetList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserBetList, _is_default_instance_));
  NnUserBet_descriptor_ = file->message_type(15);
  static const int NnUserBet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserBet, userpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserBet, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserBet, betnum_),
  };
  NnUserBet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NnUserBet_descriptor_,
      NnUserBet::default_instance_,
      NnUserBet_offsets_,
      -1,
      -1,
      -1,
      sizeof(NnUserBet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserBet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnUserBet, _is_default_instance_));
  NnMatchInfo_descriptor_ = file->message_type(16);
  static const int NnMatchInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnMatchInfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnMatchInfo, trunindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnMatchInfo, curnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnMatchInfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnMatchInfo, ifmatch_),
  };
  NnMatchInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NnMatchInfo_descriptor_,
      NnMatchInfo::default_instance_,
      NnMatchInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NnMatchInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnMatchInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnMatchInfo, _is_default_instance_));
  NnSelfRoomInfo_descriptor_ = file->message_type(17);
  static const int NnSelfRoomInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnSelfRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnSelfRoomInfo, roomcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnSelfRoomInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnSelfRoomInfo, createuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnSelfRoomInfo, basecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnSelfRoomInfo, basetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnSelfRoomInfo, gamenum_),
  };
  NnSelfRoomInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NnSelfRoomInfo_descriptor_,
      NnSelfRoomInfo::default_instance_,
      NnSelfRoomInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NnSelfRoomInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnSelfRoomInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NnSelfRoomInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_userinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Userinfo_descriptor_, &Userinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeskUserinfo_descriptor_, &DeskUserinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DdzDeskinfo_descriptor_, &DdzDeskinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DdzDeskResultinfo_descriptor_, &DdzDeskResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DdzUserResultinfo_descriptor_, &DdzUserResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DdzMatchInfo_descriptor_, &DdzMatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DdzSelfRoomInfo_descriptor_, &DdzSelfRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeskNnUserinfo_descriptor_, &DeskNnUserinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NnDeskinfo_descriptor_, &NnDeskinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NnUserPokerList_descriptor_, &NnUserPokerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NnUserPoker_descriptor_, &NnUserPoker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NNDeskResultinfo_descriptor_, &NNDeskResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NNUserResultinfo_descriptor_, &NNUserResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NnUserBetList_descriptor_, &NnUserBetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NnUserBet_descriptor_, &NnUserBet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NnMatchInfo_descriptor_, &NnMatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NnSelfRoomInfo_descriptor_, &NnSelfRoomInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_userinfo_2eproto() {
  delete Userinfo::default_instance_;
  delete Userinfo_reflection_;
  delete Card::default_instance_;
  delete Card_reflection_;
  delete DeskUserinfo::default_instance_;
  delete DeskUserinfo_reflection_;
  delete DdzDeskinfo::default_instance_;
  delete DdzDeskinfo_reflection_;
  delete DdzDeskResultinfo::default_instance_;
  delete DdzDeskResultinfo_reflection_;
  delete DdzUserResultinfo::default_instance_;
  delete DdzUserResultinfo_reflection_;
  delete DdzMatchInfo::default_instance_;
  delete DdzMatchInfo_reflection_;
  delete DdzSelfRoomInfo::default_instance_;
  delete DdzSelfRoomInfo_reflection_;
  delete DeskNnUserinfo::default_instance_;
  delete DeskNnUserinfo_reflection_;
  delete NnDeskinfo::default_instance_;
  delete NnDeskinfo_reflection_;
  delete NnUserPokerList::default_instance_;
  delete NnUserPokerList_reflection_;
  delete NnUserPoker::default_instance_;
  delete NnUserPoker_reflection_;
  delete NNDeskResultinfo::default_instance_;
  delete NNDeskResultinfo_reflection_;
  delete NNUserResultinfo::default_instance_;
  delete NNUserResultinfo_reflection_;
  delete NnUserBetList::default_instance_;
  delete NnUserBetList_reflection_;
  delete NnUserBet::default_instance_;
  delete NnUserBet_reflection_;
  delete NnMatchInfo::default_instance_;
  delete NnMatchInfo_reflection_;
  delete NnSelfRoomInfo::default_instance_;
  delete NnSelfRoomInfo_reflection_;
}

void protobuf_AddDesc_userinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_userinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016userinfo.proto\022\010userinfo\"\215\001\n\010Userinfo\022"
    "\013\n\003uid\030\001 \001(\r\022\r\n\005uname\030\002 \001(\014\022\017\n\007coinnum\030\003"
    " \001(\r\022\020\n\010integral\030\004 \001(\r\022\020\n\010ingotnum\030\005 \001(\r"
    "\022\016\n\006gender\030\006 \001(\r\022\017\n\007headurl\030\007 \001(\014\022\017\n\007now"
    "time\030\010 \001(\r\"\025\n\004Card\022\r\n\005value\030\001 \001(\r\"\246\002\n\014De"
    "skUserinfo\022\013\n\003uid\030\001 \001(\r\022\r\n\005uname\030\002 \001(\014\022\017"
    "\n\007coinnum\030\003 \001(\r\022\017\n\007headurl\030\004 \001(\014\022\016\n\006desk"
    "id\030\005 \001(\r\022\013\n\003pos\030\006 \001(\r\022\016\n\006status\030\007 \001(\r\022\017\n"
    "\007offline\030\010 \001(\r\022\016\n\006ifauto\030\t \001(\r\022\020\n\010ifdoub"
    "le\030\n \001(\r\022\022\n\nifshowcard\030\013 \001(\r\022\035\n\005poker\030\014 "
    "\003(\0132\016.userinfo.Card\022\016\n\006gender\030\r \001(\r\022\020\n\010i"
    "ntegral\030\016 \001(\r\022\021\n\tgamevalue\030\017 \001(\005\022\020\n\010poke"
    "rlen\030\020 \001(\r\"\377\001\n\013DdzDeskinfo\022\016\n\006deskid\030\001 \001"
    "(\r\022\016\n\006status\030\002 \001(\r\022\016\n\006curpos\030\003 \001(\r\022\r\n\005po"
    "int\030\004 \001(\r\022\017\n\007bombnum\030\005 \001(\r\022!\n\tlastpoker\030"
    "\006 \003(\0132\016.userinfo.Card\022 \n\010putpoker\030\007 \003(\0132"
    "\016.userinfo.Card\022(\n\010userlist\030\010 \003(\0132\026.user"
    "info.DeskUserinfo\022 \n\010pubpoker\030\t \003(\0132\016.us"
    "erinfo.Card\022\017\n\007matchid\030\n \001(\r\"\204\001\n\021DdzDesk"
    "Resultinfo\022\016\n\006status\030\001 \001(\r\022\r\n\005point\030\002 \001("
    "\r\022\017\n\007bombnum\030\003 \001(\r\022\020\n\010ifspring\030\004 \001(\r\022-\n\010"
    "userlist\030\005 \003(\0132\033.userinfo.DdzUserResulti"
    "nfo\"\235\001\n\021DdzUserResultinfo\022\013\n\003uid\030\001 \001(\r\022\013"
    "\n\003pos\030\002 \001(\r\022\r\n\005point\030\003 \001(\r\022\016\n\006result\030\004 \001"
    "(\r\022\r\n\005value\030\005 \001(\r\022\014\n\004coin\030\006 \001(\r\022\021\n\tgamev"
    "alue\030\007 \001(\005\022\014\n\004rank\030\010 \001(\r\022\021\n\tleftvalue\030\t "
    "\001(\r\"f\n\014DdzMatchInfo\022\017\n\007matchid\030\001 \001(\r\022\021\n\t"
    "trunindex\030\002 \001(\r\022\016\n\006curnum\030\003 \001(\r\022\021\n\tgamev"
    "alue\030\004 \001(\005\022\017\n\007ifmatch\030\005 \001(\005\"|\n\017DdzSelfRo"
    "omInfo\022\016\n\006roomid\030\001 \001(\r\022\020\n\010roomcode\030\002 \001(\014"
    "\022\017\n\007endtime\030\003 \001(\r\022\021\n\tcreateuid\030\004 \001(\r\022\020\n\010"
    "basecoin\030\005 \001(\r\022\021\n\tbasetimes\030\006 \001(\r\"\377\001\n\016De"
    "skNnUserinfo\022\013\n\003uid\030\001 \001(\r\022\r\n\005uname\030\002 \001(\014"
    "\022\017\n\007coinnum\030\003 \001(\r\022\017\n\007headurl\030\004 \001(\014\022\016\n\006de"
    "skid\030\005 \001(\r\022\013\n\003pos\030\006 \001(\r\022\016\n\006status\030\007 \001(\r\022"
    "\017\n\007offline\030\010 \001(\r\022\035\n\005poker\030\t \003(\0132\016.userin"
    "fo.Card\022\016\n\006gender\030\n \001(\r\022\020\n\010integral\030\013 \001("
    "\r\022\021\n\tgamevalue\030\014 \001(\r\022\r\n\005times\030\r \001(\r\022\016\n\006b"
    "etnum\030\016 \001(\r\"\211\001\n\nNnDeskinfo\022\016\n\006deskid\030\001 \001"
    "(\r\022\016\n\006status\030\002 \001(\r\022\017\n\007hostpos\030\003 \001(\r\022\r\n\005t"
    "imes\030\004 \001(\r\022*\n\010userlist\030\005 \003(\0132\030.userinfo."
    "DeskNnUserinfo\022\017\n\007matchid\030\006 \001(\r\":\n\017NnUse"
    "rPokerList\022\'\n\010userlist\030\001 \003(\0132\025.userinfo."
    "NnUserPoker\"A\n\013NnUserPoker\022\017\n\007userpos\030\001 "
    "\001(\r\022!\n\tpokerlist\030\002 \003(\0132\016.userinfo.Card\"_"
    "\n\020NNDeskResultinfo\022\016\n\006status\030\001 \001(\r\022\r\n\005ti"
    "mes\030\002 \001(\r\022,\n\010userlist\030\005 \003(\0132\032.userinfo.N"
    "NUserResultinfo\"\234\001\n\020NNUserResultinfo\022\013\n\003"
    "uid\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\022\r\n\005times\030\003 \001(\r\022\016\n"
    "\006result\030\004 \001(\r\022\r\n\005value\030\005 \001(\r\022\014\n\004coin\030\006 \001"
    "(\r\022\021\n\tgamevalue\030\007 \001(\005\022\014\n\004rank\030\010 \001(\r\022\021\n\tl"
    "eftvalue\030\t \001(\r\"6\n\rNnUserBetList\022%\n\010userl"
    "ist\030\001 \003(\0132\023.userinfo.NnUserBet\";\n\tNnUser"
    "Bet\022\017\n\007userpos\030\001 \001(\r\022\r\n\005times\030\002 \001(\r\022\016\n\006b"
    "etnum\030\003 \001(\r\"e\n\013NnMatchInfo\022\017\n\007matchid\030\001 "
    "\001(\r\022\021\n\ttrunindex\030\002 \001(\r\022\016\n\006curnum\030\003 \001(\r\022\021"
    "\n\tgamevalue\030\004 \001(\005\022\017\n\007ifmatch\030\005 \001(\005\"\214\001\n\016N"
    "nSelfRoomInfo\022\016\n\006roomid\030\001 \001(\r\022\020\n\010roomcod"
    "e\030\002 \001(\014\022\017\n\007endtime\030\003 \001(\r\022\021\n\tcreateuid\030\004 "
    "\001(\r\022\020\n\010basecoin\030\005 \001(\r\022\021\n\tbasetimes\030\006 \001(\r"
    "\022\017\n\007gamenum\030\007 \001(\rb\006proto3", 2425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "userinfo.proto", &protobuf_RegisterTypes);
  Userinfo::default_instance_ = new Userinfo();
  Card::default_instance_ = new Card();
  DeskUserinfo::default_instance_ = new DeskUserinfo();
  DdzDeskinfo::default_instance_ = new DdzDeskinfo();
  DdzDeskResultinfo::default_instance_ = new DdzDeskResultinfo();
  DdzUserResultinfo::default_instance_ = new DdzUserResultinfo();
  DdzMatchInfo::default_instance_ = new DdzMatchInfo();
  DdzSelfRoomInfo::default_instance_ = new DdzSelfRoomInfo();
  DeskNnUserinfo::default_instance_ = new DeskNnUserinfo();
  NnDeskinfo::default_instance_ = new NnDeskinfo();
  NnUserPokerList::default_instance_ = new NnUserPokerList();
  NnUserPoker::default_instance_ = new NnUserPoker();
  NNDeskResultinfo::default_instance_ = new NNDeskResultinfo();
  NNUserResultinfo::default_instance_ = new NNUserResultinfo();
  NnUserBetList::default_instance_ = new NnUserBetList();
  NnUserBet::default_instance_ = new NnUserBet();
  NnMatchInfo::default_instance_ = new NnMatchInfo();
  NnSelfRoomInfo::default_instance_ = new NnSelfRoomInfo();
  Userinfo::default_instance_->InitAsDefaultInstance();
  Card::default_instance_->InitAsDefaultInstance();
  DeskUserinfo::default_instance_->InitAsDefaultInstance();
  DdzDeskinfo::default_instance_->InitAsDefaultInstance();
  DdzDeskResultinfo::default_instance_->InitAsDefaultInstance();
  DdzUserResultinfo::default_instance_->InitAsDefaultInstance();
  DdzMatchInfo::default_instance_->InitAsDefaultInstance();
  DdzSelfRoomInfo::default_instance_->InitAsDefaultInstance();
  DeskNnUserinfo::default_instance_->InitAsDefaultInstance();
  NnDeskinfo::default_instance_->InitAsDefaultInstance();
  NnUserPokerList::default_instance_->InitAsDefaultInstance();
  NnUserPoker::default_instance_->InitAsDefaultInstance();
  NNDeskResultinfo::default_instance_->InitAsDefaultInstance();
  NNUserResultinfo::default_instance_->InitAsDefaultInstance();
  NnUserBetList::default_instance_->InitAsDefaultInstance();
  NnUserBet::default_instance_->InitAsDefaultInstance();
  NnMatchInfo::default_instance_->InitAsDefaultInstance();
  NnSelfRoomInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_userinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_userinfo_2eproto {
  StaticDescriptorInitializer_userinfo_2eproto() {
    protobuf_AddDesc_userinfo_2eproto();
  }
} static_descriptor_initializer_userinfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Userinfo::kUidFieldNumber;
const int Userinfo::kUnameFieldNumber;
const int Userinfo::kCoinnumFieldNumber;
const int Userinfo::kIntegralFieldNumber;
const int Userinfo::kIngotnumFieldNumber;
const int Userinfo::kGenderFieldNumber;
const int Userinfo::kHeadurlFieldNumber;
const int Userinfo::kNowtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Userinfo::Userinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.Userinfo)
}

void Userinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Userinfo::Userinfo(const Userinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.Userinfo)
}

void Userinfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinnum_ = 0u;
  integral_ = 0u;
  ingotnum_ = 0u;
  gender_ = 0u;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nowtime_ = 0u;
}

Userinfo::~Userinfo() {
  // @@protoc_insertion_point(destructor:userinfo.Userinfo)
  SharedDtor();
}

void Userinfo::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Userinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Userinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Userinfo_descriptor_;
}

const Userinfo& Userinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

Userinfo* Userinfo::default_instance_ = NULL;

Userinfo* Userinfo::New(::google::protobuf::Arena* arena) const {
  Userinfo* n = new Userinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Userinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.Userinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Userinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Userinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, ingotnum_);
  ZR_(gender_, nowtime_);
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Userinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.Userinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uname;
        break;
      }

      // optional bytes uname = 2;
      case 2: {
        if (tag == 18) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coinnum;
        break;
      }

      // optional uint32 coinnum = 3;
      case 3: {
        if (tag == 24) {
         parse_coinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 4;
      case 4: {
        if (tag == 32) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ingotnum;
        break;
      }

      // optional uint32 ingotnum = 5;
      case 5: {
        if (tag == 40) {
         parse_ingotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingotnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 6;
      case 6: {
        if (tag == 48) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_headurl;
        break;
      }

      // optional bytes headurl = 7;
      case 7: {
        if (tag == 58) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_headurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_nowtime;
        break;
      }

      // optional uint32 nowtime = 8;
      case 8: {
        if (tag == 64) {
         parse_nowtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.Userinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.Userinfo)
  return false;
#undef DO_
}

void Userinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.Userinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coinnum(), output);
  }

  // optional uint32 integral = 4;
  if (this->integral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->integral(), output);
  }

  // optional uint32 ingotnum = 5;
  if (this->ingotnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ingotnum(), output);
  }

  // optional uint32 gender = 6;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gender(), output);
  }

  // optional bytes headurl = 7;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->headurl(), output);
  }

  // optional uint32 nowtime = 8;
  if (this->nowtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nowtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.Userinfo)
}

::google::protobuf::uint8* Userinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.Userinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uname(), target);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coinnum(), target);
  }

  // optional uint32 integral = 4;
  if (this->integral() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->integral(), target);
  }

  // optional uint32 ingotnum = 5;
  if (this->ingotnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ingotnum(), target);
  }

  // optional uint32 gender = 6;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gender(), target);
  }

  // optional bytes headurl = 7;
  if (this->headurl().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->headurl(), target);
  }

  // optional uint32 nowtime = 8;
  if (this->nowtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->nowtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.Userinfo)
  return target;
}

int Userinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.Userinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uname());
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coinnum());
  }

  // optional uint32 integral = 4;
  if (this->integral() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->integral());
  }

  // optional uint32 ingotnum = 5;
  if (this->ingotnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ingotnum());
  }

  // optional uint32 gender = 6;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional bytes headurl = 7;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->headurl());
  }

  // optional uint32 nowtime = 8;
  if (this->nowtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nowtime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Userinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.Userinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Userinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Userinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.Userinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.Userinfo)
    MergeFrom(*source);
  }
}

void Userinfo::MergeFrom(const Userinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.Userinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.coinnum() != 0) {
    set_coinnum(from.coinnum());
  }
  if (from.integral() != 0) {
    set_integral(from.integral());
  }
  if (from.ingotnum() != 0) {
    set_ingotnum(from.ingotnum());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.nowtime() != 0) {
    set_nowtime(from.nowtime());
  }
}

void Userinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.Userinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Userinfo::CopyFrom(const Userinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.Userinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Userinfo::IsInitialized() const {

  return true;
}

void Userinfo::Swap(Userinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Userinfo::InternalSwap(Userinfo* other) {
  std::swap(uid_, other->uid_);
  uname_.Swap(&other->uname_);
  std::swap(coinnum_, other->coinnum_);
  std::swap(integral_, other->integral_);
  std::swap(ingotnum_, other->ingotnum_);
  std::swap(gender_, other->gender_);
  headurl_.Swap(&other->headurl_);
  std::swap(nowtime_, other->nowtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Userinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Userinfo_descriptor_;
  metadata.reflection = Userinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Userinfo

// optional uint32 uid = 1;
void Userinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 Userinfo::uid() const {
  // @@protoc_insertion_point(field_get:userinfo.Userinfo.uid)
  return uid_;
}
 void Userinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.Userinfo.uid)
}

// optional bytes uname = 2;
void Userinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Userinfo::uname() const {
  // @@protoc_insertion_point(field_get:userinfo.Userinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Userinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userinfo.Userinfo.uname)
}
 void Userinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userinfo.Userinfo.uname)
}
 void Userinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userinfo.Userinfo.uname)
}
 ::std::string* Userinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:userinfo.Userinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Userinfo::release_uname() {
  // @@protoc_insertion_point(field_release:userinfo.Userinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Userinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:userinfo.Userinfo.uname)
}

// optional uint32 coinnum = 3;
void Userinfo::clear_coinnum() {
  coinnum_ = 0u;
}
 ::google::protobuf::uint32 Userinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:userinfo.Userinfo.coinnum)
  return coinnum_;
}
 void Userinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.Userinfo.coinnum)
}

// optional uint32 integral = 4;
void Userinfo::clear_integral() {
  integral_ = 0u;
}
 ::google::protobuf::uint32 Userinfo::integral() const {
  // @@protoc_insertion_point(field_get:userinfo.Userinfo.integral)
  return integral_;
}
 void Userinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:userinfo.Userinfo.integral)
}

// optional uint32 ingotnum = 5;
void Userinfo::clear_ingotnum() {
  ingotnum_ = 0u;
}
 ::google::protobuf::uint32 Userinfo::ingotnum() const {
  // @@protoc_insertion_point(field_get:userinfo.Userinfo.ingotnum)
  return ingotnum_;
}
 void Userinfo::set_ingotnum(::google::protobuf::uint32 value) {
  
  ingotnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.Userinfo.ingotnum)
}

// optional uint32 gender = 6;
void Userinfo::clear_gender() {
  gender_ = 0u;
}
 ::google::protobuf::uint32 Userinfo::gender() const {
  // @@protoc_insertion_point(field_get:userinfo.Userinfo.gender)
  return gender_;
}
 void Userinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:userinfo.Userinfo.gender)
}

// optional bytes headurl = 7;
void Userinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Userinfo::headurl() const {
  // @@protoc_insertion_point(field_get:userinfo.Userinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Userinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userinfo.Userinfo.headurl)
}
 void Userinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userinfo.Userinfo.headurl)
}
 void Userinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userinfo.Userinfo.headurl)
}
 ::std::string* Userinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:userinfo.Userinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Userinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:userinfo.Userinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Userinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:userinfo.Userinfo.headurl)
}

// optional uint32 nowtime = 8;
void Userinfo::clear_nowtime() {
  nowtime_ = 0u;
}
 ::google::protobuf::uint32 Userinfo::nowtime() const {
  // @@protoc_insertion_point(field_get:userinfo.Userinfo.nowtime)
  return nowtime_;
}
 void Userinfo::set_nowtime(::google::protobuf::uint32 value) {
  
  nowtime_ = value;
  // @@protoc_insertion_point(field_set:userinfo.Userinfo.nowtime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Card::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Card::Card()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.Card)
}

void Card::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Card::Card(const Card& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.Card)
}

void Card::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:userinfo.Card)
  SharedDtor();
}

void Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New(::google::protobuf::Arena* arena) const {
  Card* n = new Card;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.Card)
  value_ = 0u;
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.Card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.Card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.Card)
  return false;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.Card)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.Card)
}

::google::protobuf::uint8* Card::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.Card)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.Card)
  return target;
}

int Card::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.Card)
  int total_size = 0;

  // optional uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Card* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Card>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.Card)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.Card)
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {

  return true;
}

void Card::Swap(Card* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Card::InternalSwap(Card* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional uint32 value = 1;
void Card::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 Card::value() const {
  // @@protoc_insertion_point(field_get:userinfo.Card.value)
  return value_;
}
 void Card::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:userinfo.Card.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeskUserinfo::kUidFieldNumber;
const int DeskUserinfo::kUnameFieldNumber;
const int DeskUserinfo::kCoinnumFieldNumber;
const int DeskUserinfo::kHeadurlFieldNumber;
const int DeskUserinfo::kDeskidFieldNumber;
const int DeskUserinfo::kPosFieldNumber;
const int DeskUserinfo::kStatusFieldNumber;
const int DeskUserinfo::kOfflineFieldNumber;
const int DeskUserinfo::kIfautoFieldNumber;
const int DeskUserinfo::kIfdoubleFieldNumber;
const int DeskUserinfo::kIfshowcardFieldNumber;
const int DeskUserinfo::kPokerFieldNumber;
const int DeskUserinfo::kGenderFieldNumber;
const int DeskUserinfo::kIntegralFieldNumber;
const int DeskUserinfo::kGamevalueFieldNumber;
const int DeskUserinfo::kPokerlenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeskUserinfo::DeskUserinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.DeskUserinfo)
}

void DeskUserinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeskUserinfo::DeskUserinfo(const DeskUserinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.DeskUserinfo)
}

void DeskUserinfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinnum_ = 0u;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deskid_ = 0u;
  pos_ = 0u;
  status_ = 0u;
  offline_ = 0u;
  ifauto_ = 0u;
  ifdouble_ = 0u;
  ifshowcard_ = 0u;
  gender_ = 0u;
  integral_ = 0u;
  gamevalue_ = 0;
  pokerlen_ = 0u;
}

DeskUserinfo::~DeskUserinfo() {
  // @@protoc_insertion_point(destructor:userinfo.DeskUserinfo)
  SharedDtor();
}

void DeskUserinfo::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeskUserinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeskUserinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskUserinfo_descriptor_;
}

const DeskUserinfo& DeskUserinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

DeskUserinfo* DeskUserinfo::default_instance_ = NULL;

DeskUserinfo* DeskUserinfo::New(::google::protobuf::Arena* arena) const {
  DeskUserinfo* n = new DeskUserinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeskUserinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.DeskUserinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeskUserinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeskUserinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, coinnum_);
  ZR_(deskid_, offline_);
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(ifauto_, ifdouble_);
  ZR_(ifshowcard_, pokerlen_);

#undef ZR_HELPER_
#undef ZR_

  poker_.Clear();
}

bool DeskUserinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.DeskUserinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uname;
        break;
      }

      // optional bytes uname = 2;
      case 2: {
        if (tag == 18) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coinnum;
        break;
      }

      // optional uint32 coinnum = 3;
      case 3: {
        if (tag == 24) {
         parse_coinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_headurl;
        break;
      }

      // optional bytes headurl = 4;
      case 4: {
        if (tag == 34) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_headurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deskid;
        break;
      }

      // optional uint32 deskid = 5;
      case 5: {
        if (tag == 40) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 6;
      case 6: {
        if (tag == 48) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offline;
        break;
      }

      // optional uint32 offline = 8;
      case 8: {
        if (tag == 64) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ifauto;
        break;
      }

      // optional uint32 ifauto = 9;
      case 9: {
        if (tag == 72) {
         parse_ifauto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ifauto_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ifdouble;
        break;
      }

      // optional uint32 ifdouble = 10;
      case 10: {
        if (tag == 80) {
         parse_ifdouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ifdouble_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ifshowcard;
        break;
      }

      // optional uint32 ifshowcard = 11;
      case 11: {
        if (tag == 88) {
         parse_ifshowcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ifshowcard_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_poker;
        break;
      }

      // repeated .userinfo.Card poker = 12;
      case 12: {
        if (tag == 98) {
         parse_poker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_poker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_poker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_poker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(104)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 13;
      case 13: {
        if (tag == 104) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 14;
      case 14: {
        if (tag == 112) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 15;
      case 15: {
        if (tag == 120) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_pokerlen;
        break;
      }

      // optional uint32 pokerlen = 16;
      case 16: {
        if (tag == 128) {
         parse_pokerlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pokerlen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.DeskUserinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.DeskUserinfo)
  return false;
#undef DO_
}

void DeskUserinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.DeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coinnum(), output);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->headurl(), output);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deskid(), output);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos(), output);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offline(), output);
  }

  // optional uint32 ifauto = 9;
  if (this->ifauto() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ifauto(), output);
  }

  // optional uint32 ifdouble = 10;
  if (this->ifdouble() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ifdouble(), output);
  }

  // optional uint32 ifshowcard = 11;
  if (this->ifshowcard() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ifshowcard(), output);
  }

  // repeated .userinfo.Card poker = 12;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->poker(i), output);
  }

  // optional uint32 gender = 13;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gender(), output);
  }

  // optional uint32 integral = 14;
  if (this->integral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->integral(), output);
  }

  // optional int32 gamevalue = 15;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->gamevalue(), output);
  }

  // optional uint32 pokerlen = 16;
  if (this->pokerlen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pokerlen(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.DeskUserinfo)
}

::google::protobuf::uint8* DeskUserinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.DeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uname(), target);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coinnum(), target);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->headurl(), target);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deskid(), target);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos(), target);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->offline(), target);
  }

  // optional uint32 ifauto = 9;
  if (this->ifauto() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ifauto(), target);
  }

  // optional uint32 ifdouble = 10;
  if (this->ifdouble() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ifdouble(), target);
  }

  // optional uint32 ifshowcard = 11;
  if (this->ifshowcard() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ifshowcard(), target);
  }

  // repeated .userinfo.Card poker = 12;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->poker(i), false, target);
  }

  // optional uint32 gender = 13;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gender(), target);
  }

  // optional uint32 integral = 14;
  if (this->integral() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->integral(), target);
  }

  // optional int32 gamevalue = 15;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->gamevalue(), target);
  }

  // optional uint32 pokerlen = 16;
  if (this->pokerlen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pokerlen(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.DeskUserinfo)
  return target;
}

int DeskUserinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.DeskUserinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uname());
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coinnum());
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->headurl());
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline());
  }

  // optional uint32 ifauto = 9;
  if (this->ifauto() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ifauto());
  }

  // optional uint32 ifdouble = 10;
  if (this->ifdouble() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ifdouble());
  }

  // optional uint32 ifshowcard = 11;
  if (this->ifshowcard() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ifshowcard());
  }

  // optional uint32 gender = 13;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional uint32 integral = 14;
  if (this->integral() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->integral());
  }

  // optional int32 gamevalue = 15;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 pokerlen = 16;
  if (this->pokerlen() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pokerlen());
  }

  // repeated .userinfo.Card poker = 12;
  total_size += 1 * this->poker_size();
  for (int i = 0; i < this->poker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poker(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeskUserinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.DeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeskUserinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeskUserinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.DeskUserinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.DeskUserinfo)
    MergeFrom(*source);
  }
}

void DeskUserinfo::MergeFrom(const DeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.DeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  poker_.MergeFrom(from.poker_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.coinnum() != 0) {
    set_coinnum(from.coinnum());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.offline() != 0) {
    set_offline(from.offline());
  }
  if (from.ifauto() != 0) {
    set_ifauto(from.ifauto());
  }
  if (from.ifdouble() != 0) {
    set_ifdouble(from.ifdouble());
  }
  if (from.ifshowcard() != 0) {
    set_ifshowcard(from.ifshowcard());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.integral() != 0) {
    set_integral(from.integral());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.pokerlen() != 0) {
    set_pokerlen(from.pokerlen());
  }
}

void DeskUserinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.DeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeskUserinfo::CopyFrom(const DeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.DeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeskUserinfo::IsInitialized() const {

  return true;
}

void DeskUserinfo::Swap(DeskUserinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeskUserinfo::InternalSwap(DeskUserinfo* other) {
  std::swap(uid_, other->uid_);
  uname_.Swap(&other->uname_);
  std::swap(coinnum_, other->coinnum_);
  headurl_.Swap(&other->headurl_);
  std::swap(deskid_, other->deskid_);
  std::swap(pos_, other->pos_);
  std::swap(status_, other->status_);
  std::swap(offline_, other->offline_);
  std::swap(ifauto_, other->ifauto_);
  std::swap(ifdouble_, other->ifdouble_);
  std::swap(ifshowcard_, other->ifshowcard_);
  poker_.UnsafeArenaSwap(&other->poker_);
  std::swap(gender_, other->gender_);
  std::swap(integral_, other->integral_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(pokerlen_, other->pokerlen_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeskUserinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeskUserinfo_descriptor_;
  metadata.reflection = DeskUserinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeskUserinfo

// optional uint32 uid = 1;
void DeskUserinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.uid)
  return uid_;
}
 void DeskUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.uid)
}

// optional bytes uname = 2;
void DeskUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeskUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeskUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.uname)
}
 void DeskUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userinfo.DeskUserinfo.uname)
}
 void DeskUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userinfo.DeskUserinfo.uname)
}
 ::std::string* DeskUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:userinfo.DeskUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeskUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:userinfo.DeskUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeskUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:userinfo.DeskUserinfo.uname)
}

// optional uint32 coinnum = 3;
void DeskUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.coinnum)
  return coinnum_;
}
 void DeskUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.coinnum)
}

// optional bytes headurl = 4;
void DeskUserinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeskUserinfo::headurl() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeskUserinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.headurl)
}
 void DeskUserinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userinfo.DeskUserinfo.headurl)
}
 void DeskUserinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userinfo.DeskUserinfo.headurl)
}
 ::std::string* DeskUserinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:userinfo.DeskUserinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeskUserinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:userinfo.DeskUserinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeskUserinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:userinfo.DeskUserinfo.headurl)
}

// optional uint32 deskid = 5;
void DeskUserinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::deskid() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.deskid)
  return deskid_;
}
 void DeskUserinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.deskid)
}

// optional uint32 pos = 6;
void DeskUserinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::pos() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.pos)
  return pos_;
}
 void DeskUserinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.pos)
}

// optional uint32 status = 7;
void DeskUserinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::status() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.status)
  return status_;
}
 void DeskUserinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.status)
}

// optional uint32 offline = 8;
void DeskUserinfo::clear_offline() {
  offline_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::offline() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.offline)
  return offline_;
}
 void DeskUserinfo::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.offline)
}

// optional uint32 ifauto = 9;
void DeskUserinfo::clear_ifauto() {
  ifauto_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::ifauto() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.ifauto)
  return ifauto_;
}
 void DeskUserinfo::set_ifauto(::google::protobuf::uint32 value) {
  
  ifauto_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.ifauto)
}

// optional uint32 ifdouble = 10;
void DeskUserinfo::clear_ifdouble() {
  ifdouble_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::ifdouble() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.ifdouble)
  return ifdouble_;
}
 void DeskUserinfo::set_ifdouble(::google::protobuf::uint32 value) {
  
  ifdouble_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.ifdouble)
}

// optional uint32 ifshowcard = 11;
void DeskUserinfo::clear_ifshowcard() {
  ifshowcard_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::ifshowcard() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.ifshowcard)
  return ifshowcard_;
}
 void DeskUserinfo::set_ifshowcard(::google::protobuf::uint32 value) {
  
  ifshowcard_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.ifshowcard)
}

// repeated .userinfo.Card poker = 12;
int DeskUserinfo::poker_size() const {
  return poker_.size();
}
void DeskUserinfo::clear_poker() {
  poker_.Clear();
}
const ::userinfo::Card& DeskUserinfo::poker(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.poker)
  return poker_.Get(index);
}
::userinfo::Card* DeskUserinfo::mutable_poker(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.DeskUserinfo.poker)
  return poker_.Mutable(index);
}
::userinfo::Card* DeskUserinfo::add_poker() {
  // @@protoc_insertion_point(field_add:userinfo.DeskUserinfo.poker)
  return poker_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::Card >*
DeskUserinfo::mutable_poker() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.DeskUserinfo.poker)
  return &poker_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::Card >&
DeskUserinfo::poker() const {
  // @@protoc_insertion_point(field_list:userinfo.DeskUserinfo.poker)
  return poker_;
}

// optional uint32 gender = 13;
void DeskUserinfo::clear_gender() {
  gender_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.gender)
  return gender_;
}
 void DeskUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.gender)
}

// optional uint32 integral = 14;
void DeskUserinfo::clear_integral() {
  integral_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::integral() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.integral)
  return integral_;
}
 void DeskUserinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.integral)
}

// optional int32 gamevalue = 15;
void DeskUserinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 DeskUserinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.gamevalue)
  return gamevalue_;
}
 void DeskUserinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.gamevalue)
}

// optional uint32 pokerlen = 16;
void DeskUserinfo::clear_pokerlen() {
  pokerlen_ = 0u;
}
 ::google::protobuf::uint32 DeskUserinfo::pokerlen() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskUserinfo.pokerlen)
  return pokerlen_;
}
 void DeskUserinfo::set_pokerlen(::google::protobuf::uint32 value) {
  
  pokerlen_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskUserinfo.pokerlen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DdzDeskinfo::kDeskidFieldNumber;
const int DdzDeskinfo::kStatusFieldNumber;
const int DdzDeskinfo::kCurposFieldNumber;
const int DdzDeskinfo::kPointFieldNumber;
const int DdzDeskinfo::kBombnumFieldNumber;
const int DdzDeskinfo::kLastpokerFieldNumber;
const int DdzDeskinfo::kPutpokerFieldNumber;
const int DdzDeskinfo::kUserlistFieldNumber;
const int DdzDeskinfo::kPubpokerFieldNumber;
const int DdzDeskinfo::kMatchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DdzDeskinfo::DdzDeskinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.DdzDeskinfo)
}

void DdzDeskinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DdzDeskinfo::DdzDeskinfo(const DdzDeskinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.DdzDeskinfo)
}

void DdzDeskinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  deskid_ = 0u;
  status_ = 0u;
  curpos_ = 0u;
  point_ = 0u;
  bombnum_ = 0u;
  matchid_ = 0u;
}

DdzDeskinfo::~DdzDeskinfo() {
  // @@protoc_insertion_point(destructor:userinfo.DdzDeskinfo)
  SharedDtor();
}

void DdzDeskinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DdzDeskinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DdzDeskinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DdzDeskinfo_descriptor_;
}

const DdzDeskinfo& DdzDeskinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

DdzDeskinfo* DdzDeskinfo::default_instance_ = NULL;

DdzDeskinfo* DdzDeskinfo::New(::google::protobuf::Arena* arena) const {
  DdzDeskinfo* n = new DdzDeskinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DdzDeskinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.DdzDeskinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DdzDeskinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DdzDeskinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deskid_, point_);
  bombnum_ = 0u;
  matchid_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  lastpoker_.Clear();
  putpoker_.Clear();
  userlist_.Clear();
  pubpoker_.Clear();
}

bool DdzDeskinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.DdzDeskinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curpos;
        break;
      }

      // optional uint32 curpos = 3;
      case 3: {
        if (tag == 24) {
         parse_curpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_point;
        break;
      }

      // optional uint32 point = 4;
      case 4: {
        if (tag == 32) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bombnum;
        break;
      }

      // optional uint32 bombnum = 5;
      case 5: {
        if (tag == 40) {
         parse_bombnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bombnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lastpoker;
        break;
      }

      // repeated .userinfo.Card lastpoker = 6;
      case 6: {
        if (tag == 50) {
         parse_lastpoker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lastpoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lastpoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_lastpoker;
        if (input->ExpectTag(58)) goto parse_loop_putpoker;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .userinfo.Card putpoker = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_putpoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_putpoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_putpoker;
        if (input->ExpectTag(66)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .userinfo.DeskUserinfo userlist = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_userlist;
        if (input->ExpectTag(74)) goto parse_loop_pubpoker;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .userinfo.Card pubpoker = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pubpoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pubpoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_pubpoker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_matchid;
        break;
      }

      // optional uint32 matchid = 10;
      case 10: {
        if (tag == 80) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.DdzDeskinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.DdzDeskinfo)
  return false;
#undef DO_
}

void DdzDeskinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.DdzDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deskid(), output);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpos(), output);
  }

  // optional uint32 point = 4;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->point(), output);
  }

  // optional uint32 bombnum = 5;
  if (this->bombnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bombnum(), output);
  }

  // repeated .userinfo.Card lastpoker = 6;
  for (unsigned int i = 0, n = this->lastpoker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lastpoker(i), output);
  }

  // repeated .userinfo.Card putpoker = 7;
  for (unsigned int i = 0, n = this->putpoker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->putpoker(i), output);
  }

  // repeated .userinfo.DeskUserinfo userlist = 8;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->userlist(i), output);
  }

  // repeated .userinfo.Card pubpoker = 9;
  for (unsigned int i = 0, n = this->pubpoker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pubpoker(i), output);
  }

  // optional uint32 matchid = 10;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->matchid(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.DdzDeskinfo)
}

::google::protobuf::uint8* DdzDeskinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.DdzDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deskid(), target);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpos(), target);
  }

  // optional uint32 point = 4;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->point(), target);
  }

  // optional uint32 bombnum = 5;
  if (this->bombnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bombnum(), target);
  }

  // repeated .userinfo.Card lastpoker = 6;
  for (unsigned int i = 0, n = this->lastpoker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->lastpoker(i), false, target);
  }

  // repeated .userinfo.Card putpoker = 7;
  for (unsigned int i = 0, n = this->putpoker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->putpoker(i), false, target);
  }

  // repeated .userinfo.DeskUserinfo userlist = 8;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->userlist(i), false, target);
  }

  // repeated .userinfo.Card pubpoker = 9;
  for (unsigned int i = 0, n = this->pubpoker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->pubpoker(i), false, target);
  }

  // optional uint32 matchid = 10;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->matchid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.DdzDeskinfo)
  return target;
}

int DdzDeskinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.DdzDeskinfo)
  int total_size = 0;

  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curpos());
  }

  // optional uint32 point = 4;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point());
  }

  // optional uint32 bombnum = 5;
  if (this->bombnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bombnum());
  }

  // optional uint32 matchid = 10;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // repeated .userinfo.Card lastpoker = 6;
  total_size += 1 * this->lastpoker_size();
  for (int i = 0; i < this->lastpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lastpoker(i));
  }

  // repeated .userinfo.Card putpoker = 7;
  total_size += 1 * this->putpoker_size();
  for (int i = 0; i < this->putpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->putpoker(i));
  }

  // repeated .userinfo.DeskUserinfo userlist = 8;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  // repeated .userinfo.Card pubpoker = 9;
  total_size += 1 * this->pubpoker_size();
  for (int i = 0; i < this->pubpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pubpoker(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DdzDeskinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.DdzDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DdzDeskinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DdzDeskinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.DdzDeskinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.DdzDeskinfo)
    MergeFrom(*source);
  }
}

void DdzDeskinfo::MergeFrom(const DdzDeskinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.DdzDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lastpoker_.MergeFrom(from.lastpoker_);
  putpoker_.MergeFrom(from.putpoker_);
  userlist_.MergeFrom(from.userlist_);
  pubpoker_.MergeFrom(from.pubpoker_);
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.curpos() != 0) {
    set_curpos(from.curpos());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.bombnum() != 0) {
    set_bombnum(from.bombnum());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void DdzDeskinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.DdzDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdzDeskinfo::CopyFrom(const DdzDeskinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.DdzDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdzDeskinfo::IsInitialized() const {

  return true;
}

void DdzDeskinfo::Swap(DdzDeskinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DdzDeskinfo::InternalSwap(DdzDeskinfo* other) {
  std::swap(deskid_, other->deskid_);
  std::swap(status_, other->status_);
  std::swap(curpos_, other->curpos_);
  std::swap(point_, other->point_);
  std::swap(bombnum_, other->bombnum_);
  lastpoker_.UnsafeArenaSwap(&other->lastpoker_);
  putpoker_.UnsafeArenaSwap(&other->putpoker_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  pubpoker_.UnsafeArenaSwap(&other->pubpoker_);
  std::swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DdzDeskinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DdzDeskinfo_descriptor_;
  metadata.reflection = DdzDeskinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DdzDeskinfo

// optional uint32 deskid = 1;
void DdzDeskinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskinfo::deskid() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.deskid)
  return deskid_;
}
 void DdzDeskinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskinfo.deskid)
}

// optional uint32 status = 2;
void DdzDeskinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskinfo::status() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.status)
  return status_;
}
 void DdzDeskinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskinfo.status)
}

// optional uint32 curpos = 3;
void DdzDeskinfo::clear_curpos() {
  curpos_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskinfo::curpos() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.curpos)
  return curpos_;
}
 void DdzDeskinfo::set_curpos(::google::protobuf::uint32 value) {
  
  curpos_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskinfo.curpos)
}

// optional uint32 point = 4;
void DdzDeskinfo::clear_point() {
  point_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskinfo::point() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.point)
  return point_;
}
 void DdzDeskinfo::set_point(::google::protobuf::uint32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskinfo.point)
}

// optional uint32 bombnum = 5;
void DdzDeskinfo::clear_bombnum() {
  bombnum_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskinfo::bombnum() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.bombnum)
  return bombnum_;
}
 void DdzDeskinfo::set_bombnum(::google::protobuf::uint32 value) {
  
  bombnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskinfo.bombnum)
}

// repeated .userinfo.Card lastpoker = 6;
int DdzDeskinfo::lastpoker_size() const {
  return lastpoker_.size();
}
void DdzDeskinfo::clear_lastpoker() {
  lastpoker_.Clear();
}
const ::userinfo::Card& DdzDeskinfo::lastpoker(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.lastpoker)
  return lastpoker_.Get(index);
}
::userinfo::Card* DdzDeskinfo::mutable_lastpoker(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.DdzDeskinfo.lastpoker)
  return lastpoker_.Mutable(index);
}
::userinfo::Card* DdzDeskinfo::add_lastpoker() {
  // @@protoc_insertion_point(field_add:userinfo.DdzDeskinfo.lastpoker)
  return lastpoker_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::Card >*
DdzDeskinfo::mutable_lastpoker() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.DdzDeskinfo.lastpoker)
  return &lastpoker_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::Card >&
DdzDeskinfo::lastpoker() const {
  // @@protoc_insertion_point(field_list:userinfo.DdzDeskinfo.lastpoker)
  return lastpoker_;
}

// repeated .userinfo.Card putpoker = 7;
int DdzDeskinfo::putpoker_size() const {
  return putpoker_.size();
}
void DdzDeskinfo::clear_putpoker() {
  putpoker_.Clear();
}
const ::userinfo::Card& DdzDeskinfo::putpoker(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.putpoker)
  return putpoker_.Get(index);
}
::userinfo::Card* DdzDeskinfo::mutable_putpoker(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.DdzDeskinfo.putpoker)
  return putpoker_.Mutable(index);
}
::userinfo::Card* DdzDeskinfo::add_putpoker() {
  // @@protoc_insertion_point(field_add:userinfo.DdzDeskinfo.putpoker)
  return putpoker_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::Card >*
DdzDeskinfo::mutable_putpoker() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.DdzDeskinfo.putpoker)
  return &putpoker_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::Card >&
DdzDeskinfo::putpoker() const {
  // @@protoc_insertion_point(field_list:userinfo.DdzDeskinfo.putpoker)
  return putpoker_;
}

// repeated .userinfo.DeskUserinfo userlist = 8;
int DdzDeskinfo::userlist_size() const {
  return userlist_.size();
}
void DdzDeskinfo::clear_userlist() {
  userlist_.Clear();
}
const ::userinfo::DeskUserinfo& DdzDeskinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.userlist)
  return userlist_.Get(index);
}
::userinfo::DeskUserinfo* DdzDeskinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.DdzDeskinfo.userlist)
  return userlist_.Mutable(index);
}
::userinfo::DeskUserinfo* DdzDeskinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:userinfo.DdzDeskinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::DeskUserinfo >*
DdzDeskinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.DdzDeskinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::DeskUserinfo >&
DdzDeskinfo::userlist() const {
  // @@protoc_insertion_point(field_list:userinfo.DdzDeskinfo.userlist)
  return userlist_;
}

// repeated .userinfo.Card pubpoker = 9;
int DdzDeskinfo::pubpoker_size() const {
  return pubpoker_.size();
}
void DdzDeskinfo::clear_pubpoker() {
  pubpoker_.Clear();
}
const ::userinfo::Card& DdzDeskinfo::pubpoker(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.pubpoker)
  return pubpoker_.Get(index);
}
::userinfo::Card* DdzDeskinfo::mutable_pubpoker(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.DdzDeskinfo.pubpoker)
  return pubpoker_.Mutable(index);
}
::userinfo::Card* DdzDeskinfo::add_pubpoker() {
  // @@protoc_insertion_point(field_add:userinfo.DdzDeskinfo.pubpoker)
  return pubpoker_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::Card >*
DdzDeskinfo::mutable_pubpoker() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.DdzDeskinfo.pubpoker)
  return &pubpoker_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::Card >&
DdzDeskinfo::pubpoker() const {
  // @@protoc_insertion_point(field_list:userinfo.DdzDeskinfo.pubpoker)
  return pubpoker_;
}

// optional uint32 matchid = 10;
void DdzDeskinfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskinfo::matchid() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskinfo.matchid)
  return matchid_;
}
 void DdzDeskinfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskinfo.matchid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DdzDeskResultinfo::kStatusFieldNumber;
const int DdzDeskResultinfo::kPointFieldNumber;
const int DdzDeskResultinfo::kBombnumFieldNumber;
const int DdzDeskResultinfo::kIfspringFieldNumber;
const int DdzDeskResultinfo::kUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DdzDeskResultinfo::DdzDeskResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.DdzDeskResultinfo)
}

void DdzDeskResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DdzDeskResultinfo::DdzDeskResultinfo(const DdzDeskResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.DdzDeskResultinfo)
}

void DdzDeskResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0u;
  point_ = 0u;
  bombnum_ = 0u;
  ifspring_ = 0u;
}

DdzDeskResultinfo::~DdzDeskResultinfo() {
  // @@protoc_insertion_point(destructor:userinfo.DdzDeskResultinfo)
  SharedDtor();
}

void DdzDeskResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DdzDeskResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DdzDeskResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DdzDeskResultinfo_descriptor_;
}

const DdzDeskResultinfo& DdzDeskResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

DdzDeskResultinfo* DdzDeskResultinfo::default_instance_ = NULL;

DdzDeskResultinfo* DdzDeskResultinfo::New(::google::protobuf::Arena* arena) const {
  DdzDeskResultinfo* n = new DdzDeskResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DdzDeskResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.DdzDeskResultinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DdzDeskResultinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DdzDeskResultinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, ifspring_);

#undef ZR_HELPER_
#undef ZR_

  userlist_.Clear();
}

bool DdzDeskResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.DdzDeskResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // optional uint32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bombnum;
        break;
      }

      // optional uint32 bombnum = 3;
      case 3: {
        if (tag == 24) {
         parse_bombnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bombnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ifspring;
        break;
      }

      // optional uint32 ifspring = 4;
      case 4: {
        if (tag == 32) {
         parse_ifspring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ifspring_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userlist;
        break;
      }

      // repeated .userinfo.DdzUserResultinfo userlist = 5;
      case 5: {
        if (tag == 42) {
         parse_userlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.DdzDeskResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.DdzDeskResultinfo)
  return false;
#undef DO_
}

void DdzDeskResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.DdzDeskResultinfo)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 point = 2;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }

  // optional uint32 bombnum = 3;
  if (this->bombnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bombnum(), output);
  }

  // optional uint32 ifspring = 4;
  if (this->ifspring() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ifspring(), output);
  }

  // repeated .userinfo.DdzUserResultinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.DdzDeskResultinfo)
}

::google::protobuf::uint8* DdzDeskResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.DdzDeskResultinfo)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 point = 2;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }

  // optional uint32 bombnum = 3;
  if (this->bombnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bombnum(), target);
  }

  // optional uint32 ifspring = 4;
  if (this->ifspring() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ifspring(), target);
  }

  // repeated .userinfo.DdzUserResultinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->userlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.DdzDeskResultinfo)
  return target;
}

int DdzDeskResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.DdzDeskResultinfo)
  int total_size = 0;

  // optional uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 point = 2;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point());
  }

  // optional uint32 bombnum = 3;
  if (this->bombnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bombnum());
  }

  // optional uint32 ifspring = 4;
  if (this->ifspring() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ifspring());
  }

  // repeated .userinfo.DdzUserResultinfo userlist = 5;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DdzDeskResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.DdzDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DdzDeskResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DdzDeskResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.DdzDeskResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.DdzDeskResultinfo)
    MergeFrom(*source);
  }
}

void DdzDeskResultinfo::MergeFrom(const DdzDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.DdzDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.bombnum() != 0) {
    set_bombnum(from.bombnum());
  }
  if (from.ifspring() != 0) {
    set_ifspring(from.ifspring());
  }
}

void DdzDeskResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.DdzDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdzDeskResultinfo::CopyFrom(const DdzDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.DdzDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdzDeskResultinfo::IsInitialized() const {

  return true;
}

void DdzDeskResultinfo::Swap(DdzDeskResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DdzDeskResultinfo::InternalSwap(DdzDeskResultinfo* other) {
  std::swap(status_, other->status_);
  std::swap(point_, other->point_);
  std::swap(bombnum_, other->bombnum_);
  std::swap(ifspring_, other->ifspring_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DdzDeskResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DdzDeskResultinfo_descriptor_;
  metadata.reflection = DdzDeskResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DdzDeskResultinfo

// optional uint32 status = 1;
void DdzDeskResultinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskResultinfo::status() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskResultinfo.status)
  return status_;
}
 void DdzDeskResultinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskResultinfo.status)
}

// optional uint32 point = 2;
void DdzDeskResultinfo::clear_point() {
  point_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskResultinfo::point() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskResultinfo.point)
  return point_;
}
 void DdzDeskResultinfo::set_point(::google::protobuf::uint32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskResultinfo.point)
}

// optional uint32 bombnum = 3;
void DdzDeskResultinfo::clear_bombnum() {
  bombnum_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskResultinfo::bombnum() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskResultinfo.bombnum)
  return bombnum_;
}
 void DdzDeskResultinfo::set_bombnum(::google::protobuf::uint32 value) {
  
  bombnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskResultinfo.bombnum)
}

// optional uint32 ifspring = 4;
void DdzDeskResultinfo::clear_ifspring() {
  ifspring_ = 0u;
}
 ::google::protobuf::uint32 DdzDeskResultinfo::ifspring() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskResultinfo.ifspring)
  return ifspring_;
}
 void DdzDeskResultinfo::set_ifspring(::google::protobuf::uint32 value) {
  
  ifspring_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzDeskResultinfo.ifspring)
}

// repeated .userinfo.DdzUserResultinfo userlist = 5;
int DdzDeskResultinfo::userlist_size() const {
  return userlist_.size();
}
void DdzDeskResultinfo::clear_userlist() {
  userlist_.Clear();
}
const ::userinfo::DdzUserResultinfo& DdzDeskResultinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.DdzDeskResultinfo.userlist)
  return userlist_.Get(index);
}
::userinfo::DdzUserResultinfo* DdzDeskResultinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.DdzDeskResultinfo.userlist)
  return userlist_.Mutable(index);
}
::userinfo::DdzUserResultinfo* DdzDeskResultinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:userinfo.DdzDeskResultinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::DdzUserResultinfo >*
DdzDeskResultinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.DdzDeskResultinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::DdzUserResultinfo >&
DdzDeskResultinfo::userlist() const {
  // @@protoc_insertion_point(field_list:userinfo.DdzDeskResultinfo.userlist)
  return userlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DdzUserResultinfo::kUidFieldNumber;
const int DdzUserResultinfo::kPosFieldNumber;
const int DdzUserResultinfo::kPointFieldNumber;
const int DdzUserResultinfo::kResultFieldNumber;
const int DdzUserResultinfo::kValueFieldNumber;
const int DdzUserResultinfo::kCoinFieldNumber;
const int DdzUserResultinfo::kGamevalueFieldNumber;
const int DdzUserResultinfo::kRankFieldNumber;
const int DdzUserResultinfo::kLeftvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DdzUserResultinfo::DdzUserResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.DdzUserResultinfo)
}

void DdzUserResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DdzUserResultinfo::DdzUserResultinfo(const DdzUserResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.DdzUserResultinfo)
}

void DdzUserResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0u;
  pos_ = 0u;
  point_ = 0u;
  result_ = 0u;
  value_ = 0u;
  coin_ = 0u;
  gamevalue_ = 0;
  rank_ = 0u;
  leftvalue_ = 0u;
}

DdzUserResultinfo::~DdzUserResultinfo() {
  // @@protoc_insertion_point(destructor:userinfo.DdzUserResultinfo)
  SharedDtor();
}

void DdzUserResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DdzUserResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DdzUserResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DdzUserResultinfo_descriptor_;
}

const DdzUserResultinfo& DdzUserResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

DdzUserResultinfo* DdzUserResultinfo::default_instance_ = NULL;

DdzUserResultinfo* DdzUserResultinfo::New(::google::protobuf::Arena* arena) const {
  DdzUserResultinfo* n = new DdzUserResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DdzUserResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.DdzUserResultinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DdzUserResultinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DdzUserResultinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, rank_);
  leftvalue_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool DdzUserResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.DdzUserResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // optional uint32 point = 3;
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional uint32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional uint32 value = 5;
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 6;
      case 6: {
        if (tag == 48) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 7;
      case 7: {
        if (tag == 56) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 8;
      case 8: {
        if (tag == 64) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_leftvalue;
        break;
      }

      // optional uint32 leftvalue = 9;
      case 9: {
        if (tag == 72) {
         parse_leftvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftvalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.DdzUserResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.DdzUserResultinfo)
  return false;
#undef DO_
}

void DdzUserResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.DdzUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 point = 3;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->point(), output);
  }

  // optional uint32 result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  // optional uint32 value = 5;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value(), output);
  }

  // optional uint32 coin = 6;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->coin(), output);
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gamevalue(), output);
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rank(), output);
  }

  // optional uint32 leftvalue = 9;
  if (this->leftvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->leftvalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.DdzUserResultinfo)
}

::google::protobuf::uint8* DdzUserResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.DdzUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 point = 3;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->point(), target);
  }

  // optional uint32 result = 4;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result(), target);
  }

  // optional uint32 value = 5;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value(), target);
  }

  // optional uint32 coin = 6;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->coin(), target);
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gamevalue(), target);
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rank(), target);
  }

  // optional uint32 leftvalue = 9;
  if (this->leftvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->leftvalue(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.DdzUserResultinfo)
  return target;
}

int DdzUserResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.DdzUserResultinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 point = 3;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point());
  }

  // optional uint32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional uint32 value = 5;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // optional uint32 coin = 6;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // optional uint32 leftvalue = 9;
  if (this->leftvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftvalue());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DdzUserResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.DdzUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DdzUserResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DdzUserResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.DdzUserResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.DdzUserResultinfo)
    MergeFrom(*source);
  }
}

void DdzUserResultinfo::MergeFrom(const DdzUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.DdzUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.leftvalue() != 0) {
    set_leftvalue(from.leftvalue());
  }
}

void DdzUserResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.DdzUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdzUserResultinfo::CopyFrom(const DdzUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.DdzUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdzUserResultinfo::IsInitialized() const {

  return true;
}

void DdzUserResultinfo::Swap(DdzUserResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DdzUserResultinfo::InternalSwap(DdzUserResultinfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(pos_, other->pos_);
  std::swap(point_, other->point_);
  std::swap(result_, other->result_);
  std::swap(value_, other->value_);
  std::swap(coin_, other->coin_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(rank_, other->rank_);
  std::swap(leftvalue_, other->leftvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DdzUserResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DdzUserResultinfo_descriptor_;
  metadata.reflection = DdzUserResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DdzUserResultinfo

// optional uint32 uid = 1;
void DdzUserResultinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 DdzUserResultinfo::uid() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzUserResultinfo.uid)
  return uid_;
}
 void DdzUserResultinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzUserResultinfo.uid)
}

// optional uint32 pos = 2;
void DdzUserResultinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 DdzUserResultinfo::pos() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzUserResultinfo.pos)
  return pos_;
}
 void DdzUserResultinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzUserResultinfo.pos)
}

// optional uint32 point = 3;
void DdzUserResultinfo::clear_point() {
  point_ = 0u;
}
 ::google::protobuf::uint32 DdzUserResultinfo::point() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzUserResultinfo.point)
  return point_;
}
 void DdzUserResultinfo::set_point(::google::protobuf::uint32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzUserResultinfo.point)
}

// optional uint32 result = 4;
void DdzUserResultinfo::clear_result() {
  result_ = 0u;
}
 ::google::protobuf::uint32 DdzUserResultinfo::result() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzUserResultinfo.result)
  return result_;
}
 void DdzUserResultinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzUserResultinfo.result)
}

// optional uint32 value = 5;
void DdzUserResultinfo::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 DdzUserResultinfo::value() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzUserResultinfo.value)
  return value_;
}
 void DdzUserResultinfo::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzUserResultinfo.value)
}

// optional uint32 coin = 6;
void DdzUserResultinfo::clear_coin() {
  coin_ = 0u;
}
 ::google::protobuf::uint32 DdzUserResultinfo::coin() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzUserResultinfo.coin)
  return coin_;
}
 void DdzUserResultinfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzUserResultinfo.coin)
}

// optional int32 gamevalue = 7;
void DdzUserResultinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 DdzUserResultinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzUserResultinfo.gamevalue)
  return gamevalue_;
}
 void DdzUserResultinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzUserResultinfo.gamevalue)
}

// optional uint32 rank = 8;
void DdzUserResultinfo::clear_rank() {
  rank_ = 0u;
}
 ::google::protobuf::uint32 DdzUserResultinfo::rank() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzUserResultinfo.rank)
  return rank_;
}
 void DdzUserResultinfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzUserResultinfo.rank)
}

// optional uint32 leftvalue = 9;
void DdzUserResultinfo::clear_leftvalue() {
  leftvalue_ = 0u;
}
 ::google::protobuf::uint32 DdzUserResultinfo::leftvalue() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzUserResultinfo.leftvalue)
  return leftvalue_;
}
 void DdzUserResultinfo::set_leftvalue(::google::protobuf::uint32 value) {
  
  leftvalue_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzUserResultinfo.leftvalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DdzMatchInfo::kMatchidFieldNumber;
const int DdzMatchInfo::kTrunindexFieldNumber;
const int DdzMatchInfo::kCurnumFieldNumber;
const int DdzMatchInfo::kGamevalueFieldNumber;
const int DdzMatchInfo::kIfmatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DdzMatchInfo::DdzMatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.DdzMatchInfo)
}

void DdzMatchInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DdzMatchInfo::DdzMatchInfo(const DdzMatchInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.DdzMatchInfo)
}

void DdzMatchInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  matchid_ = 0u;
  trunindex_ = 0u;
  curnum_ = 0u;
  gamevalue_ = 0;
  ifmatch_ = 0;
}

DdzMatchInfo::~DdzMatchInfo() {
  // @@protoc_insertion_point(destructor:userinfo.DdzMatchInfo)
  SharedDtor();
}

void DdzMatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DdzMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DdzMatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DdzMatchInfo_descriptor_;
}

const DdzMatchInfo& DdzMatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

DdzMatchInfo* DdzMatchInfo::default_instance_ = NULL;

DdzMatchInfo* DdzMatchInfo::New(::google::protobuf::Arena* arena) const {
  DdzMatchInfo* n = new DdzMatchInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DdzMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.DdzMatchInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DdzMatchInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DdzMatchInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(matchid_, ifmatch_);

#undef ZR_HELPER_
#undef ZR_

}

bool DdzMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.DdzMatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matchid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trunindex;
        break;
      }

      // optional uint32 trunindex = 2;
      case 2: {
        if (tag == 16) {
         parse_trunindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trunindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curnum;
        break;
      }

      // optional uint32 curnum = 3;
      case 3: {
        if (tag == 24) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 4;
      case 4: {
        if (tag == 32) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ifmatch;
        break;
      }

      // optional int32 ifmatch = 5;
      case 5: {
        if (tag == 40) {
         parse_ifmatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifmatch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.DdzMatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.DdzMatchInfo)
  return false;
#undef DO_
}

void DdzMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.DdzMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trunindex(), output);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curnum(), output);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gamevalue(), output);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifmatch(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.DdzMatchInfo)
}

::google::protobuf::uint8* DdzMatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.DdzMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trunindex(), target);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curnum(), target);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gamevalue(), target);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifmatch(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.DdzMatchInfo)
  return target;
}

int DdzMatchInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.DdzMatchInfo)
  int total_size = 0;

  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trunindex());
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curnum());
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ifmatch());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DdzMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.DdzMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DdzMatchInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DdzMatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.DdzMatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.DdzMatchInfo)
    MergeFrom(*source);
  }
}

void DdzMatchInfo::MergeFrom(const DdzMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.DdzMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.trunindex() != 0) {
    set_trunindex(from.trunindex());
  }
  if (from.curnum() != 0) {
    set_curnum(from.curnum());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.ifmatch() != 0) {
    set_ifmatch(from.ifmatch());
  }
}

void DdzMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.DdzMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdzMatchInfo::CopyFrom(const DdzMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.DdzMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdzMatchInfo::IsInitialized() const {

  return true;
}

void DdzMatchInfo::Swap(DdzMatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DdzMatchInfo::InternalSwap(DdzMatchInfo* other) {
  std::swap(matchid_, other->matchid_);
  std::swap(trunindex_, other->trunindex_);
  std::swap(curnum_, other->curnum_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(ifmatch_, other->ifmatch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DdzMatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DdzMatchInfo_descriptor_;
  metadata.reflection = DdzMatchInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DdzMatchInfo

// optional uint32 matchid = 1;
void DdzMatchInfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 DdzMatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzMatchInfo.matchid)
  return matchid_;
}
 void DdzMatchInfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzMatchInfo.matchid)
}

// optional uint32 trunindex = 2;
void DdzMatchInfo::clear_trunindex() {
  trunindex_ = 0u;
}
 ::google::protobuf::uint32 DdzMatchInfo::trunindex() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzMatchInfo.trunindex)
  return trunindex_;
}
 void DdzMatchInfo::set_trunindex(::google::protobuf::uint32 value) {
  
  trunindex_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzMatchInfo.trunindex)
}

// optional uint32 curnum = 3;
void DdzMatchInfo::clear_curnum() {
  curnum_ = 0u;
}
 ::google::protobuf::uint32 DdzMatchInfo::curnum() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzMatchInfo.curnum)
  return curnum_;
}
 void DdzMatchInfo::set_curnum(::google::protobuf::uint32 value) {
  
  curnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzMatchInfo.curnum)
}

// optional int32 gamevalue = 4;
void DdzMatchInfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 DdzMatchInfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzMatchInfo.gamevalue)
  return gamevalue_;
}
 void DdzMatchInfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzMatchInfo.gamevalue)
}

// optional int32 ifmatch = 5;
void DdzMatchInfo::clear_ifmatch() {
  ifmatch_ = 0;
}
 ::google::protobuf::int32 DdzMatchInfo::ifmatch() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzMatchInfo.ifmatch)
  return ifmatch_;
}
 void DdzMatchInfo::set_ifmatch(::google::protobuf::int32 value) {
  
  ifmatch_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzMatchInfo.ifmatch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DdzSelfRoomInfo::kRoomidFieldNumber;
const int DdzSelfRoomInfo::kRoomcodeFieldNumber;
const int DdzSelfRoomInfo::kEndtimeFieldNumber;
const int DdzSelfRoomInfo::kCreateuidFieldNumber;
const int DdzSelfRoomInfo::kBasecoinFieldNumber;
const int DdzSelfRoomInfo::kBasetimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DdzSelfRoomInfo::DdzSelfRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.DdzSelfRoomInfo)
}

void DdzSelfRoomInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DdzSelfRoomInfo::DdzSelfRoomInfo(const DdzSelfRoomInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.DdzSelfRoomInfo)
}

void DdzSelfRoomInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0u;
  roomcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = 0u;
  createuid_ = 0u;
  basecoin_ = 0u;
  basetimes_ = 0u;
}

DdzSelfRoomInfo::~DdzSelfRoomInfo() {
  // @@protoc_insertion_point(destructor:userinfo.DdzSelfRoomInfo)
  SharedDtor();
}

void DdzSelfRoomInfo::SharedDtor() {
  roomcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DdzSelfRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DdzSelfRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DdzSelfRoomInfo_descriptor_;
}

const DdzSelfRoomInfo& DdzSelfRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

DdzSelfRoomInfo* DdzSelfRoomInfo::default_instance_ = NULL;

DdzSelfRoomInfo* DdzSelfRoomInfo::New(::google::protobuf::Arena* arena) const {
  DdzSelfRoomInfo* n = new DdzSelfRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DdzSelfRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.DdzSelfRoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DdzSelfRoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DdzSelfRoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roomid_, basetimes_);
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DdzSelfRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.DdzSelfRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roomid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomcode;
        break;
      }

      // optional bytes roomcode = 2;
      case 2: {
        if (tag == 18) {
         parse_roomcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createuid;
        break;
      }

      // optional uint32 createuid = 4;
      case 4: {
        if (tag == 32) {
         parse_createuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createuid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basecoin;
        break;
      }

      // optional uint32 basecoin = 5;
      case 5: {
        if (tag == 40) {
         parse_basecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basecoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_basetimes;
        break;
      }

      // optional uint32 basetimes = 6;
      case 6: {
        if (tag == 48) {
         parse_basetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basetimes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.DdzSelfRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.DdzSelfRoomInfo)
  return false;
#undef DO_
}

void DdzSelfRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.DdzSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomcode(), output);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createuid(), output);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->basecoin(), output);
  }

  // optional uint32 basetimes = 6;
  if (this->basetimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->basetimes(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.DdzSelfRoomInfo)
}

::google::protobuf::uint8* DdzSelfRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.DdzSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomcode(), target);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createuid(), target);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->basecoin(), target);
  }

  // optional uint32 basetimes = 6;
  if (this->basetimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->basetimes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.DdzSelfRoomInfo)
  return target;
}

int DdzSelfRoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.DdzSelfRoomInfo)
  int total_size = 0;

  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomcode());
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endtime());
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createuid());
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->basecoin());
  }

  // optional uint32 basetimes = 6;
  if (this->basetimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->basetimes());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DdzSelfRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.DdzSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DdzSelfRoomInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DdzSelfRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.DdzSelfRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.DdzSelfRoomInfo)
    MergeFrom(*source);
  }
}

void DdzSelfRoomInfo::MergeFrom(const DdzSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.DdzSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.roomcode().size() > 0) {

    roomcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomcode_);
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.createuid() != 0) {
    set_createuid(from.createuid());
  }
  if (from.basecoin() != 0) {
    set_basecoin(from.basecoin());
  }
  if (from.basetimes() != 0) {
    set_basetimes(from.basetimes());
  }
}

void DdzSelfRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.DdzSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdzSelfRoomInfo::CopyFrom(const DdzSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.DdzSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdzSelfRoomInfo::IsInitialized() const {

  return true;
}

void DdzSelfRoomInfo::Swap(DdzSelfRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DdzSelfRoomInfo::InternalSwap(DdzSelfRoomInfo* other) {
  std::swap(roomid_, other->roomid_);
  roomcode_.Swap(&other->roomcode_);
  std::swap(endtime_, other->endtime_);
  std::swap(createuid_, other->createuid_);
  std::swap(basecoin_, other->basecoin_);
  std::swap(basetimes_, other->basetimes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DdzSelfRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DdzSelfRoomInfo_descriptor_;
  metadata.reflection = DdzSelfRoomInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DdzSelfRoomInfo

// optional uint32 roomid = 1;
void DdzSelfRoomInfo::clear_roomid() {
  roomid_ = 0u;
}
 ::google::protobuf::uint32 DdzSelfRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzSelfRoomInfo.roomid)
  return roomid_;
}
 void DdzSelfRoomInfo::set_roomid(::google::protobuf::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzSelfRoomInfo.roomid)
}

// optional bytes roomcode = 2;
void DdzSelfRoomInfo::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DdzSelfRoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzSelfRoomInfo.roomcode)
  return roomcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DdzSelfRoomInfo::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userinfo.DdzSelfRoomInfo.roomcode)
}
 void DdzSelfRoomInfo::set_roomcode(const char* value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userinfo.DdzSelfRoomInfo.roomcode)
}
 void DdzSelfRoomInfo::set_roomcode(const void* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userinfo.DdzSelfRoomInfo.roomcode)
}
 ::std::string* DdzSelfRoomInfo::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:userinfo.DdzSelfRoomInfo.roomcode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DdzSelfRoomInfo::release_roomcode() {
  // @@protoc_insertion_point(field_release:userinfo.DdzSelfRoomInfo.roomcode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DdzSelfRoomInfo::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:userinfo.DdzSelfRoomInfo.roomcode)
}

// optional uint32 endtime = 3;
void DdzSelfRoomInfo::clear_endtime() {
  endtime_ = 0u;
}
 ::google::protobuf::uint32 DdzSelfRoomInfo::endtime() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzSelfRoomInfo.endtime)
  return endtime_;
}
 void DdzSelfRoomInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzSelfRoomInfo.endtime)
}

// optional uint32 createuid = 4;
void DdzSelfRoomInfo::clear_createuid() {
  createuid_ = 0u;
}
 ::google::protobuf::uint32 DdzSelfRoomInfo::createuid() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzSelfRoomInfo.createuid)
  return createuid_;
}
 void DdzSelfRoomInfo::set_createuid(::google::protobuf::uint32 value) {
  
  createuid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzSelfRoomInfo.createuid)
}

// optional uint32 basecoin = 5;
void DdzSelfRoomInfo::clear_basecoin() {
  basecoin_ = 0u;
}
 ::google::protobuf::uint32 DdzSelfRoomInfo::basecoin() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzSelfRoomInfo.basecoin)
  return basecoin_;
}
 void DdzSelfRoomInfo::set_basecoin(::google::protobuf::uint32 value) {
  
  basecoin_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzSelfRoomInfo.basecoin)
}

// optional uint32 basetimes = 6;
void DdzSelfRoomInfo::clear_basetimes() {
  basetimes_ = 0u;
}
 ::google::protobuf::uint32 DdzSelfRoomInfo::basetimes() const {
  // @@protoc_insertion_point(field_get:userinfo.DdzSelfRoomInfo.basetimes)
  return basetimes_;
}
 void DdzSelfRoomInfo::set_basetimes(::google::protobuf::uint32 value) {
  
  basetimes_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DdzSelfRoomInfo.basetimes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeskNnUserinfo::kUidFieldNumber;
const int DeskNnUserinfo::kUnameFieldNumber;
const int DeskNnUserinfo::kCoinnumFieldNumber;
const int DeskNnUserinfo::kHeadurlFieldNumber;
const int DeskNnUserinfo::kDeskidFieldNumber;
const int DeskNnUserinfo::kPosFieldNumber;
const int DeskNnUserinfo::kStatusFieldNumber;
const int DeskNnUserinfo::kOfflineFieldNumber;
const int DeskNnUserinfo::kPokerFieldNumber;
const int DeskNnUserinfo::kGenderFieldNumber;
const int DeskNnUserinfo::kIntegralFieldNumber;
const int DeskNnUserinfo::kGamevalueFieldNumber;
const int DeskNnUserinfo::kTimesFieldNumber;
const int DeskNnUserinfo::kBetnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeskNnUserinfo::DeskNnUserinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.DeskNnUserinfo)
}

void DeskNnUserinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeskNnUserinfo::DeskNnUserinfo(const DeskNnUserinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.DeskNnUserinfo)
}

void DeskNnUserinfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinnum_ = 0u;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deskid_ = 0u;
  pos_ = 0u;
  status_ = 0u;
  offline_ = 0u;
  gender_ = 0u;
  integral_ = 0u;
  gamevalue_ = 0u;
  times_ = 0u;
  betnum_ = 0u;
}

DeskNnUserinfo::~DeskNnUserinfo() {
  // @@protoc_insertion_point(destructor:userinfo.DeskNnUserinfo)
  SharedDtor();
}

void DeskNnUserinfo::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeskNnUserinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeskNnUserinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskNnUserinfo_descriptor_;
}

const DeskNnUserinfo& DeskNnUserinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

DeskNnUserinfo* DeskNnUserinfo::default_instance_ = NULL;

DeskNnUserinfo* DeskNnUserinfo::New(::google::protobuf::Arena* arena) const {
  DeskNnUserinfo* n = new DeskNnUserinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeskNnUserinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.DeskNnUserinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeskNnUserinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeskNnUserinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, coinnum_);
  ZR_(deskid_, offline_);
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(gender_, betnum_);

#undef ZR_HELPER_
#undef ZR_

  poker_.Clear();
}

bool DeskNnUserinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.DeskNnUserinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uname;
        break;
      }

      // optional bytes uname = 2;
      case 2: {
        if (tag == 18) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coinnum;
        break;
      }

      // optional uint32 coinnum = 3;
      case 3: {
        if (tag == 24) {
         parse_coinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_headurl;
        break;
      }

      // optional bytes headurl = 4;
      case 4: {
        if (tag == 34) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_headurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deskid;
        break;
      }

      // optional uint32 deskid = 5;
      case 5: {
        if (tag == 40) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 6;
      case 6: {
        if (tag == 48) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offline;
        break;
      }

      // optional uint32 offline = 8;
      case 8: {
        if (tag == 64) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_poker;
        break;
      }

      // repeated .userinfo.Card poker = 9;
      case 9: {
        if (tag == 74) {
         parse_poker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_poker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_poker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_poker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 10;
      case 10: {
        if (tag == 80) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 11;
      case 11: {
        if (tag == 88) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gamevalue;
        break;
      }

      // optional uint32 gamevalue = 12;
      case 12: {
        if (tag == 96) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_times;
        break;
      }

      // optional uint32 times = 13;
      case 13: {
        if (tag == 104) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_betnum;
        break;
      }

      // optional uint32 betnum = 14;
      case 14: {
        if (tag == 112) {
         parse_betnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &betnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.DeskNnUserinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.DeskNnUserinfo)
  return false;
#undef DO_
}

void DeskNnUserinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.DeskNnUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coinnum(), output);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->headurl(), output);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deskid(), output);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos(), output);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offline(), output);
  }

  // repeated .userinfo.Card poker = 9;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->poker(i), output);
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gender(), output);
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->integral(), output);
  }

  // optional uint32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gamevalue(), output);
  }

  // optional uint32 times = 13;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->times(), output);
  }

  // optional uint32 betnum = 14;
  if (this->betnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->betnum(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.DeskNnUserinfo)
}

::google::protobuf::uint8* DeskNnUserinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.DeskNnUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uname(), target);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coinnum(), target);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->headurl(), target);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deskid(), target);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos(), target);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->offline(), target);
  }

  // repeated .userinfo.Card poker = 9;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->poker(i), false, target);
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gender(), target);
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->integral(), target);
  }

  // optional uint32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gamevalue(), target);
  }

  // optional uint32 times = 13;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->times(), target);
  }

  // optional uint32 betnum = 14;
  if (this->betnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->betnum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.DeskNnUserinfo)
  return target;
}

int DeskNnUserinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.DeskNnUserinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uname());
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coinnum());
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->headurl());
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline());
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->integral());
  }

  // optional uint32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gamevalue());
  }

  // optional uint32 times = 13;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());
  }

  // optional uint32 betnum = 14;
  if (this->betnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->betnum());
  }

  // repeated .userinfo.Card poker = 9;
  total_size += 1 * this->poker_size();
  for (int i = 0; i < this->poker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poker(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeskNnUserinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.DeskNnUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeskNnUserinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeskNnUserinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.DeskNnUserinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.DeskNnUserinfo)
    MergeFrom(*source);
  }
}

void DeskNnUserinfo::MergeFrom(const DeskNnUserinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.DeskNnUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  poker_.MergeFrom(from.poker_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.coinnum() != 0) {
    set_coinnum(from.coinnum());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.offline() != 0) {
    set_offline(from.offline());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.integral() != 0) {
    set_integral(from.integral());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.betnum() != 0) {
    set_betnum(from.betnum());
  }
}

void DeskNnUserinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.DeskNnUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeskNnUserinfo::CopyFrom(const DeskNnUserinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.DeskNnUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeskNnUserinfo::IsInitialized() const {

  return true;
}

void DeskNnUserinfo::Swap(DeskNnUserinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeskNnUserinfo::InternalSwap(DeskNnUserinfo* other) {
  std::swap(uid_, other->uid_);
  uname_.Swap(&other->uname_);
  std::swap(coinnum_, other->coinnum_);
  headurl_.Swap(&other->headurl_);
  std::swap(deskid_, other->deskid_);
  std::swap(pos_, other->pos_);
  std::swap(status_, other->status_);
  std::swap(offline_, other->offline_);
  poker_.UnsafeArenaSwap(&other->poker_);
  std::swap(gender_, other->gender_);
  std::swap(integral_, other->integral_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(times_, other->times_);
  std::swap(betnum_, other->betnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeskNnUserinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeskNnUserinfo_descriptor_;
  metadata.reflection = DeskNnUserinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeskNnUserinfo

// optional uint32 uid = 1;
void DeskNnUserinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.uid)
  return uid_;
}
 void DeskNnUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.uid)
}

// optional bytes uname = 2;
void DeskNnUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeskNnUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeskNnUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.uname)
}
 void DeskNnUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userinfo.DeskNnUserinfo.uname)
}
 void DeskNnUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userinfo.DeskNnUserinfo.uname)
}
 ::std::string* DeskNnUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:userinfo.DeskNnUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeskNnUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:userinfo.DeskNnUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeskNnUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:userinfo.DeskNnUserinfo.uname)
}

// optional uint32 coinnum = 3;
void DeskNnUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.coinnum)
  return coinnum_;
}
 void DeskNnUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.coinnum)
}

// optional bytes headurl = 4;
void DeskNnUserinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeskNnUserinfo::headurl() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeskNnUserinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.headurl)
}
 void DeskNnUserinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userinfo.DeskNnUserinfo.headurl)
}
 void DeskNnUserinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userinfo.DeskNnUserinfo.headurl)
}
 ::std::string* DeskNnUserinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:userinfo.DeskNnUserinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeskNnUserinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:userinfo.DeskNnUserinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeskNnUserinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:userinfo.DeskNnUserinfo.headurl)
}

// optional uint32 deskid = 5;
void DeskNnUserinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::deskid() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.deskid)
  return deskid_;
}
 void DeskNnUserinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.deskid)
}

// optional uint32 pos = 6;
void DeskNnUserinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::pos() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.pos)
  return pos_;
}
 void DeskNnUserinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.pos)
}

// optional uint32 status = 7;
void DeskNnUserinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::status() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.status)
  return status_;
}
 void DeskNnUserinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.status)
}

// optional uint32 offline = 8;
void DeskNnUserinfo::clear_offline() {
  offline_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::offline() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.offline)
  return offline_;
}
 void DeskNnUserinfo::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.offline)
}

// repeated .userinfo.Card poker = 9;
int DeskNnUserinfo::poker_size() const {
  return poker_.size();
}
void DeskNnUserinfo::clear_poker() {
  poker_.Clear();
}
const ::userinfo::Card& DeskNnUserinfo::poker(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.poker)
  return poker_.Get(index);
}
::userinfo::Card* DeskNnUserinfo::mutable_poker(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.DeskNnUserinfo.poker)
  return poker_.Mutable(index);
}
::userinfo::Card* DeskNnUserinfo::add_poker() {
  // @@protoc_insertion_point(field_add:userinfo.DeskNnUserinfo.poker)
  return poker_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::Card >*
DeskNnUserinfo::mutable_poker() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.DeskNnUserinfo.poker)
  return &poker_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::Card >&
DeskNnUserinfo::poker() const {
  // @@protoc_insertion_point(field_list:userinfo.DeskNnUserinfo.poker)
  return poker_;
}

// optional uint32 gender = 10;
void DeskNnUserinfo::clear_gender() {
  gender_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.gender)
  return gender_;
}
 void DeskNnUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.gender)
}

// optional uint32 integral = 11;
void DeskNnUserinfo::clear_integral() {
  integral_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::integral() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.integral)
  return integral_;
}
 void DeskNnUserinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.integral)
}

// optional uint32 gamevalue = 12;
void DeskNnUserinfo::clear_gamevalue() {
  gamevalue_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.gamevalue)
  return gamevalue_;
}
 void DeskNnUserinfo::set_gamevalue(::google::protobuf::uint32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.gamevalue)
}

// optional uint32 times = 13;
void DeskNnUserinfo::clear_times() {
  times_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::times() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.times)
  return times_;
}
 void DeskNnUserinfo::set_times(::google::protobuf::uint32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.times)
}

// optional uint32 betnum = 14;
void DeskNnUserinfo::clear_betnum() {
  betnum_ = 0u;
}
 ::google::protobuf::uint32 DeskNnUserinfo::betnum() const {
  // @@protoc_insertion_point(field_get:userinfo.DeskNnUserinfo.betnum)
  return betnum_;
}
 void DeskNnUserinfo::set_betnum(::google::protobuf::uint32 value) {
  
  betnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.DeskNnUserinfo.betnum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NnDeskinfo::kDeskidFieldNumber;
const int NnDeskinfo::kStatusFieldNumber;
const int NnDeskinfo::kHostposFieldNumber;
const int NnDeskinfo::kTimesFieldNumber;
const int NnDeskinfo::kUserlistFieldNumber;
const int NnDeskinfo::kMatchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NnDeskinfo::NnDeskinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.NnDeskinfo)
}

void NnDeskinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NnDeskinfo::NnDeskinfo(const NnDeskinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.NnDeskinfo)
}

void NnDeskinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  deskid_ = 0u;
  status_ = 0u;
  hostpos_ = 0u;
  times_ = 0u;
  matchid_ = 0u;
}

NnDeskinfo::~NnDeskinfo() {
  // @@protoc_insertion_point(destructor:userinfo.NnDeskinfo)
  SharedDtor();
}

void NnDeskinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NnDeskinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NnDeskinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NnDeskinfo_descriptor_;
}

const NnDeskinfo& NnDeskinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

NnDeskinfo* NnDeskinfo::default_instance_ = NULL;

NnDeskinfo* NnDeskinfo::New(::google::protobuf::Arena* arena) const {
  NnDeskinfo* n = new NnDeskinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NnDeskinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.NnDeskinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NnDeskinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NnDeskinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deskid_, times_);
  matchid_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  userlist_.Clear();
}

bool NnDeskinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.NnDeskinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hostpos;
        break;
      }

      // optional uint32 hostpos = 3;
      case 3: {
        if (tag == 24) {
         parse_hostpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hostpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // optional uint32 times = 4;
      case 4: {
        if (tag == 32) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userlist;
        break;
      }

      // repeated .userinfo.DeskNnUserinfo userlist = 5;
      case 5: {
        if (tag == 42) {
         parse_userlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_matchid;
        break;
      }

      // optional uint32 matchid = 6;
      case 6: {
        if (tag == 48) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.NnDeskinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.NnDeskinfo)
  return false;
#undef DO_
}

void NnDeskinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.NnDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deskid(), output);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 hostpos = 3;
  if (this->hostpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hostpos(), output);
  }

  // optional uint32 times = 4;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->times(), output);
  }

  // repeated .userinfo.DeskNnUserinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userlist(i), output);
  }

  // optional uint32 matchid = 6;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->matchid(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.NnDeskinfo)
}

::google::protobuf::uint8* NnDeskinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.NnDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deskid(), target);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 hostpos = 3;
  if (this->hostpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hostpos(), target);
  }

  // optional uint32 times = 4;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->times(), target);
  }

  // repeated .userinfo.DeskNnUserinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->userlist(i), false, target);
  }

  // optional uint32 matchid = 6;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->matchid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.NnDeskinfo)
  return target;
}

int NnDeskinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.NnDeskinfo)
  int total_size = 0;

  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 hostpos = 3;
  if (this->hostpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hostpos());
  }

  // optional uint32 times = 4;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());
  }

  // optional uint32 matchid = 6;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // repeated .userinfo.DeskNnUserinfo userlist = 5;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NnDeskinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.NnDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NnDeskinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NnDeskinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.NnDeskinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.NnDeskinfo)
    MergeFrom(*source);
  }
}

void NnDeskinfo::MergeFrom(const NnDeskinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.NnDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.hostpos() != 0) {
    set_hostpos(from.hostpos());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void NnDeskinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.NnDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NnDeskinfo::CopyFrom(const NnDeskinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.NnDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NnDeskinfo::IsInitialized() const {

  return true;
}

void NnDeskinfo::Swap(NnDeskinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NnDeskinfo::InternalSwap(NnDeskinfo* other) {
  std::swap(deskid_, other->deskid_);
  std::swap(status_, other->status_);
  std::swap(hostpos_, other->hostpos_);
  std::swap(times_, other->times_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  std::swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NnDeskinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NnDeskinfo_descriptor_;
  metadata.reflection = NnDeskinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NnDeskinfo

// optional uint32 deskid = 1;
void NnDeskinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 NnDeskinfo::deskid() const {
  // @@protoc_insertion_point(field_get:userinfo.NnDeskinfo.deskid)
  return deskid_;
}
 void NnDeskinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnDeskinfo.deskid)
}

// optional uint32 status = 2;
void NnDeskinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 NnDeskinfo::status() const {
  // @@protoc_insertion_point(field_get:userinfo.NnDeskinfo.status)
  return status_;
}
 void NnDeskinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnDeskinfo.status)
}

// optional uint32 hostpos = 3;
void NnDeskinfo::clear_hostpos() {
  hostpos_ = 0u;
}
 ::google::protobuf::uint32 NnDeskinfo::hostpos() const {
  // @@protoc_insertion_point(field_get:userinfo.NnDeskinfo.hostpos)
  return hostpos_;
}
 void NnDeskinfo::set_hostpos(::google::protobuf::uint32 value) {
  
  hostpos_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnDeskinfo.hostpos)
}

// optional uint32 times = 4;
void NnDeskinfo::clear_times() {
  times_ = 0u;
}
 ::google::protobuf::uint32 NnDeskinfo::times() const {
  // @@protoc_insertion_point(field_get:userinfo.NnDeskinfo.times)
  return times_;
}
 void NnDeskinfo::set_times(::google::protobuf::uint32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnDeskinfo.times)
}

// repeated .userinfo.DeskNnUserinfo userlist = 5;
int NnDeskinfo::userlist_size() const {
  return userlist_.size();
}
void NnDeskinfo::clear_userlist() {
  userlist_.Clear();
}
const ::userinfo::DeskNnUserinfo& NnDeskinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.NnDeskinfo.userlist)
  return userlist_.Get(index);
}
::userinfo::DeskNnUserinfo* NnDeskinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.NnDeskinfo.userlist)
  return userlist_.Mutable(index);
}
::userinfo::DeskNnUserinfo* NnDeskinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:userinfo.NnDeskinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::DeskNnUserinfo >*
NnDeskinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.NnDeskinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::DeskNnUserinfo >&
NnDeskinfo::userlist() const {
  // @@protoc_insertion_point(field_list:userinfo.NnDeskinfo.userlist)
  return userlist_;
}

// optional uint32 matchid = 6;
void NnDeskinfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 NnDeskinfo::matchid() const {
  // @@protoc_insertion_point(field_get:userinfo.NnDeskinfo.matchid)
  return matchid_;
}
 void NnDeskinfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnDeskinfo.matchid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NnUserPokerList::kUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NnUserPokerList::NnUserPokerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.NnUserPokerList)
}

void NnUserPokerList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NnUserPokerList::NnUserPokerList(const NnUserPokerList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.NnUserPokerList)
}

void NnUserPokerList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NnUserPokerList::~NnUserPokerList() {
  // @@protoc_insertion_point(destructor:userinfo.NnUserPokerList)
  SharedDtor();
}

void NnUserPokerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NnUserPokerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NnUserPokerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NnUserPokerList_descriptor_;
}

const NnUserPokerList& NnUserPokerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

NnUserPokerList* NnUserPokerList::default_instance_ = NULL;

NnUserPokerList* NnUserPokerList::New(::google::protobuf::Arena* arena) const {
  NnUserPokerList* n = new NnUserPokerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NnUserPokerList::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.NnUserPokerList)
  userlist_.Clear();
}

bool NnUserPokerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.NnUserPokerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .userinfo.NnUserPoker userlist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.NnUserPokerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.NnUserPokerList)
  return false;
#undef DO_
}

void NnUserPokerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.NnUserPokerList)
  // repeated .userinfo.NnUserPoker userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.NnUserPokerList)
}

::google::protobuf::uint8* NnUserPokerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.NnUserPokerList)
  // repeated .userinfo.NnUserPoker userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->userlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.NnUserPokerList)
  return target;
}

int NnUserPokerList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.NnUserPokerList)
  int total_size = 0;

  // repeated .userinfo.NnUserPoker userlist = 1;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NnUserPokerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.NnUserPokerList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NnUserPokerList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NnUserPokerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.NnUserPokerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.NnUserPokerList)
    MergeFrom(*source);
  }
}

void NnUserPokerList::MergeFrom(const NnUserPokerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.NnUserPokerList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
}

void NnUserPokerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.NnUserPokerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NnUserPokerList::CopyFrom(const NnUserPokerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.NnUserPokerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NnUserPokerList::IsInitialized() const {

  return true;
}

void NnUserPokerList::Swap(NnUserPokerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NnUserPokerList::InternalSwap(NnUserPokerList* other) {
  userlist_.UnsafeArenaSwap(&other->userlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NnUserPokerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NnUserPokerList_descriptor_;
  metadata.reflection = NnUserPokerList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NnUserPokerList

// repeated .userinfo.NnUserPoker userlist = 1;
int NnUserPokerList::userlist_size() const {
  return userlist_.size();
}
void NnUserPokerList::clear_userlist() {
  userlist_.Clear();
}
const ::userinfo::NnUserPoker& NnUserPokerList::userlist(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.NnUserPokerList.userlist)
  return userlist_.Get(index);
}
::userinfo::NnUserPoker* NnUserPokerList::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.NnUserPokerList.userlist)
  return userlist_.Mutable(index);
}
::userinfo::NnUserPoker* NnUserPokerList::add_userlist() {
  // @@protoc_insertion_point(field_add:userinfo.NnUserPokerList.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::NnUserPoker >*
NnUserPokerList::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.NnUserPokerList.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::NnUserPoker >&
NnUserPokerList::userlist() const {
  // @@protoc_insertion_point(field_list:userinfo.NnUserPokerList.userlist)
  return userlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NnUserPoker::kUserposFieldNumber;
const int NnUserPoker::kPokerlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NnUserPoker::NnUserPoker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.NnUserPoker)
}

void NnUserPoker::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NnUserPoker::NnUserPoker(const NnUserPoker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.NnUserPoker)
}

void NnUserPoker::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userpos_ = 0u;
}

NnUserPoker::~NnUserPoker() {
  // @@protoc_insertion_point(destructor:userinfo.NnUserPoker)
  SharedDtor();
}

void NnUserPoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NnUserPoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NnUserPoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NnUserPoker_descriptor_;
}

const NnUserPoker& NnUserPoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

NnUserPoker* NnUserPoker::default_instance_ = NULL;

NnUserPoker* NnUserPoker::New(::google::protobuf::Arena* arena) const {
  NnUserPoker* n = new NnUserPoker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NnUserPoker::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.NnUserPoker)
  userpos_ = 0u;
  pokerlist_.Clear();
}

bool NnUserPoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.NnUserPoker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userpos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pokerlist;
        break;
      }

      // repeated .userinfo.Card pokerlist = 2;
      case 2: {
        if (tag == 18) {
         parse_pokerlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pokerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pokerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pokerlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.NnUserPoker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.NnUserPoker)
  return false;
#undef DO_
}

void NnUserPoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.NnUserPoker)
  // optional uint32 userpos = 1;
  if (this->userpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userpos(), output);
  }

  // repeated .userinfo.Card pokerlist = 2;
  for (unsigned int i = 0, n = this->pokerlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pokerlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.NnUserPoker)
}

::google::protobuf::uint8* NnUserPoker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.NnUserPoker)
  // optional uint32 userpos = 1;
  if (this->userpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userpos(), target);
  }

  // repeated .userinfo.Card pokerlist = 2;
  for (unsigned int i = 0, n = this->pokerlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pokerlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.NnUserPoker)
  return target;
}

int NnUserPoker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.NnUserPoker)
  int total_size = 0;

  // optional uint32 userpos = 1;
  if (this->userpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userpos());
  }

  // repeated .userinfo.Card pokerlist = 2;
  total_size += 1 * this->pokerlist_size();
  for (int i = 0; i < this->pokerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pokerlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NnUserPoker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.NnUserPoker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NnUserPoker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NnUserPoker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.NnUserPoker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.NnUserPoker)
    MergeFrom(*source);
  }
}

void NnUserPoker::MergeFrom(const NnUserPoker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.NnUserPoker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pokerlist_.MergeFrom(from.pokerlist_);
  if (from.userpos() != 0) {
    set_userpos(from.userpos());
  }
}

void NnUserPoker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.NnUserPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NnUserPoker::CopyFrom(const NnUserPoker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.NnUserPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NnUserPoker::IsInitialized() const {

  return true;
}

void NnUserPoker::Swap(NnUserPoker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NnUserPoker::InternalSwap(NnUserPoker* other) {
  std::swap(userpos_, other->userpos_);
  pokerlist_.UnsafeArenaSwap(&other->pokerlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NnUserPoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NnUserPoker_descriptor_;
  metadata.reflection = NnUserPoker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NnUserPoker

// optional uint32 userpos = 1;
void NnUserPoker::clear_userpos() {
  userpos_ = 0u;
}
 ::google::protobuf::uint32 NnUserPoker::userpos() const {
  // @@protoc_insertion_point(field_get:userinfo.NnUserPoker.userpos)
  return userpos_;
}
 void NnUserPoker::set_userpos(::google::protobuf::uint32 value) {
  
  userpos_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnUserPoker.userpos)
}

// repeated .userinfo.Card pokerlist = 2;
int NnUserPoker::pokerlist_size() const {
  return pokerlist_.size();
}
void NnUserPoker::clear_pokerlist() {
  pokerlist_.Clear();
}
const ::userinfo::Card& NnUserPoker::pokerlist(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.NnUserPoker.pokerlist)
  return pokerlist_.Get(index);
}
::userinfo::Card* NnUserPoker::mutable_pokerlist(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.NnUserPoker.pokerlist)
  return pokerlist_.Mutable(index);
}
::userinfo::Card* NnUserPoker::add_pokerlist() {
  // @@protoc_insertion_point(field_add:userinfo.NnUserPoker.pokerlist)
  return pokerlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::Card >*
NnUserPoker::mutable_pokerlist() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.NnUserPoker.pokerlist)
  return &pokerlist_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::Card >&
NnUserPoker::pokerlist() const {
  // @@protoc_insertion_point(field_list:userinfo.NnUserPoker.pokerlist)
  return pokerlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NNDeskResultinfo::kStatusFieldNumber;
const int NNDeskResultinfo::kTimesFieldNumber;
const int NNDeskResultinfo::kUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NNDeskResultinfo::NNDeskResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.NNDeskResultinfo)
}

void NNDeskResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NNDeskResultinfo::NNDeskResultinfo(const NNDeskResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.NNDeskResultinfo)
}

void NNDeskResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0u;
  times_ = 0u;
}

NNDeskResultinfo::~NNDeskResultinfo() {
  // @@protoc_insertion_point(destructor:userinfo.NNDeskResultinfo)
  SharedDtor();
}

void NNDeskResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NNDeskResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NNDeskResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NNDeskResultinfo_descriptor_;
}

const NNDeskResultinfo& NNDeskResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

NNDeskResultinfo* NNDeskResultinfo::default_instance_ = NULL;

NNDeskResultinfo* NNDeskResultinfo::New(::google::protobuf::Arena* arena) const {
  NNDeskResultinfo* n = new NNDeskResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NNDeskResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.NNDeskResultinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NNDeskResultinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NNDeskResultinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, times_);

#undef ZR_HELPER_
#undef ZR_

  userlist_.Clear();
}

bool NNDeskResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.NNDeskResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (tag == 16) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userlist;
        break;
      }

      // repeated .userinfo.NNUserResultinfo userlist = 5;
      case 5: {
        if (tag == 42) {
         parse_userlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.NNDeskResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.NNDeskResultinfo)
  return false;
#undef DO_
}

void NNDeskResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.NNDeskResultinfo)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 times = 2;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  // repeated .userinfo.NNUserResultinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.NNDeskResultinfo)
}

::google::protobuf::uint8* NNDeskResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.NNDeskResultinfo)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 times = 2;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  // repeated .userinfo.NNUserResultinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->userlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.NNDeskResultinfo)
  return target;
}

int NNDeskResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.NNDeskResultinfo)
  int total_size = 0;

  // optional uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());
  }

  // repeated .userinfo.NNUserResultinfo userlist = 5;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NNDeskResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.NNDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NNDeskResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NNDeskResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.NNDeskResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.NNDeskResultinfo)
    MergeFrom(*source);
  }
}

void NNDeskResultinfo::MergeFrom(const NNDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.NNDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
}

void NNDeskResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.NNDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NNDeskResultinfo::CopyFrom(const NNDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.NNDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NNDeskResultinfo::IsInitialized() const {

  return true;
}

void NNDeskResultinfo::Swap(NNDeskResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NNDeskResultinfo::InternalSwap(NNDeskResultinfo* other) {
  std::swap(status_, other->status_);
  std::swap(times_, other->times_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NNDeskResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NNDeskResultinfo_descriptor_;
  metadata.reflection = NNDeskResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NNDeskResultinfo

// optional uint32 status = 1;
void NNDeskResultinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 NNDeskResultinfo::status() const {
  // @@protoc_insertion_point(field_get:userinfo.NNDeskResultinfo.status)
  return status_;
}
 void NNDeskResultinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNDeskResultinfo.status)
}

// optional uint32 times = 2;
void NNDeskResultinfo::clear_times() {
  times_ = 0u;
}
 ::google::protobuf::uint32 NNDeskResultinfo::times() const {
  // @@protoc_insertion_point(field_get:userinfo.NNDeskResultinfo.times)
  return times_;
}
 void NNDeskResultinfo::set_times(::google::protobuf::uint32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNDeskResultinfo.times)
}

// repeated .userinfo.NNUserResultinfo userlist = 5;
int NNDeskResultinfo::userlist_size() const {
  return userlist_.size();
}
void NNDeskResultinfo::clear_userlist() {
  userlist_.Clear();
}
const ::userinfo::NNUserResultinfo& NNDeskResultinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.NNDeskResultinfo.userlist)
  return userlist_.Get(index);
}
::userinfo::NNUserResultinfo* NNDeskResultinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.NNDeskResultinfo.userlist)
  return userlist_.Mutable(index);
}
::userinfo::NNUserResultinfo* NNDeskResultinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:userinfo.NNDeskResultinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::NNUserResultinfo >*
NNDeskResultinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.NNDeskResultinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::NNUserResultinfo >&
NNDeskResultinfo::userlist() const {
  // @@protoc_insertion_point(field_list:userinfo.NNDeskResultinfo.userlist)
  return userlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NNUserResultinfo::kUidFieldNumber;
const int NNUserResultinfo::kPosFieldNumber;
const int NNUserResultinfo::kTimesFieldNumber;
const int NNUserResultinfo::kResultFieldNumber;
const int NNUserResultinfo::kValueFieldNumber;
const int NNUserResultinfo::kCoinFieldNumber;
const int NNUserResultinfo::kGamevalueFieldNumber;
const int NNUserResultinfo::kRankFieldNumber;
const int NNUserResultinfo::kLeftvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NNUserResultinfo::NNUserResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.NNUserResultinfo)
}

void NNUserResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NNUserResultinfo::NNUserResultinfo(const NNUserResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.NNUserResultinfo)
}

void NNUserResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0u;
  pos_ = 0u;
  times_ = 0u;
  result_ = 0u;
  value_ = 0u;
  coin_ = 0u;
  gamevalue_ = 0;
  rank_ = 0u;
  leftvalue_ = 0u;
}

NNUserResultinfo::~NNUserResultinfo() {
  // @@protoc_insertion_point(destructor:userinfo.NNUserResultinfo)
  SharedDtor();
}

void NNUserResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NNUserResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NNUserResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NNUserResultinfo_descriptor_;
}

const NNUserResultinfo& NNUserResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

NNUserResultinfo* NNUserResultinfo::default_instance_ = NULL;

NNUserResultinfo* NNUserResultinfo::New(::google::protobuf::Arena* arena) const {
  NNUserResultinfo* n = new NNUserResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NNUserResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.NNUserResultinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NNUserResultinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NNUserResultinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, rank_);
  leftvalue_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool NNUserResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.NNUserResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional uint32 times = 3;
      case 3: {
        if (tag == 24) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional uint32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional uint32 value = 5;
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 6;
      case 6: {
        if (tag == 48) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 7;
      case 7: {
        if (tag == 56) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 8;
      case 8: {
        if (tag == 64) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_leftvalue;
        break;
      }

      // optional uint32 leftvalue = 9;
      case 9: {
        if (tag == 72) {
         parse_leftvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftvalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.NNUserResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.NNUserResultinfo)
  return false;
#undef DO_
}

void NNUserResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.NNUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 times = 3;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times(), output);
  }

  // optional uint32 result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  // optional uint32 value = 5;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value(), output);
  }

  // optional uint32 coin = 6;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->coin(), output);
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gamevalue(), output);
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rank(), output);
  }

  // optional uint32 leftvalue = 9;
  if (this->leftvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->leftvalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.NNUserResultinfo)
}

::google::protobuf::uint8* NNUserResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.NNUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 times = 3;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times(), target);
  }

  // optional uint32 result = 4;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result(), target);
  }

  // optional uint32 value = 5;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value(), target);
  }

  // optional uint32 coin = 6;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->coin(), target);
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gamevalue(), target);
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rank(), target);
  }

  // optional uint32 leftvalue = 9;
  if (this->leftvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->leftvalue(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.NNUserResultinfo)
  return target;
}

int NNUserResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.NNUserResultinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 times = 3;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());
  }

  // optional uint32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional uint32 value = 5;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // optional uint32 coin = 6;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // optional uint32 leftvalue = 9;
  if (this->leftvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftvalue());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NNUserResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.NNUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NNUserResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NNUserResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.NNUserResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.NNUserResultinfo)
    MergeFrom(*source);
  }
}

void NNUserResultinfo::MergeFrom(const NNUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.NNUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.leftvalue() != 0) {
    set_leftvalue(from.leftvalue());
  }
}

void NNUserResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.NNUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NNUserResultinfo::CopyFrom(const NNUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.NNUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NNUserResultinfo::IsInitialized() const {

  return true;
}

void NNUserResultinfo::Swap(NNUserResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NNUserResultinfo::InternalSwap(NNUserResultinfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(pos_, other->pos_);
  std::swap(times_, other->times_);
  std::swap(result_, other->result_);
  std::swap(value_, other->value_);
  std::swap(coin_, other->coin_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(rank_, other->rank_);
  std::swap(leftvalue_, other->leftvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NNUserResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NNUserResultinfo_descriptor_;
  metadata.reflection = NNUserResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NNUserResultinfo

// optional uint32 uid = 1;
void NNUserResultinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 NNUserResultinfo::uid() const {
  // @@protoc_insertion_point(field_get:userinfo.NNUserResultinfo.uid)
  return uid_;
}
 void NNUserResultinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNUserResultinfo.uid)
}

// optional uint32 pos = 2;
void NNUserResultinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 NNUserResultinfo::pos() const {
  // @@protoc_insertion_point(field_get:userinfo.NNUserResultinfo.pos)
  return pos_;
}
 void NNUserResultinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNUserResultinfo.pos)
}

// optional uint32 times = 3;
void NNUserResultinfo::clear_times() {
  times_ = 0u;
}
 ::google::protobuf::uint32 NNUserResultinfo::times() const {
  // @@protoc_insertion_point(field_get:userinfo.NNUserResultinfo.times)
  return times_;
}
 void NNUserResultinfo::set_times(::google::protobuf::uint32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNUserResultinfo.times)
}

// optional uint32 result = 4;
void NNUserResultinfo::clear_result() {
  result_ = 0u;
}
 ::google::protobuf::uint32 NNUserResultinfo::result() const {
  // @@protoc_insertion_point(field_get:userinfo.NNUserResultinfo.result)
  return result_;
}
 void NNUserResultinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNUserResultinfo.result)
}

// optional uint32 value = 5;
void NNUserResultinfo::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 NNUserResultinfo::value() const {
  // @@protoc_insertion_point(field_get:userinfo.NNUserResultinfo.value)
  return value_;
}
 void NNUserResultinfo::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNUserResultinfo.value)
}

// optional uint32 coin = 6;
void NNUserResultinfo::clear_coin() {
  coin_ = 0u;
}
 ::google::protobuf::uint32 NNUserResultinfo::coin() const {
  // @@protoc_insertion_point(field_get:userinfo.NNUserResultinfo.coin)
  return coin_;
}
 void NNUserResultinfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNUserResultinfo.coin)
}

// optional int32 gamevalue = 7;
void NNUserResultinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 NNUserResultinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:userinfo.NNUserResultinfo.gamevalue)
  return gamevalue_;
}
 void NNUserResultinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNUserResultinfo.gamevalue)
}

// optional uint32 rank = 8;
void NNUserResultinfo::clear_rank() {
  rank_ = 0u;
}
 ::google::protobuf::uint32 NNUserResultinfo::rank() const {
  // @@protoc_insertion_point(field_get:userinfo.NNUserResultinfo.rank)
  return rank_;
}
 void NNUserResultinfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNUserResultinfo.rank)
}

// optional uint32 leftvalue = 9;
void NNUserResultinfo::clear_leftvalue() {
  leftvalue_ = 0u;
}
 ::google::protobuf::uint32 NNUserResultinfo::leftvalue() const {
  // @@protoc_insertion_point(field_get:userinfo.NNUserResultinfo.leftvalue)
  return leftvalue_;
}
 void NNUserResultinfo::set_leftvalue(::google::protobuf::uint32 value) {
  
  leftvalue_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NNUserResultinfo.leftvalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NnUserBetList::kUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NnUserBetList::NnUserBetList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.NnUserBetList)
}

void NnUserBetList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NnUserBetList::NnUserBetList(const NnUserBetList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.NnUserBetList)
}

void NnUserBetList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NnUserBetList::~NnUserBetList() {
  // @@protoc_insertion_point(destructor:userinfo.NnUserBetList)
  SharedDtor();
}

void NnUserBetList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NnUserBetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NnUserBetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NnUserBetList_descriptor_;
}

const NnUserBetList& NnUserBetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

NnUserBetList* NnUserBetList::default_instance_ = NULL;

NnUserBetList* NnUserBetList::New(::google::protobuf::Arena* arena) const {
  NnUserBetList* n = new NnUserBetList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NnUserBetList::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.NnUserBetList)
  userlist_.Clear();
}

bool NnUserBetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.NnUserBetList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .userinfo.NnUserBet userlist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.NnUserBetList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.NnUserBetList)
  return false;
#undef DO_
}

void NnUserBetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.NnUserBetList)
  // repeated .userinfo.NnUserBet userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.NnUserBetList)
}

::google::protobuf::uint8* NnUserBetList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.NnUserBetList)
  // repeated .userinfo.NnUserBet userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->userlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.NnUserBetList)
  return target;
}

int NnUserBetList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.NnUserBetList)
  int total_size = 0;

  // repeated .userinfo.NnUserBet userlist = 1;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NnUserBetList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.NnUserBetList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NnUserBetList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NnUserBetList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.NnUserBetList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.NnUserBetList)
    MergeFrom(*source);
  }
}

void NnUserBetList::MergeFrom(const NnUserBetList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.NnUserBetList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
}

void NnUserBetList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.NnUserBetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NnUserBetList::CopyFrom(const NnUserBetList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.NnUserBetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NnUserBetList::IsInitialized() const {

  return true;
}

void NnUserBetList::Swap(NnUserBetList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NnUserBetList::InternalSwap(NnUserBetList* other) {
  userlist_.UnsafeArenaSwap(&other->userlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NnUserBetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NnUserBetList_descriptor_;
  metadata.reflection = NnUserBetList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NnUserBetList

// repeated .userinfo.NnUserBet userlist = 1;
int NnUserBetList::userlist_size() const {
  return userlist_.size();
}
void NnUserBetList::clear_userlist() {
  userlist_.Clear();
}
const ::userinfo::NnUserBet& NnUserBetList::userlist(int index) const {
  // @@protoc_insertion_point(field_get:userinfo.NnUserBetList.userlist)
  return userlist_.Get(index);
}
::userinfo::NnUserBet* NnUserBetList::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:userinfo.NnUserBetList.userlist)
  return userlist_.Mutable(index);
}
::userinfo::NnUserBet* NnUserBetList::add_userlist() {
  // @@protoc_insertion_point(field_add:userinfo.NnUserBetList.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::userinfo::NnUserBet >*
NnUserBetList::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:userinfo.NnUserBetList.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::userinfo::NnUserBet >&
NnUserBetList::userlist() const {
  // @@protoc_insertion_point(field_list:userinfo.NnUserBetList.userlist)
  return userlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NnUserBet::kUserposFieldNumber;
const int NnUserBet::kTimesFieldNumber;
const int NnUserBet::kBetnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NnUserBet::NnUserBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.NnUserBet)
}

void NnUserBet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NnUserBet::NnUserBet(const NnUserBet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.NnUserBet)
}

void NnUserBet::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userpos_ = 0u;
  times_ = 0u;
  betnum_ = 0u;
}

NnUserBet::~NnUserBet() {
  // @@protoc_insertion_point(destructor:userinfo.NnUserBet)
  SharedDtor();
}

void NnUserBet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NnUserBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NnUserBet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NnUserBet_descriptor_;
}

const NnUserBet& NnUserBet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

NnUserBet* NnUserBet::default_instance_ = NULL;

NnUserBet* NnUserBet::New(::google::protobuf::Arena* arena) const {
  NnUserBet* n = new NnUserBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NnUserBet::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.NnUserBet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NnUserBet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NnUserBet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userpos_, betnum_);

#undef ZR_HELPER_
#undef ZR_

}

bool NnUserBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.NnUserBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userpos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (tag == 16) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_betnum;
        break;
      }

      // optional uint32 betnum = 3;
      case 3: {
        if (tag == 24) {
         parse_betnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &betnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.NnUserBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.NnUserBet)
  return false;
#undef DO_
}

void NnUserBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.NnUserBet)
  // optional uint32 userpos = 1;
  if (this->userpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userpos(), output);
  }

  // optional uint32 times = 2;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  // optional uint32 betnum = 3;
  if (this->betnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->betnum(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.NnUserBet)
}

::google::protobuf::uint8* NnUserBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.NnUserBet)
  // optional uint32 userpos = 1;
  if (this->userpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userpos(), target);
  }

  // optional uint32 times = 2;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  // optional uint32 betnum = 3;
  if (this->betnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->betnum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.NnUserBet)
  return target;
}

int NnUserBet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.NnUserBet)
  int total_size = 0;

  // optional uint32 userpos = 1;
  if (this->userpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userpos());
  }

  // optional uint32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());
  }

  // optional uint32 betnum = 3;
  if (this->betnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->betnum());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NnUserBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.NnUserBet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NnUserBet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NnUserBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.NnUserBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.NnUserBet)
    MergeFrom(*source);
  }
}

void NnUserBet::MergeFrom(const NnUserBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.NnUserBet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userpos() != 0) {
    set_userpos(from.userpos());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.betnum() != 0) {
    set_betnum(from.betnum());
  }
}

void NnUserBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.NnUserBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NnUserBet::CopyFrom(const NnUserBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.NnUserBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NnUserBet::IsInitialized() const {

  return true;
}

void NnUserBet::Swap(NnUserBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NnUserBet::InternalSwap(NnUserBet* other) {
  std::swap(userpos_, other->userpos_);
  std::swap(times_, other->times_);
  std::swap(betnum_, other->betnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NnUserBet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NnUserBet_descriptor_;
  metadata.reflection = NnUserBet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NnUserBet

// optional uint32 userpos = 1;
void NnUserBet::clear_userpos() {
  userpos_ = 0u;
}
 ::google::protobuf::uint32 NnUserBet::userpos() const {
  // @@protoc_insertion_point(field_get:userinfo.NnUserBet.userpos)
  return userpos_;
}
 void NnUserBet::set_userpos(::google::protobuf::uint32 value) {
  
  userpos_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnUserBet.userpos)
}

// optional uint32 times = 2;
void NnUserBet::clear_times() {
  times_ = 0u;
}
 ::google::protobuf::uint32 NnUserBet::times() const {
  // @@protoc_insertion_point(field_get:userinfo.NnUserBet.times)
  return times_;
}
 void NnUserBet::set_times(::google::protobuf::uint32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnUserBet.times)
}

// optional uint32 betnum = 3;
void NnUserBet::clear_betnum() {
  betnum_ = 0u;
}
 ::google::protobuf::uint32 NnUserBet::betnum() const {
  // @@protoc_insertion_point(field_get:userinfo.NnUserBet.betnum)
  return betnum_;
}
 void NnUserBet::set_betnum(::google::protobuf::uint32 value) {
  
  betnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnUserBet.betnum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NnMatchInfo::kMatchidFieldNumber;
const int NnMatchInfo::kTrunindexFieldNumber;
const int NnMatchInfo::kCurnumFieldNumber;
const int NnMatchInfo::kGamevalueFieldNumber;
const int NnMatchInfo::kIfmatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NnMatchInfo::NnMatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.NnMatchInfo)
}

void NnMatchInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NnMatchInfo::NnMatchInfo(const NnMatchInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.NnMatchInfo)
}

void NnMatchInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  matchid_ = 0u;
  trunindex_ = 0u;
  curnum_ = 0u;
  gamevalue_ = 0;
  ifmatch_ = 0;
}

NnMatchInfo::~NnMatchInfo() {
  // @@protoc_insertion_point(destructor:userinfo.NnMatchInfo)
  SharedDtor();
}

void NnMatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NnMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NnMatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NnMatchInfo_descriptor_;
}

const NnMatchInfo& NnMatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

NnMatchInfo* NnMatchInfo::default_instance_ = NULL;

NnMatchInfo* NnMatchInfo::New(::google::protobuf::Arena* arena) const {
  NnMatchInfo* n = new NnMatchInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NnMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.NnMatchInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NnMatchInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NnMatchInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(matchid_, ifmatch_);

#undef ZR_HELPER_
#undef ZR_

}

bool NnMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.NnMatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matchid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trunindex;
        break;
      }

      // optional uint32 trunindex = 2;
      case 2: {
        if (tag == 16) {
         parse_trunindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trunindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curnum;
        break;
      }

      // optional uint32 curnum = 3;
      case 3: {
        if (tag == 24) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 4;
      case 4: {
        if (tag == 32) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ifmatch;
        break;
      }

      // optional int32 ifmatch = 5;
      case 5: {
        if (tag == 40) {
         parse_ifmatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifmatch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.NnMatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.NnMatchInfo)
  return false;
#undef DO_
}

void NnMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.NnMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trunindex(), output);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curnum(), output);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gamevalue(), output);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifmatch(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.NnMatchInfo)
}

::google::protobuf::uint8* NnMatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.NnMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trunindex(), target);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curnum(), target);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gamevalue(), target);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifmatch(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.NnMatchInfo)
  return target;
}

int NnMatchInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.NnMatchInfo)
  int total_size = 0;

  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trunindex());
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curnum());
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ifmatch());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NnMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.NnMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NnMatchInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NnMatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.NnMatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.NnMatchInfo)
    MergeFrom(*source);
  }
}

void NnMatchInfo::MergeFrom(const NnMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.NnMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.trunindex() != 0) {
    set_trunindex(from.trunindex());
  }
  if (from.curnum() != 0) {
    set_curnum(from.curnum());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.ifmatch() != 0) {
    set_ifmatch(from.ifmatch());
  }
}

void NnMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.NnMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NnMatchInfo::CopyFrom(const NnMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.NnMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NnMatchInfo::IsInitialized() const {

  return true;
}

void NnMatchInfo::Swap(NnMatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NnMatchInfo::InternalSwap(NnMatchInfo* other) {
  std::swap(matchid_, other->matchid_);
  std::swap(trunindex_, other->trunindex_);
  std::swap(curnum_, other->curnum_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(ifmatch_, other->ifmatch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NnMatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NnMatchInfo_descriptor_;
  metadata.reflection = NnMatchInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NnMatchInfo

// optional uint32 matchid = 1;
void NnMatchInfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 NnMatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:userinfo.NnMatchInfo.matchid)
  return matchid_;
}
 void NnMatchInfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnMatchInfo.matchid)
}

// optional uint32 trunindex = 2;
void NnMatchInfo::clear_trunindex() {
  trunindex_ = 0u;
}
 ::google::protobuf::uint32 NnMatchInfo::trunindex() const {
  // @@protoc_insertion_point(field_get:userinfo.NnMatchInfo.trunindex)
  return trunindex_;
}
 void NnMatchInfo::set_trunindex(::google::protobuf::uint32 value) {
  
  trunindex_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnMatchInfo.trunindex)
}

// optional uint32 curnum = 3;
void NnMatchInfo::clear_curnum() {
  curnum_ = 0u;
}
 ::google::protobuf::uint32 NnMatchInfo::curnum() const {
  // @@protoc_insertion_point(field_get:userinfo.NnMatchInfo.curnum)
  return curnum_;
}
 void NnMatchInfo::set_curnum(::google::protobuf::uint32 value) {
  
  curnum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnMatchInfo.curnum)
}

// optional int32 gamevalue = 4;
void NnMatchInfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 NnMatchInfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:userinfo.NnMatchInfo.gamevalue)
  return gamevalue_;
}
 void NnMatchInfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnMatchInfo.gamevalue)
}

// optional int32 ifmatch = 5;
void NnMatchInfo::clear_ifmatch() {
  ifmatch_ = 0;
}
 ::google::protobuf::int32 NnMatchInfo::ifmatch() const {
  // @@protoc_insertion_point(field_get:userinfo.NnMatchInfo.ifmatch)
  return ifmatch_;
}
 void NnMatchInfo::set_ifmatch(::google::protobuf::int32 value) {
  
  ifmatch_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnMatchInfo.ifmatch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NnSelfRoomInfo::kRoomidFieldNumber;
const int NnSelfRoomInfo::kRoomcodeFieldNumber;
const int NnSelfRoomInfo::kEndtimeFieldNumber;
const int NnSelfRoomInfo::kCreateuidFieldNumber;
const int NnSelfRoomInfo::kBasecoinFieldNumber;
const int NnSelfRoomInfo::kBasetimesFieldNumber;
const int NnSelfRoomInfo::kGamenumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NnSelfRoomInfo::NnSelfRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userinfo.NnSelfRoomInfo)
}

void NnSelfRoomInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NnSelfRoomInfo::NnSelfRoomInfo(const NnSelfRoomInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userinfo.NnSelfRoomInfo)
}

void NnSelfRoomInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0u;
  roomcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = 0u;
  createuid_ = 0u;
  basecoin_ = 0u;
  basetimes_ = 0u;
  gamenum_ = 0u;
}

NnSelfRoomInfo::~NnSelfRoomInfo() {
  // @@protoc_insertion_point(destructor:userinfo.NnSelfRoomInfo)
  SharedDtor();
}

void NnSelfRoomInfo::SharedDtor() {
  roomcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NnSelfRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NnSelfRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NnSelfRoomInfo_descriptor_;
}

const NnSelfRoomInfo& NnSelfRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinfo_2eproto();
  return *default_instance_;
}

NnSelfRoomInfo* NnSelfRoomInfo::default_instance_ = NULL;

NnSelfRoomInfo* NnSelfRoomInfo::New(::google::protobuf::Arena* arena) const {
  NnSelfRoomInfo* n = new NnSelfRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NnSelfRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userinfo.NnSelfRoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NnSelfRoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NnSelfRoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roomid_, gamenum_);
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool NnSelfRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:userinfo.NnSelfRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roomid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomcode;
        break;
      }

      // optional bytes roomcode = 2;
      case 2: {
        if (tag == 18) {
         parse_roomcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createuid;
        break;
      }

      // optional uint32 createuid = 4;
      case 4: {
        if (tag == 32) {
         parse_createuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createuid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basecoin;
        break;
      }

      // optional uint32 basecoin = 5;
      case 5: {
        if (tag == 40) {
         parse_basecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basecoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_basetimes;
        break;
      }

      // optional uint32 basetimes = 6;
      case 6: {
        if (tag == 48) {
         parse_basetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basetimes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gamenum;
        break;
      }

      // optional uint32 gamenum = 7;
      case 7: {
        if (tag == 56) {
         parse_gamenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamenum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userinfo.NnSelfRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userinfo.NnSelfRoomInfo)
  return false;
#undef DO_
}

void NnSelfRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userinfo.NnSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomcode(), output);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createuid(), output);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->basecoin(), output);
  }

  // optional uint32 basetimes = 6;
  if (this->basetimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->basetimes(), output);
  }

  // optional uint32 gamenum = 7;
  if (this->gamenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gamenum(), output);
  }

  // @@protoc_insertion_point(serialize_end:userinfo.NnSelfRoomInfo)
}

::google::protobuf::uint8* NnSelfRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:userinfo.NnSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomcode(), target);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createuid(), target);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->basecoin(), target);
  }

  // optional uint32 basetimes = 6;
  if (this->basetimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->basetimes(), target);
  }

  // optional uint32 gamenum = 7;
  if (this->gamenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gamenum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:userinfo.NnSelfRoomInfo)
  return target;
}

int NnSelfRoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userinfo.NnSelfRoomInfo)
  int total_size = 0;

  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomcode());
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endtime());
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createuid());
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->basecoin());
  }

  // optional uint32 basetimes = 6;
  if (this->basetimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->basetimes());
  }

  // optional uint32 gamenum = 7;
  if (this->gamenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gamenum());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NnSelfRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userinfo.NnSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NnSelfRoomInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NnSelfRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userinfo.NnSelfRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userinfo.NnSelfRoomInfo)
    MergeFrom(*source);
  }
}

void NnSelfRoomInfo::MergeFrom(const NnSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userinfo.NnSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.roomcode().size() > 0) {

    roomcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomcode_);
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.createuid() != 0) {
    set_createuid(from.createuid());
  }
  if (from.basecoin() != 0) {
    set_basecoin(from.basecoin());
  }
  if (from.basetimes() != 0) {
    set_basetimes(from.basetimes());
  }
  if (from.gamenum() != 0) {
    set_gamenum(from.gamenum());
  }
}

void NnSelfRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userinfo.NnSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NnSelfRoomInfo::CopyFrom(const NnSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userinfo.NnSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NnSelfRoomInfo::IsInitialized() const {

  return true;
}

void NnSelfRoomInfo::Swap(NnSelfRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NnSelfRoomInfo::InternalSwap(NnSelfRoomInfo* other) {
  std::swap(roomid_, other->roomid_);
  roomcode_.Swap(&other->roomcode_);
  std::swap(endtime_, other->endtime_);
  std::swap(createuid_, other->createuid_);
  std::swap(basecoin_, other->basecoin_);
  std::swap(basetimes_, other->basetimes_);
  std::swap(gamenum_, other->gamenum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NnSelfRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NnSelfRoomInfo_descriptor_;
  metadata.reflection = NnSelfRoomInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NnSelfRoomInfo

// optional uint32 roomid = 1;
void NnSelfRoomInfo::clear_roomid() {
  roomid_ = 0u;
}
 ::google::protobuf::uint32 NnSelfRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:userinfo.NnSelfRoomInfo.roomid)
  return roomid_;
}
 void NnSelfRoomInfo::set_roomid(::google::protobuf::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnSelfRoomInfo.roomid)
}

// optional bytes roomcode = 2;
void NnSelfRoomInfo::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NnSelfRoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:userinfo.NnSelfRoomInfo.roomcode)
  return roomcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NnSelfRoomInfo::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userinfo.NnSelfRoomInfo.roomcode)
}
 void NnSelfRoomInfo::set_roomcode(const char* value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userinfo.NnSelfRoomInfo.roomcode)
}
 void NnSelfRoomInfo::set_roomcode(const void* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userinfo.NnSelfRoomInfo.roomcode)
}
 ::std::string* NnSelfRoomInfo::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:userinfo.NnSelfRoomInfo.roomcode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NnSelfRoomInfo::release_roomcode() {
  // @@protoc_insertion_point(field_release:userinfo.NnSelfRoomInfo.roomcode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NnSelfRoomInfo::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:userinfo.NnSelfRoomInfo.roomcode)
}

// optional uint32 endtime = 3;
void NnSelfRoomInfo::clear_endtime() {
  endtime_ = 0u;
}
 ::google::protobuf::uint32 NnSelfRoomInfo::endtime() const {
  // @@protoc_insertion_point(field_get:userinfo.NnSelfRoomInfo.endtime)
  return endtime_;
}
 void NnSelfRoomInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnSelfRoomInfo.endtime)
}

// optional uint32 createuid = 4;
void NnSelfRoomInfo::clear_createuid() {
  createuid_ = 0u;
}
 ::google::protobuf::uint32 NnSelfRoomInfo::createuid() const {
  // @@protoc_insertion_point(field_get:userinfo.NnSelfRoomInfo.createuid)
  return createuid_;
}
 void NnSelfRoomInfo::set_createuid(::google::protobuf::uint32 value) {
  
  createuid_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnSelfRoomInfo.createuid)
}

// optional uint32 basecoin = 5;
void NnSelfRoomInfo::clear_basecoin() {
  basecoin_ = 0u;
}
 ::google::protobuf::uint32 NnSelfRoomInfo::basecoin() const {
  // @@protoc_insertion_point(field_get:userinfo.NnSelfRoomInfo.basecoin)
  return basecoin_;
}
 void NnSelfRoomInfo::set_basecoin(::google::protobuf::uint32 value) {
  
  basecoin_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnSelfRoomInfo.basecoin)
}

// optional uint32 basetimes = 6;
void NnSelfRoomInfo::clear_basetimes() {
  basetimes_ = 0u;
}
 ::google::protobuf::uint32 NnSelfRoomInfo::basetimes() const {
  // @@protoc_insertion_point(field_get:userinfo.NnSelfRoomInfo.basetimes)
  return basetimes_;
}
 void NnSelfRoomInfo::set_basetimes(::google::protobuf::uint32 value) {
  
  basetimes_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnSelfRoomInfo.basetimes)
}

// optional uint32 gamenum = 7;
void NnSelfRoomInfo::clear_gamenum() {
  gamenum_ = 0u;
}
 ::google::protobuf::uint32 NnSelfRoomInfo::gamenum() const {
  // @@protoc_insertion_point(field_get:userinfo.NnSelfRoomInfo.gamenum)
  return gamenum_;
}
 void NnSelfRoomInfo::set_gamenum(::google::protobuf::uint32 value) {
  
  gamenum_ = value;
  // @@protoc_insertion_point(field_set:userinfo.NnSelfRoomInfo.gamenum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userinfo

// @@protoc_insertion_point(global_scope)
