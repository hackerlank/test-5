// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong.proto

#ifndef PROTOBUF_mahjong_2eproto__INCLUDED
#define PROTOBUF_mahjong_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mahjong {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mahjong_2eproto();
void protobuf_AssignDesc_mahjong_2eproto();
void protobuf_ShutdownFile_mahjong_2eproto();

class Card;
class HuCardInfo;
class MahjongCoinChangeinfo;
class MahjongDeskResultinfo;
class MahjongDeskUserinfo;
class MahjongDeskinfo;
class MahjongMatchInfo;
class MahjongSelfRoomInfo;
class MahjongUserCoinChinfo;
class MahjongUserOpCardInfo;
class MahjongUserResultinfo;
class ResultPreInfo;

// ===================================================================

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  void Swap(Card* other);

  // implements Message ----------------------------------------------

  inline Card* New() const { return New(NULL); }

  Card* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static Card* default_instance_;
};
// -------------------------------------------------------------------

class MahjongDeskUserinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.MahjongDeskUserinfo) */ {
 public:
  MahjongDeskUserinfo();
  virtual ~MahjongDeskUserinfo();

  MahjongDeskUserinfo(const MahjongDeskUserinfo& from);

  inline MahjongDeskUserinfo& operator=(const MahjongDeskUserinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MahjongDeskUserinfo& default_instance();

  void Swap(MahjongDeskUserinfo* other);

  // implements Message ----------------------------------------------

  inline MahjongDeskUserinfo* New() const { return New(NULL); }

  MahjongDeskUserinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahjongDeskUserinfo& from);
  void MergeFrom(const MahjongDeskUserinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MahjongDeskUserinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional bytes uname = 2;
  void clear_uname();
  static const int kUnameFieldNumber = 2;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  void set_uname(const char* value);
  void set_uname(const void* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // optional uint32 coinnum = 3;
  void clear_coinnum();
  static const int kCoinnumFieldNumber = 3;
  ::google::protobuf::uint32 coinnum() const;
  void set_coinnum(::google::protobuf::uint32 value);

  // optional bytes headurl = 4;
  void clear_headurl();
  static const int kHeadurlFieldNumber = 4;
  const ::std::string& headurl() const;
  void set_headurl(const ::std::string& value);
  void set_headurl(const char* value);
  void set_headurl(const void* value, size_t size);
  ::std::string* mutable_headurl();
  ::std::string* release_headurl();
  void set_allocated_headurl(::std::string* headurl);

  // optional uint32 deskid = 5;
  void clear_deskid();
  static const int kDeskidFieldNumber = 5;
  ::google::protobuf::uint32 deskid() const;
  void set_deskid(::google::protobuf::uint32 value);

  // optional uint32 pos = 6;
  void clear_pos();
  static const int kPosFieldNumber = 6;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // optional uint32 status = 7;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 offline = 8;
  void clear_offline();
  static const int kOfflineFieldNumber = 8;
  ::google::protobuf::uint32 offline() const;
  void set_offline(::google::protobuf::uint32 value);

  // repeated .mahjong.Card poker = 9;
  int poker_size() const;
  void clear_poker();
  static const int kPokerFieldNumber = 9;
  const ::mahjong::Card& poker(int index) const;
  ::mahjong::Card* mutable_poker(int index);
  ::mahjong::Card* add_poker();
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
      mutable_poker();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
      poker() const;

  // optional uint32 gender = 10;
  void clear_gender();
  static const int kGenderFieldNumber = 10;
  ::google::protobuf::uint32 gender() const;
  void set_gender(::google::protobuf::uint32 value);

  // optional uint32 integral = 11;
  void clear_integral();
  static const int kIntegralFieldNumber = 11;
  ::google::protobuf::uint32 integral() const;
  void set_integral(::google::protobuf::uint32 value);

  // optional int32 gamevalue = 12;
  void clear_gamevalue();
  static const int kGamevalueFieldNumber = 12;
  ::google::protobuf::int32 gamevalue() const;
  void set_gamevalue(::google::protobuf::int32 value);

  // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 13;
  int opcardinfo_size() const;
  void clear_opcardinfo();
  static const int kOpcardinfoFieldNumber = 13;
  const ::mahjong::MahjongUserOpCardInfo& opcardinfo(int index) const;
  ::mahjong::MahjongUserOpCardInfo* mutable_opcardinfo(int index);
  ::mahjong::MahjongUserOpCardInfo* add_opcardinfo();
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >*
      mutable_opcardinfo();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >&
      opcardinfo() const;

  // repeated .mahjong.Card putpoker = 14;
  int putpoker_size() const;
  void clear_putpoker();
  static const int kPutpokerFieldNumber = 14;
  const ::mahjong::Card& putpoker(int index) const;
  ::mahjong::Card* mutable_putpoker(int index);
  ::mahjong::Card* add_putpoker();
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
      mutable_putpoker();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
      putpoker() const;

  // optional uint32 lacktype = 15;
  void clear_lacktype();
  static const int kLacktypeFieldNumber = 15;
  ::google::protobuf::uint32 lacktype() const;
  void set_lacktype(::google::protobuf::uint32 value);

  // repeated .mahjong.Card hupoker = 16;
  int hupoker_size() const;
  void clear_hupoker();
  static const int kHupokerFieldNumber = 16;
  const ::mahjong::Card& hupoker(int index) const;
  ::mahjong::Card* mutable_hupoker(int index);
  ::mahjong::Card* add_hupoker();
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
      mutable_hupoker();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
      hupoker() const;

  // @@protoc_insertion_point(class_scope:mahjong.MahjongDeskUserinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 coinnum_;
  ::google::protobuf::internal::ArenaStringPtr headurl_;
  ::google::protobuf::uint32 deskid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 offline_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card > poker_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 integral_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo > opcardinfo_;
  ::google::protobuf::int32 gamevalue_;
  ::google::protobuf::uint32 lacktype_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card > putpoker_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card > hupoker_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MahjongDeskUserinfo* default_instance_;
};
// -------------------------------------------------------------------

class MahjongDeskinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.MahjongDeskinfo) */ {
 public:
  MahjongDeskinfo();
  virtual ~MahjongDeskinfo();

  MahjongDeskinfo(const MahjongDeskinfo& from);

  inline MahjongDeskinfo& operator=(const MahjongDeskinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MahjongDeskinfo& default_instance();

  void Swap(MahjongDeskinfo* other);

  // implements Message ----------------------------------------------

  inline MahjongDeskinfo* New() const { return New(NULL); }

  MahjongDeskinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahjongDeskinfo& from);
  void MergeFrom(const MahjongDeskinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MahjongDeskinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deskid = 1;
  void clear_deskid();
  static const int kDeskidFieldNumber = 1;
  ::google::protobuf::uint32 deskid() const;
  void set_deskid(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 curpos = 3;
  void clear_curpos();
  static const int kCurposFieldNumber = 3;
  ::google::protobuf::uint32 curpos() const;
  void set_curpos(::google::protobuf::uint32 value);

  // optional uint32 hostpos = 4;
  void clear_hostpos();
  static const int kHostposFieldNumber = 4;
  ::google::protobuf::uint32 hostpos() const;
  void set_hostpos(::google::protobuf::uint32 value);

  // repeated .mahjong.MahjongDeskUserinfo userlist = 5;
  int userlist_size() const;
  void clear_userlist();
  static const int kUserlistFieldNumber = 5;
  const ::mahjong::MahjongDeskUserinfo& userlist(int index) const;
  ::mahjong::MahjongDeskUserinfo* mutable_userlist(int index);
  ::mahjong::MahjongDeskUserinfo* add_userlist();
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongDeskUserinfo >*
      mutable_userlist();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongDeskUserinfo >&
      userlist() const;

  // optional uint32 matchid = 6;
  void clear_matchid();
  static const int kMatchidFieldNumber = 6;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // optional uint32 leftpnum = 7;
  void clear_leftpnum();
  static const int kLeftpnumFieldNumber = 7;
  ::google::protobuf::uint32 leftpnum() const;
  void set_leftpnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong.MahjongDeskinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 deskid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 curpos_;
  ::google::protobuf::uint32 hostpos_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongDeskUserinfo > userlist_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 leftpnum_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MahjongDeskinfo* default_instance_;
};
// -------------------------------------------------------------------

class MahjongUserOpCardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.MahjongUserOpCardInfo) */ {
 public:
  MahjongUserOpCardInfo();
  virtual ~MahjongUserOpCardInfo();

  MahjongUserOpCardInfo(const MahjongUserOpCardInfo& from);

  inline MahjongUserOpCardInfo& operator=(const MahjongUserOpCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MahjongUserOpCardInfo& default_instance();

  void Swap(MahjongUserOpCardInfo* other);

  // implements Message ----------------------------------------------

  inline MahjongUserOpCardInfo* New() const { return New(NULL); }

  MahjongUserOpCardInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahjongUserOpCardInfo& from);
  void MergeFrom(const MahjongUserOpCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MahjongUserOpCardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mahjong.Card poker = 1;
  int poker_size() const;
  void clear_poker();
  static const int kPokerFieldNumber = 1;
  const ::mahjong::Card& poker(int index) const;
  ::mahjong::Card* mutable_poker(int index);
  ::mahjong::Card* add_poker();
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
      mutable_poker();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
      poker() const;

  // optional uint32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 cardvalue = 3;
  void clear_cardvalue();
  static const int kCardvalueFieldNumber = 3;
  ::google::protobuf::uint32 cardvalue() const;
  void set_cardvalue(::google::protobuf::uint32 value);

  // optional uint32 uid = 4;
  void clear_uid();
  static const int kUidFieldNumber = 4;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional int32 oppos = 5;
  void clear_oppos();
  static const int kOpposFieldNumber = 5;
  ::google::protobuf::int32 oppos() const;
  void set_oppos(::google::protobuf::int32 value);

  // optional int32 putpos = 6;
  void clear_putpos();
  static const int kPutposFieldNumber = 6;
  ::google::protobuf::int32 putpos() const;
  void set_putpos(::google::protobuf::int32 value);

  // optional int32 changecoin = 7;
  void clear_changecoin();
  static const int kChangecoinFieldNumber = 7;
  ::google::protobuf::int32 changecoin() const;
  void set_changecoin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong.MahjongUserOpCardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card > poker_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 cardvalue_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 oppos_;
  ::google::protobuf::int32 putpos_;
  ::google::protobuf::int32 changecoin_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MahjongUserOpCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class MahjongDeskResultinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.MahjongDeskResultinfo) */ {
 public:
  MahjongDeskResultinfo();
  virtual ~MahjongDeskResultinfo();

  MahjongDeskResultinfo(const MahjongDeskResultinfo& from);

  inline MahjongDeskResultinfo& operator=(const MahjongDeskResultinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MahjongDeskResultinfo& default_instance();

  void Swap(MahjongDeskResultinfo* other);

  // implements Message ----------------------------------------------

  inline MahjongDeskResultinfo* New() const { return New(NULL); }

  MahjongDeskResultinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahjongDeskResultinfo& from);
  void MergeFrom(const MahjongDeskResultinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MahjongDeskResultinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mahjong.MahjongUserResultinfo userlist = 1;
  int userlist_size() const;
  void clear_userlist();
  static const int kUserlistFieldNumber = 1;
  const ::mahjong::MahjongUserResultinfo& userlist(int index) const;
  ::mahjong::MahjongUserResultinfo* mutable_userlist(int index);
  ::mahjong::MahjongUserResultinfo* add_userlist();
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserResultinfo >*
      mutable_userlist();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserResultinfo >&
      userlist() const;

  // @@protoc_insertion_point(class_scope:mahjong.MahjongDeskResultinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserResultinfo > userlist_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MahjongDeskResultinfo* default_instance_;
};
// -------------------------------------------------------------------

class MahjongUserResultinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.MahjongUserResultinfo) */ {
 public:
  MahjongUserResultinfo();
  virtual ~MahjongUserResultinfo();

  MahjongUserResultinfo(const MahjongUserResultinfo& from);

  inline MahjongUserResultinfo& operator=(const MahjongUserResultinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MahjongUserResultinfo& default_instance();

  void Swap(MahjongUserResultinfo* other);

  // implements Message ----------------------------------------------

  inline MahjongUserResultinfo* New() const { return New(NULL); }

  MahjongUserResultinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahjongUserResultinfo& from);
  void MergeFrom(const MahjongUserResultinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MahjongUserResultinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional int32 value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // optional int32 coin = 5;
  void clear_coin();
  static const int kCoinFieldNumber = 5;
  ::google::protobuf::int32 coin() const;
  void set_coin(::google::protobuf::int32 value);

  // repeated .mahjong.Card usercard = 6;
  int usercard_size() const;
  void clear_usercard();
  static const int kUsercardFieldNumber = 6;
  const ::mahjong::Card& usercard(int index) const;
  ::mahjong::Card* mutable_usercard(int index);
  ::mahjong::Card* add_usercard();
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
      mutable_usercard();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
      usercard() const;

  // optional int32 gamevalue = 7;
  void clear_gamevalue();
  static const int kGamevalueFieldNumber = 7;
  ::google::protobuf::int32 gamevalue() const;
  void set_gamevalue(::google::protobuf::int32 value);

  // optional uint32 rank = 8;
  void clear_rank();
  static const int kRankFieldNumber = 8;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional int32 gangwincoin = 9;
  void clear_gangwincoin();
  static const int kGangwincoinFieldNumber = 9;
  ::google::protobuf::int32 gangwincoin() const;
  void set_gangwincoin(::google::protobuf::int32 value);

  // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 10;
  int opcardinfo_size() const;
  void clear_opcardinfo();
  static const int kOpcardinfoFieldNumber = 10;
  const ::mahjong::MahjongUserOpCardInfo& opcardinfo(int index) const;
  ::mahjong::MahjongUserOpCardInfo* mutable_opcardinfo(int index);
  ::mahjong::MahjongUserOpCardInfo* add_opcardinfo();
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >*
      mutable_opcardinfo();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >&
      opcardinfo() const;

  // repeated .mahjong.HuCardInfo hulist = 11;
  int hulist_size() const;
  void clear_hulist();
  static const int kHulistFieldNumber = 11;
  const ::mahjong::HuCardInfo& hulist(int index) const;
  ::mahjong::HuCardInfo* mutable_hulist(int index);
  ::mahjong::HuCardInfo* add_hulist();
  ::google::protobuf::RepeatedPtrField< ::mahjong::HuCardInfo >*
      mutable_hulist();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::HuCardInfo >&
      hulist() const;

  // repeated .mahjong.ResultPreInfo prelist = 12;
  int prelist_size() const;
  void clear_prelist();
  static const int kPrelistFieldNumber = 12;
  const ::mahjong::ResultPreInfo& prelist(int index) const;
  ::mahjong::ResultPreInfo* mutable_prelist(int index);
  ::mahjong::ResultPreInfo* add_prelist();
  ::google::protobuf::RepeatedPtrField< ::mahjong::ResultPreInfo >*
      mutable_prelist();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::ResultPreInfo >&
      prelist() const;

  // @@protoc_insertion_point(class_scope:mahjong.MahjongUserResultinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::Card > usercard_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 gamevalue_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::int32 gangwincoin_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo > opcardinfo_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::HuCardInfo > hulist_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::ResultPreInfo > prelist_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MahjongUserResultinfo* default_instance_;
};
// -------------------------------------------------------------------

class HuCardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.HuCardInfo) */ {
 public:
  HuCardInfo();
  virtual ~HuCardInfo();

  HuCardInfo(const HuCardInfo& from);

  inline HuCardInfo& operator=(const HuCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HuCardInfo& default_instance();

  void Swap(HuCardInfo* other);

  // implements Message ----------------------------------------------

  inline HuCardInfo* New() const { return New(NULL); }

  HuCardInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HuCardInfo& from);
  void MergeFrom(const HuCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HuCardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 cardvalue = 2;
  void clear_cardvalue();
  static const int kCardvalueFieldNumber = 2;
  ::google::protobuf::uint32 cardvalue() const;
  void set_cardvalue(::google::protobuf::uint32 value);

  // optional uint32 uid = 3;
  void clear_uid();
  static const int kUidFieldNumber = 3;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional int32 oppos = 4;
  void clear_oppos();
  static const int kOpposFieldNumber = 4;
  ::google::protobuf::int32 oppos() const;
  void set_oppos(::google::protobuf::int32 value);

  // optional int32 putpos = 5;
  void clear_putpos();
  static const int kPutposFieldNumber = 5;
  ::google::protobuf::int32 putpos() const;
  void set_putpos(::google::protobuf::int32 value);

  // optional int32 changecoin = 6;
  void clear_changecoin();
  static const int kChangecoinFieldNumber = 6;
  ::google::protobuf::int32 changecoin() const;
  void set_changecoin(::google::protobuf::int32 value);

  // optional uint32 gangnum = 7;
  void clear_gangnum();
  static const int kGangnumFieldNumber = 7;
  ::google::protobuf::uint32 gangnum() const;
  void set_gangnum(::google::protobuf::uint32 value);

  // optional uint32 othertype = 8;
  void clear_othertype();
  static const int kOthertypeFieldNumber = 8;
  ::google::protobuf::uint32 othertype() const;
  void set_othertype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong.HuCardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 cardvalue_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 oppos_;
  ::google::protobuf::int32 putpos_;
  ::google::protobuf::int32 changecoin_;
  ::google::protobuf::uint32 gangnum_;
  ::google::protobuf::uint32 othertype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static HuCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class ResultPreInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.ResultPreInfo) */ {
 public:
  ResultPreInfo();
  virtual ~ResultPreInfo();

  ResultPreInfo(const ResultPreInfo& from);

  inline ResultPreInfo& operator=(const ResultPreInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultPreInfo& default_instance();

  void Swap(ResultPreInfo* other);

  // implements Message ----------------------------------------------

  inline ResultPreInfo* New() const { return New(NULL); }

  ResultPreInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultPreInfo& from);
  void MergeFrom(const ResultPreInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResultPreInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional int32 oppos = 2;
  void clear_oppos();
  static const int kOpposFieldNumber = 2;
  ::google::protobuf::int32 oppos() const;
  void set_oppos(::google::protobuf::int32 value);

  // optional int32 putpos = 3;
  void clear_putpos();
  static const int kPutposFieldNumber = 3;
  ::google::protobuf::int32 putpos() const;
  void set_putpos(::google::protobuf::int32 value);

  // optional int32 changecoin = 4;
  void clear_changecoin();
  static const int kChangecoinFieldNumber = 4;
  ::google::protobuf::int32 changecoin() const;
  void set_changecoin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong.ResultPreInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::int32 oppos_;
  ::google::protobuf::int32 putpos_;
  ::google::protobuf::int32 changecoin_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static ResultPreInfo* default_instance_;
};
// -------------------------------------------------------------------

class MahjongCoinChangeinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.MahjongCoinChangeinfo) */ {
 public:
  MahjongCoinChangeinfo();
  virtual ~MahjongCoinChangeinfo();

  MahjongCoinChangeinfo(const MahjongCoinChangeinfo& from);

  inline MahjongCoinChangeinfo& operator=(const MahjongCoinChangeinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MahjongCoinChangeinfo& default_instance();

  void Swap(MahjongCoinChangeinfo* other);

  // implements Message ----------------------------------------------

  inline MahjongCoinChangeinfo* New() const { return New(NULL); }

  MahjongCoinChangeinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahjongCoinChangeinfo& from);
  void MergeFrom(const MahjongCoinChangeinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MahjongCoinChangeinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mahjong.MahjongUserCoinChinfo userlist = 1;
  int userlist_size() const;
  void clear_userlist();
  static const int kUserlistFieldNumber = 1;
  const ::mahjong::MahjongUserCoinChinfo& userlist(int index) const;
  ::mahjong::MahjongUserCoinChinfo* mutable_userlist(int index);
  ::mahjong::MahjongUserCoinChinfo* add_userlist();
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserCoinChinfo >*
      mutable_userlist();
  const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserCoinChinfo >&
      userlist() const;

  // @@protoc_insertion_point(class_scope:mahjong.MahjongCoinChangeinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserCoinChinfo > userlist_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MahjongCoinChangeinfo* default_instance_;
};
// -------------------------------------------------------------------

class MahjongUserCoinChinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.MahjongUserCoinChinfo) */ {
 public:
  MahjongUserCoinChinfo();
  virtual ~MahjongUserCoinChinfo();

  MahjongUserCoinChinfo(const MahjongUserCoinChinfo& from);

  inline MahjongUserCoinChinfo& operator=(const MahjongUserCoinChinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MahjongUserCoinChinfo& default_instance();

  void Swap(MahjongUserCoinChinfo* other);

  // implements Message ----------------------------------------------

  inline MahjongUserCoinChinfo* New() const { return New(NULL); }

  MahjongUserCoinChinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahjongUserCoinChinfo& from);
  void MergeFrom(const MahjongUserCoinChinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MahjongUserCoinChinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional int32 value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // optional uint32 type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong.MahjongUserCoinChinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MahjongUserCoinChinfo* default_instance_;
};
// -------------------------------------------------------------------

class MahjongMatchInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.MahjongMatchInfo) */ {
 public:
  MahjongMatchInfo();
  virtual ~MahjongMatchInfo();

  MahjongMatchInfo(const MahjongMatchInfo& from);

  inline MahjongMatchInfo& operator=(const MahjongMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MahjongMatchInfo& default_instance();

  void Swap(MahjongMatchInfo* other);

  // implements Message ----------------------------------------------

  inline MahjongMatchInfo* New() const { return New(NULL); }

  MahjongMatchInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahjongMatchInfo& from);
  void MergeFrom(const MahjongMatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MahjongMatchInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // optional uint32 trunindex = 2;
  void clear_trunindex();
  static const int kTrunindexFieldNumber = 2;
  ::google::protobuf::uint32 trunindex() const;
  void set_trunindex(::google::protobuf::uint32 value);

  // optional uint32 curnum = 3;
  void clear_curnum();
  static const int kCurnumFieldNumber = 3;
  ::google::protobuf::uint32 curnum() const;
  void set_curnum(::google::protobuf::uint32 value);

  // optional int32 gamevalue = 4;
  void clear_gamevalue();
  static const int kGamevalueFieldNumber = 4;
  ::google::protobuf::int32 gamevalue() const;
  void set_gamevalue(::google::protobuf::int32 value);

  // optional int32 ifmatch = 5;
  void clear_ifmatch();
  static const int kIfmatchFieldNumber = 5;
  ::google::protobuf::int32 ifmatch() const;
  void set_ifmatch(::google::protobuf::int32 value);

  // optional uint32 leftnum = 6;
  void clear_leftnum();
  static const int kLeftnumFieldNumber = 6;
  ::google::protobuf::uint32 leftnum() const;
  void set_leftnum(::google::protobuf::uint32 value);

  // optional uint32 begintime = 7;
  void clear_begintime();
  static const int kBegintimeFieldNumber = 7;
  ::google::protobuf::uint32 begintime() const;
  void set_begintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong.MahjongMatchInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 trunindex_;
  ::google::protobuf::uint32 curnum_;
  ::google::protobuf::int32 gamevalue_;
  ::google::protobuf::int32 ifmatch_;
  ::google::protobuf::uint32 leftnum_;
  ::google::protobuf::uint32 begintime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MahjongMatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class MahjongSelfRoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mahjong.MahjongSelfRoomInfo) */ {
 public:
  MahjongSelfRoomInfo();
  virtual ~MahjongSelfRoomInfo();

  MahjongSelfRoomInfo(const MahjongSelfRoomInfo& from);

  inline MahjongSelfRoomInfo& operator=(const MahjongSelfRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MahjongSelfRoomInfo& default_instance();

  void Swap(MahjongSelfRoomInfo* other);

  // implements Message ----------------------------------------------

  inline MahjongSelfRoomInfo* New() const { return New(NULL); }

  MahjongSelfRoomInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahjongSelfRoomInfo& from);
  void MergeFrom(const MahjongSelfRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MahjongSelfRoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint32 roomid() const;
  void set_roomid(::google::protobuf::uint32 value);

  // optional bytes roomcode = 2;
  void clear_roomcode();
  static const int kRoomcodeFieldNumber = 2;
  const ::std::string& roomcode() const;
  void set_roomcode(const ::std::string& value);
  void set_roomcode(const char* value);
  void set_roomcode(const void* value, size_t size);
  ::std::string* mutable_roomcode();
  ::std::string* release_roomcode();
  void set_allocated_roomcode(::std::string* roomcode);

  // optional uint32 endtime = 3;
  void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  ::google::protobuf::uint32 endtime() const;
  void set_endtime(::google::protobuf::uint32 value);

  // optional uint32 createuid = 4;
  void clear_createuid();
  static const int kCreateuidFieldNumber = 4;
  ::google::protobuf::uint32 createuid() const;
  void set_createuid(::google::protobuf::uint32 value);

  // optional uint32 basecoin = 5;
  void clear_basecoin();
  static const int kBasecoinFieldNumber = 5;
  ::google::protobuf::uint32 basecoin() const;
  void set_basecoin(::google::protobuf::uint32 value);

  // optional uint32 playcount = 6;
  void clear_playcount();
  static const int kPlaycountFieldNumber = 6;
  ::google::protobuf::uint32 playcount() const;
  void set_playcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong.MahjongSelfRoomInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr roomcode_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::uint32 createuid_;
  ::google::protobuf::uint32 basecoin_;
  ::google::protobuf::uint32 playcount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MahjongSelfRoomInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional uint32 value = 1;
inline void Card::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 Card::value() const {
  // @@protoc_insertion_point(field_get:mahjong.Card.value)
  return value_;
}
inline void Card::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:mahjong.Card.value)
}

// -------------------------------------------------------------------

// MahjongDeskUserinfo

// optional uint32 uid = 1;
inline void MahjongDeskUserinfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.uid)
  return uid_;
}
inline void MahjongDeskUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.uid)
}

// optional bytes uname = 2;
inline void MahjongDeskUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MahjongDeskUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MahjongDeskUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.uname)
}
inline void MahjongDeskUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mahjong.MahjongDeskUserinfo.uname)
}
inline void MahjongDeskUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mahjong.MahjongDeskUserinfo.uname)
}
inline ::std::string* MahjongDeskUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MahjongDeskUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:mahjong.MahjongDeskUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MahjongDeskUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:mahjong.MahjongDeskUserinfo.uname)
}

// optional uint32 coinnum = 3;
inline void MahjongDeskUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.coinnum)
  return coinnum_;
}
inline void MahjongDeskUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.coinnum)
}

// optional bytes headurl = 4;
inline void MahjongDeskUserinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MahjongDeskUserinfo::headurl() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MahjongDeskUserinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.headurl)
}
inline void MahjongDeskUserinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mahjong.MahjongDeskUserinfo.headurl)
}
inline void MahjongDeskUserinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mahjong.MahjongDeskUserinfo.headurl)
}
inline ::std::string* MahjongDeskUserinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MahjongDeskUserinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:mahjong.MahjongDeskUserinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MahjongDeskUserinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:mahjong.MahjongDeskUserinfo.headurl)
}

// optional uint32 deskid = 5;
inline void MahjongDeskUserinfo::clear_deskid() {
  deskid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskUserinfo::deskid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.deskid)
  return deskid_;
}
inline void MahjongDeskUserinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.deskid)
}

// optional uint32 pos = 6;
inline void MahjongDeskUserinfo::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskUserinfo::pos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.pos)
  return pos_;
}
inline void MahjongDeskUserinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.pos)
}

// optional uint32 status = 7;
inline void MahjongDeskUserinfo::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskUserinfo::status() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.status)
  return status_;
}
inline void MahjongDeskUserinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.status)
}

// optional uint32 offline = 8;
inline void MahjongDeskUserinfo::clear_offline() {
  offline_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskUserinfo::offline() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.offline)
  return offline_;
}
inline void MahjongDeskUserinfo::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.offline)
}

// repeated .mahjong.Card poker = 9;
inline int MahjongDeskUserinfo::poker_size() const {
  return poker_.size();
}
inline void MahjongDeskUserinfo::clear_poker() {
  poker_.Clear();
}
inline const ::mahjong::Card& MahjongDeskUserinfo::poker(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.poker)
  return poker_.Get(index);
}
inline ::mahjong::Card* MahjongDeskUserinfo::mutable_poker(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.poker)
  return poker_.Mutable(index);
}
inline ::mahjong::Card* MahjongDeskUserinfo::add_poker() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskUserinfo.poker)
  return poker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongDeskUserinfo::mutable_poker() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskUserinfo.poker)
  return &poker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongDeskUserinfo::poker() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskUserinfo.poker)
  return poker_;
}

// optional uint32 gender = 10;
inline void MahjongDeskUserinfo::clear_gender() {
  gender_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.gender)
  return gender_;
}
inline void MahjongDeskUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.gender)
}

// optional uint32 integral = 11;
inline void MahjongDeskUserinfo::clear_integral() {
  integral_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskUserinfo::integral() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.integral)
  return integral_;
}
inline void MahjongDeskUserinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.integral)
}

// optional int32 gamevalue = 12;
inline void MahjongDeskUserinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
inline ::google::protobuf::int32 MahjongDeskUserinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.gamevalue)
  return gamevalue_;
}
inline void MahjongDeskUserinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.gamevalue)
}

// repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 13;
inline int MahjongDeskUserinfo::opcardinfo_size() const {
  return opcardinfo_.size();
}
inline void MahjongDeskUserinfo::clear_opcardinfo() {
  opcardinfo_.Clear();
}
inline const ::mahjong::MahjongUserOpCardInfo& MahjongDeskUserinfo::opcardinfo(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.opcardinfo)
  return opcardinfo_.Get(index);
}
inline ::mahjong::MahjongUserOpCardInfo* MahjongDeskUserinfo::mutable_opcardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.opcardinfo)
  return opcardinfo_.Mutable(index);
}
inline ::mahjong::MahjongUserOpCardInfo* MahjongDeskUserinfo::add_opcardinfo() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskUserinfo.opcardinfo)
  return opcardinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >*
MahjongDeskUserinfo::mutable_opcardinfo() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskUserinfo.opcardinfo)
  return &opcardinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >&
MahjongDeskUserinfo::opcardinfo() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskUserinfo.opcardinfo)
  return opcardinfo_;
}

// repeated .mahjong.Card putpoker = 14;
inline int MahjongDeskUserinfo::putpoker_size() const {
  return putpoker_.size();
}
inline void MahjongDeskUserinfo::clear_putpoker() {
  putpoker_.Clear();
}
inline const ::mahjong::Card& MahjongDeskUserinfo::putpoker(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.putpoker)
  return putpoker_.Get(index);
}
inline ::mahjong::Card* MahjongDeskUserinfo::mutable_putpoker(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.putpoker)
  return putpoker_.Mutable(index);
}
inline ::mahjong::Card* MahjongDeskUserinfo::add_putpoker() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskUserinfo.putpoker)
  return putpoker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongDeskUserinfo::mutable_putpoker() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskUserinfo.putpoker)
  return &putpoker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongDeskUserinfo::putpoker() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskUserinfo.putpoker)
  return putpoker_;
}

// optional uint32 lacktype = 15;
inline void MahjongDeskUserinfo::clear_lacktype() {
  lacktype_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskUserinfo::lacktype() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.lacktype)
  return lacktype_;
}
inline void MahjongDeskUserinfo::set_lacktype(::google::protobuf::uint32 value) {
  
  lacktype_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.lacktype)
}

// repeated .mahjong.Card hupoker = 16;
inline int MahjongDeskUserinfo::hupoker_size() const {
  return hupoker_.size();
}
inline void MahjongDeskUserinfo::clear_hupoker() {
  hupoker_.Clear();
}
inline const ::mahjong::Card& MahjongDeskUserinfo::hupoker(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.hupoker)
  return hupoker_.Get(index);
}
inline ::mahjong::Card* MahjongDeskUserinfo::mutable_hupoker(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.hupoker)
  return hupoker_.Mutable(index);
}
inline ::mahjong::Card* MahjongDeskUserinfo::add_hupoker() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskUserinfo.hupoker)
  return hupoker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongDeskUserinfo::mutable_hupoker() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskUserinfo.hupoker)
  return &hupoker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongDeskUserinfo::hupoker() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskUserinfo.hupoker)
  return hupoker_;
}

// -------------------------------------------------------------------

// MahjongDeskinfo

// optional uint32 deskid = 1;
inline void MahjongDeskinfo::clear_deskid() {
  deskid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskinfo::deskid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.deskid)
  return deskid_;
}
inline void MahjongDeskinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.deskid)
}

// optional uint32 status = 2;
inline void MahjongDeskinfo::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskinfo::status() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.status)
  return status_;
}
inline void MahjongDeskinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.status)
}

// optional uint32 curpos = 3;
inline void MahjongDeskinfo::clear_curpos() {
  curpos_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskinfo::curpos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.curpos)
  return curpos_;
}
inline void MahjongDeskinfo::set_curpos(::google::protobuf::uint32 value) {
  
  curpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.curpos)
}

// optional uint32 hostpos = 4;
inline void MahjongDeskinfo::clear_hostpos() {
  hostpos_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskinfo::hostpos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.hostpos)
  return hostpos_;
}
inline void MahjongDeskinfo::set_hostpos(::google::protobuf::uint32 value) {
  
  hostpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.hostpos)
}

// repeated .mahjong.MahjongDeskUserinfo userlist = 5;
inline int MahjongDeskinfo::userlist_size() const {
  return userlist_.size();
}
inline void MahjongDeskinfo::clear_userlist() {
  userlist_.Clear();
}
inline const ::mahjong::MahjongDeskUserinfo& MahjongDeskinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.userlist)
  return userlist_.Get(index);
}
inline ::mahjong::MahjongDeskUserinfo* MahjongDeskinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskinfo.userlist)
  return userlist_.Mutable(index);
}
inline ::mahjong::MahjongDeskUserinfo* MahjongDeskinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskinfo.userlist)
  return userlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongDeskUserinfo >*
MahjongDeskinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskinfo.userlist)
  return &userlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongDeskUserinfo >&
MahjongDeskinfo::userlist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskinfo.userlist)
  return userlist_;
}

// optional uint32 matchid = 6;
inline void MahjongDeskinfo::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskinfo::matchid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.matchid)
  return matchid_;
}
inline void MahjongDeskinfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.matchid)
}

// optional uint32 leftpnum = 7;
inline void MahjongDeskinfo::clear_leftpnum() {
  leftpnum_ = 0u;
}
inline ::google::protobuf::uint32 MahjongDeskinfo::leftpnum() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.leftpnum)
  return leftpnum_;
}
inline void MahjongDeskinfo::set_leftpnum(::google::protobuf::uint32 value) {
  
  leftpnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.leftpnum)
}

// -------------------------------------------------------------------

// MahjongUserOpCardInfo

// repeated .mahjong.Card poker = 1;
inline int MahjongUserOpCardInfo::poker_size() const {
  return poker_.size();
}
inline void MahjongUserOpCardInfo::clear_poker() {
  poker_.Clear();
}
inline const ::mahjong::Card& MahjongUserOpCardInfo::poker(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.poker)
  return poker_.Get(index);
}
inline ::mahjong::Card* MahjongUserOpCardInfo::mutable_poker(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserOpCardInfo.poker)
  return poker_.Mutable(index);
}
inline ::mahjong::Card* MahjongUserOpCardInfo::add_poker() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserOpCardInfo.poker)
  return poker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongUserOpCardInfo::mutable_poker() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserOpCardInfo.poker)
  return &poker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongUserOpCardInfo::poker() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserOpCardInfo.poker)
  return poker_;
}

// optional uint32 type = 2;
inline void MahjongUserOpCardInfo::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserOpCardInfo::type() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.type)
  return type_;
}
inline void MahjongUserOpCardInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.type)
}

// optional uint32 cardvalue = 3;
inline void MahjongUserOpCardInfo::clear_cardvalue() {
  cardvalue_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserOpCardInfo::cardvalue() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.cardvalue)
  return cardvalue_;
}
inline void MahjongUserOpCardInfo::set_cardvalue(::google::protobuf::uint32 value) {
  
  cardvalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.cardvalue)
}

// optional uint32 uid = 4;
inline void MahjongUserOpCardInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserOpCardInfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.uid)
  return uid_;
}
inline void MahjongUserOpCardInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.uid)
}

// optional int32 oppos = 5;
inline void MahjongUserOpCardInfo::clear_oppos() {
  oppos_ = 0;
}
inline ::google::protobuf::int32 MahjongUserOpCardInfo::oppos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.oppos)
  return oppos_;
}
inline void MahjongUserOpCardInfo::set_oppos(::google::protobuf::int32 value) {
  
  oppos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.oppos)
}

// optional int32 putpos = 6;
inline void MahjongUserOpCardInfo::clear_putpos() {
  putpos_ = 0;
}
inline ::google::protobuf::int32 MahjongUserOpCardInfo::putpos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.putpos)
  return putpos_;
}
inline void MahjongUserOpCardInfo::set_putpos(::google::protobuf::int32 value) {
  
  putpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.putpos)
}

// optional int32 changecoin = 7;
inline void MahjongUserOpCardInfo::clear_changecoin() {
  changecoin_ = 0;
}
inline ::google::protobuf::int32 MahjongUserOpCardInfo::changecoin() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.changecoin)
  return changecoin_;
}
inline void MahjongUserOpCardInfo::set_changecoin(::google::protobuf::int32 value) {
  
  changecoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.changecoin)
}

// -------------------------------------------------------------------

// MahjongDeskResultinfo

// repeated .mahjong.MahjongUserResultinfo userlist = 1;
inline int MahjongDeskResultinfo::userlist_size() const {
  return userlist_.size();
}
inline void MahjongDeskResultinfo::clear_userlist() {
  userlist_.Clear();
}
inline const ::mahjong::MahjongUserResultinfo& MahjongDeskResultinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskResultinfo.userlist)
  return userlist_.Get(index);
}
inline ::mahjong::MahjongUserResultinfo* MahjongDeskResultinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskResultinfo.userlist)
  return userlist_.Mutable(index);
}
inline ::mahjong::MahjongUserResultinfo* MahjongDeskResultinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskResultinfo.userlist)
  return userlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserResultinfo >*
MahjongDeskResultinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskResultinfo.userlist)
  return &userlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserResultinfo >&
MahjongDeskResultinfo::userlist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskResultinfo.userlist)
  return userlist_;
}

// -------------------------------------------------------------------

// MahjongUserResultinfo

// optional uint32 uid = 1;
inline void MahjongUserResultinfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserResultinfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.uid)
  return uid_;
}
inline void MahjongUserResultinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.uid)
}

// optional uint32 pos = 2;
inline void MahjongUserResultinfo::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserResultinfo::pos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.pos)
  return pos_;
}
inline void MahjongUserResultinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.pos)
}

// optional uint32 result = 3;
inline void MahjongUserResultinfo::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserResultinfo::result() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.result)
  return result_;
}
inline void MahjongUserResultinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.result)
}

// optional int32 value = 4;
inline void MahjongUserResultinfo::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 MahjongUserResultinfo::value() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.value)
  return value_;
}
inline void MahjongUserResultinfo::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.value)
}

// optional int32 coin = 5;
inline void MahjongUserResultinfo::clear_coin() {
  coin_ = 0;
}
inline ::google::protobuf::int32 MahjongUserResultinfo::coin() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.coin)
  return coin_;
}
inline void MahjongUserResultinfo::set_coin(::google::protobuf::int32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.coin)
}

// repeated .mahjong.Card usercard = 6;
inline int MahjongUserResultinfo::usercard_size() const {
  return usercard_.size();
}
inline void MahjongUserResultinfo::clear_usercard() {
  usercard_.Clear();
}
inline const ::mahjong::Card& MahjongUserResultinfo::usercard(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.usercard)
  return usercard_.Get(index);
}
inline ::mahjong::Card* MahjongUserResultinfo::mutable_usercard(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserResultinfo.usercard)
  return usercard_.Mutable(index);
}
inline ::mahjong::Card* MahjongUserResultinfo::add_usercard() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserResultinfo.usercard)
  return usercard_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongUserResultinfo::mutable_usercard() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserResultinfo.usercard)
  return &usercard_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongUserResultinfo::usercard() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserResultinfo.usercard)
  return usercard_;
}

// optional int32 gamevalue = 7;
inline void MahjongUserResultinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
inline ::google::protobuf::int32 MahjongUserResultinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.gamevalue)
  return gamevalue_;
}
inline void MahjongUserResultinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.gamevalue)
}

// optional uint32 rank = 8;
inline void MahjongUserResultinfo::clear_rank() {
  rank_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserResultinfo::rank() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.rank)
  return rank_;
}
inline void MahjongUserResultinfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.rank)
}

// optional int32 gangwincoin = 9;
inline void MahjongUserResultinfo::clear_gangwincoin() {
  gangwincoin_ = 0;
}
inline ::google::protobuf::int32 MahjongUserResultinfo::gangwincoin() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.gangwincoin)
  return gangwincoin_;
}
inline void MahjongUserResultinfo::set_gangwincoin(::google::protobuf::int32 value) {
  
  gangwincoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.gangwincoin)
}

// repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 10;
inline int MahjongUserResultinfo::opcardinfo_size() const {
  return opcardinfo_.size();
}
inline void MahjongUserResultinfo::clear_opcardinfo() {
  opcardinfo_.Clear();
}
inline const ::mahjong::MahjongUserOpCardInfo& MahjongUserResultinfo::opcardinfo(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.opcardinfo)
  return opcardinfo_.Get(index);
}
inline ::mahjong::MahjongUserOpCardInfo* MahjongUserResultinfo::mutable_opcardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserResultinfo.opcardinfo)
  return opcardinfo_.Mutable(index);
}
inline ::mahjong::MahjongUserOpCardInfo* MahjongUserResultinfo::add_opcardinfo() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserResultinfo.opcardinfo)
  return opcardinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >*
MahjongUserResultinfo::mutable_opcardinfo() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserResultinfo.opcardinfo)
  return &opcardinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >&
MahjongUserResultinfo::opcardinfo() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserResultinfo.opcardinfo)
  return opcardinfo_;
}

// repeated .mahjong.HuCardInfo hulist = 11;
inline int MahjongUserResultinfo::hulist_size() const {
  return hulist_.size();
}
inline void MahjongUserResultinfo::clear_hulist() {
  hulist_.Clear();
}
inline const ::mahjong::HuCardInfo& MahjongUserResultinfo::hulist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.hulist)
  return hulist_.Get(index);
}
inline ::mahjong::HuCardInfo* MahjongUserResultinfo::mutable_hulist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserResultinfo.hulist)
  return hulist_.Mutable(index);
}
inline ::mahjong::HuCardInfo* MahjongUserResultinfo::add_hulist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserResultinfo.hulist)
  return hulist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::HuCardInfo >*
MahjongUserResultinfo::mutable_hulist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserResultinfo.hulist)
  return &hulist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::HuCardInfo >&
MahjongUserResultinfo::hulist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserResultinfo.hulist)
  return hulist_;
}

// repeated .mahjong.ResultPreInfo prelist = 12;
inline int MahjongUserResultinfo::prelist_size() const {
  return prelist_.size();
}
inline void MahjongUserResultinfo::clear_prelist() {
  prelist_.Clear();
}
inline const ::mahjong::ResultPreInfo& MahjongUserResultinfo::prelist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.prelist)
  return prelist_.Get(index);
}
inline ::mahjong::ResultPreInfo* MahjongUserResultinfo::mutable_prelist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserResultinfo.prelist)
  return prelist_.Mutable(index);
}
inline ::mahjong::ResultPreInfo* MahjongUserResultinfo::add_prelist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserResultinfo.prelist)
  return prelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::ResultPreInfo >*
MahjongUserResultinfo::mutable_prelist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserResultinfo.prelist)
  return &prelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::ResultPreInfo >&
MahjongUserResultinfo::prelist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserResultinfo.prelist)
  return prelist_;
}

// -------------------------------------------------------------------

// HuCardInfo

// optional uint32 type = 1;
inline void HuCardInfo::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 HuCardInfo::type() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.type)
  return type_;
}
inline void HuCardInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.type)
}

// optional uint32 cardvalue = 2;
inline void HuCardInfo::clear_cardvalue() {
  cardvalue_ = 0u;
}
inline ::google::protobuf::uint32 HuCardInfo::cardvalue() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.cardvalue)
  return cardvalue_;
}
inline void HuCardInfo::set_cardvalue(::google::protobuf::uint32 value) {
  
  cardvalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.cardvalue)
}

// optional uint32 uid = 3;
inline void HuCardInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 HuCardInfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.uid)
  return uid_;
}
inline void HuCardInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.uid)
}

// optional int32 oppos = 4;
inline void HuCardInfo::clear_oppos() {
  oppos_ = 0;
}
inline ::google::protobuf::int32 HuCardInfo::oppos() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.oppos)
  return oppos_;
}
inline void HuCardInfo::set_oppos(::google::protobuf::int32 value) {
  
  oppos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.oppos)
}

// optional int32 putpos = 5;
inline void HuCardInfo::clear_putpos() {
  putpos_ = 0;
}
inline ::google::protobuf::int32 HuCardInfo::putpos() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.putpos)
  return putpos_;
}
inline void HuCardInfo::set_putpos(::google::protobuf::int32 value) {
  
  putpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.putpos)
}

// optional int32 changecoin = 6;
inline void HuCardInfo::clear_changecoin() {
  changecoin_ = 0;
}
inline ::google::protobuf::int32 HuCardInfo::changecoin() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.changecoin)
  return changecoin_;
}
inline void HuCardInfo::set_changecoin(::google::protobuf::int32 value) {
  
  changecoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.changecoin)
}

// optional uint32 gangnum = 7;
inline void HuCardInfo::clear_gangnum() {
  gangnum_ = 0u;
}
inline ::google::protobuf::uint32 HuCardInfo::gangnum() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.gangnum)
  return gangnum_;
}
inline void HuCardInfo::set_gangnum(::google::protobuf::uint32 value) {
  
  gangnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.gangnum)
}

// optional uint32 othertype = 8;
inline void HuCardInfo::clear_othertype() {
  othertype_ = 0u;
}
inline ::google::protobuf::uint32 HuCardInfo::othertype() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.othertype)
  return othertype_;
}
inline void HuCardInfo::set_othertype(::google::protobuf::uint32 value) {
  
  othertype_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.othertype)
}

// -------------------------------------------------------------------

// ResultPreInfo

// optional uint32 type = 1;
inline void ResultPreInfo::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 ResultPreInfo::type() const {
  // @@protoc_insertion_point(field_get:mahjong.ResultPreInfo.type)
  return type_;
}
inline void ResultPreInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong.ResultPreInfo.type)
}

// optional int32 oppos = 2;
inline void ResultPreInfo::clear_oppos() {
  oppos_ = 0;
}
inline ::google::protobuf::int32 ResultPreInfo::oppos() const {
  // @@protoc_insertion_point(field_get:mahjong.ResultPreInfo.oppos)
  return oppos_;
}
inline void ResultPreInfo::set_oppos(::google::protobuf::int32 value) {
  
  oppos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.ResultPreInfo.oppos)
}

// optional int32 putpos = 3;
inline void ResultPreInfo::clear_putpos() {
  putpos_ = 0;
}
inline ::google::protobuf::int32 ResultPreInfo::putpos() const {
  // @@protoc_insertion_point(field_get:mahjong.ResultPreInfo.putpos)
  return putpos_;
}
inline void ResultPreInfo::set_putpos(::google::protobuf::int32 value) {
  
  putpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.ResultPreInfo.putpos)
}

// optional int32 changecoin = 4;
inline void ResultPreInfo::clear_changecoin() {
  changecoin_ = 0;
}
inline ::google::protobuf::int32 ResultPreInfo::changecoin() const {
  // @@protoc_insertion_point(field_get:mahjong.ResultPreInfo.changecoin)
  return changecoin_;
}
inline void ResultPreInfo::set_changecoin(::google::protobuf::int32 value) {
  
  changecoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.ResultPreInfo.changecoin)
}

// -------------------------------------------------------------------

// MahjongCoinChangeinfo

// repeated .mahjong.MahjongUserCoinChinfo userlist = 1;
inline int MahjongCoinChangeinfo::userlist_size() const {
  return userlist_.size();
}
inline void MahjongCoinChangeinfo::clear_userlist() {
  userlist_.Clear();
}
inline const ::mahjong::MahjongUserCoinChinfo& MahjongCoinChangeinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongCoinChangeinfo.userlist)
  return userlist_.Get(index);
}
inline ::mahjong::MahjongUserCoinChinfo* MahjongCoinChangeinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongCoinChangeinfo.userlist)
  return userlist_.Mutable(index);
}
inline ::mahjong::MahjongUserCoinChinfo* MahjongCoinChangeinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongCoinChangeinfo.userlist)
  return userlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserCoinChinfo >*
MahjongCoinChangeinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongCoinChangeinfo.userlist)
  return &userlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserCoinChinfo >&
MahjongCoinChangeinfo::userlist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongCoinChangeinfo.userlist)
  return userlist_;
}

// -------------------------------------------------------------------

// MahjongUserCoinChinfo

// optional uint32 uid = 1;
inline void MahjongUserCoinChinfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserCoinChinfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.uid)
  return uid_;
}
inline void MahjongUserCoinChinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.uid)
}

// optional uint32 pos = 2;
inline void MahjongUserCoinChinfo::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserCoinChinfo::pos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.pos)
  return pos_;
}
inline void MahjongUserCoinChinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.pos)
}

// optional uint32 result = 3;
inline void MahjongUserCoinChinfo::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserCoinChinfo::result() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.result)
  return result_;
}
inline void MahjongUserCoinChinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.result)
}

// optional int32 value = 4;
inline void MahjongUserCoinChinfo::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 MahjongUserCoinChinfo::value() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.value)
  return value_;
}
inline void MahjongUserCoinChinfo::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.value)
}

// optional uint32 type = 5;
inline void MahjongUserCoinChinfo::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 MahjongUserCoinChinfo::type() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.type)
  return type_;
}
inline void MahjongUserCoinChinfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.type)
}

// -------------------------------------------------------------------

// MahjongMatchInfo

// optional uint32 matchid = 1;
inline void MahjongMatchInfo::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongMatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.matchid)
  return matchid_;
}
inline void MahjongMatchInfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.matchid)
}

// optional uint32 trunindex = 2;
inline void MahjongMatchInfo::clear_trunindex() {
  trunindex_ = 0u;
}
inline ::google::protobuf::uint32 MahjongMatchInfo::trunindex() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.trunindex)
  return trunindex_;
}
inline void MahjongMatchInfo::set_trunindex(::google::protobuf::uint32 value) {
  
  trunindex_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.trunindex)
}

// optional uint32 curnum = 3;
inline void MahjongMatchInfo::clear_curnum() {
  curnum_ = 0u;
}
inline ::google::protobuf::uint32 MahjongMatchInfo::curnum() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.curnum)
  return curnum_;
}
inline void MahjongMatchInfo::set_curnum(::google::protobuf::uint32 value) {
  
  curnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.curnum)
}

// optional int32 gamevalue = 4;
inline void MahjongMatchInfo::clear_gamevalue() {
  gamevalue_ = 0;
}
inline ::google::protobuf::int32 MahjongMatchInfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.gamevalue)
  return gamevalue_;
}
inline void MahjongMatchInfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.gamevalue)
}

// optional int32 ifmatch = 5;
inline void MahjongMatchInfo::clear_ifmatch() {
  ifmatch_ = 0;
}
inline ::google::protobuf::int32 MahjongMatchInfo::ifmatch() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.ifmatch)
  return ifmatch_;
}
inline void MahjongMatchInfo::set_ifmatch(::google::protobuf::int32 value) {
  
  ifmatch_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.ifmatch)
}

// optional uint32 leftnum = 6;
inline void MahjongMatchInfo::clear_leftnum() {
  leftnum_ = 0u;
}
inline ::google::protobuf::uint32 MahjongMatchInfo::leftnum() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.leftnum)
  return leftnum_;
}
inline void MahjongMatchInfo::set_leftnum(::google::protobuf::uint32 value) {
  
  leftnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.leftnum)
}

// optional uint32 begintime = 7;
inline void MahjongMatchInfo::clear_begintime() {
  begintime_ = 0u;
}
inline ::google::protobuf::uint32 MahjongMatchInfo::begintime() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.begintime)
  return begintime_;
}
inline void MahjongMatchInfo::set_begintime(::google::protobuf::uint32 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.begintime)
}

// -------------------------------------------------------------------

// MahjongSelfRoomInfo

// optional uint32 roomid = 1;
inline void MahjongSelfRoomInfo::clear_roomid() {
  roomid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongSelfRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.roomid)
  return roomid_;
}
inline void MahjongSelfRoomInfo::set_roomid(::google::protobuf::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.roomid)
}

// optional bytes roomcode = 2;
inline void MahjongSelfRoomInfo::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MahjongSelfRoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.roomcode)
  return roomcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MahjongSelfRoomInfo::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.roomcode)
}
inline void MahjongSelfRoomInfo::set_roomcode(const char* value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mahjong.MahjongSelfRoomInfo.roomcode)
}
inline void MahjongSelfRoomInfo::set_roomcode(const void* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mahjong.MahjongSelfRoomInfo.roomcode)
}
inline ::std::string* MahjongSelfRoomInfo::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongSelfRoomInfo.roomcode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MahjongSelfRoomInfo::release_roomcode() {
  // @@protoc_insertion_point(field_release:mahjong.MahjongSelfRoomInfo.roomcode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MahjongSelfRoomInfo::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:mahjong.MahjongSelfRoomInfo.roomcode)
}

// optional uint32 endtime = 3;
inline void MahjongSelfRoomInfo::clear_endtime() {
  endtime_ = 0u;
}
inline ::google::protobuf::uint32 MahjongSelfRoomInfo::endtime() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.endtime)
  return endtime_;
}
inline void MahjongSelfRoomInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.endtime)
}

// optional uint32 createuid = 4;
inline void MahjongSelfRoomInfo::clear_createuid() {
  createuid_ = 0u;
}
inline ::google::protobuf::uint32 MahjongSelfRoomInfo::createuid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.createuid)
  return createuid_;
}
inline void MahjongSelfRoomInfo::set_createuid(::google::protobuf::uint32 value) {
  
  createuid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.createuid)
}

// optional uint32 basecoin = 5;
inline void MahjongSelfRoomInfo::clear_basecoin() {
  basecoin_ = 0u;
}
inline ::google::protobuf::uint32 MahjongSelfRoomInfo::basecoin() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.basecoin)
  return basecoin_;
}
inline void MahjongSelfRoomInfo::set_basecoin(::google::protobuf::uint32 value) {
  
  basecoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.basecoin)
}

// optional uint32 playcount = 6;
inline void MahjongSelfRoomInfo::clear_playcount() {
  playcount_ = 0u;
}
inline ::google::protobuf::uint32 MahjongSelfRoomInfo::playcount() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.playcount)
  return playcount_;
}
inline void MahjongSelfRoomInfo::set_playcount(::google::protobuf::uint32 value) {
  
  playcount_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.playcount)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mahjong

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mahjong_2eproto__INCLUDED
