// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texas.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "texas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace texas {

namespace {

const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasDeskUserinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasDeskUserinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasDeskinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasDeskinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasEdgePool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasEdgePool_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasEdgePoolInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasEdgePoolInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasUserPokerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasUserPokerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasUserPoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasUserPoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasDeskResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasDeskResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasUserResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasUserResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasMatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasMatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TexasSelfRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexasSelfRoomInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_texas_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_texas_2eproto() {
  protobuf_AddDesc_texas_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "texas.proto");
  GOOGLE_CHECK(file != NULL);
  Card_descriptor_ = file->message_type(0);
  static const int Card_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, value_),
  };
  Card_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      -1,
      -1,
      -1,
      sizeof(Card),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _is_default_instance_));
  TexasDeskUserinfo_descriptor_ = file->message_type(1);
  static const int TexasDeskUserinfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, offline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, poker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, totalbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, curbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, roomcoin_),
  };
  TexasDeskUserinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasDeskUserinfo_descriptor_,
      TexasDeskUserinfo::default_instance_,
      TexasDeskUserinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasDeskUserinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskUserinfo, _is_default_instance_));
  TexasDeskinfo_descriptor_ = file->message_type(2);
  static const int TexasDeskinfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, totalbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, curbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, hostpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, pubpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, info_),
  };
  TexasDeskinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasDeskinfo_descriptor_,
      TexasDeskinfo::default_instance_,
      TexasDeskinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasDeskinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskinfo, _is_default_instance_));
  TexasEdgePool_descriptor_ = file->message_type(3);
  static const int TexasEdgePool_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasEdgePool, totalbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasEdgePool, info_),
  };
  TexasEdgePool_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasEdgePool_descriptor_,
      TexasEdgePool::default_instance_,
      TexasEdgePool_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasEdgePool),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasEdgePool, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasEdgePool, _is_default_instance_));
  TexasEdgePoolInfo_descriptor_ = file->message_type(4);
  static const int TexasEdgePoolInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasEdgePoolInfo, poolindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasEdgePoolInfo, allincoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasEdgePoolInfo, coin_),
  };
  TexasEdgePoolInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasEdgePoolInfo_descriptor_,
      TexasEdgePoolInfo::default_instance_,
      TexasEdgePoolInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasEdgePoolInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasEdgePoolInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasEdgePoolInfo, _is_default_instance_));
  TexasUserPokerList_descriptor_ = file->message_type(5);
  static const int TexasUserPokerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserPokerList, userlist_),
  };
  TexasUserPokerList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasUserPokerList_descriptor_,
      TexasUserPokerList::default_instance_,
      TexasUserPokerList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasUserPokerList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserPokerList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserPokerList, _is_default_instance_));
  TexasUserPoker_descriptor_ = file->message_type(6);
  static const int TexasUserPoker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserPoker, userpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserPoker, pokerlist_),
  };
  TexasUserPoker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasUserPoker_descriptor_,
      TexasUserPoker::default_instance_,
      TexasUserPoker_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasUserPoker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserPoker, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserPoker, _is_default_instance_));
  TexasDeskResultinfo_descriptor_ = file->message_type(7);
  static const int TexasDeskResultinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskResultinfo, pubpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskResultinfo, userlist_),
  };
  TexasDeskResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasDeskResultinfo_descriptor_,
      TexasDeskResultinfo::default_instance_,
      TexasDeskResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasDeskResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasDeskResultinfo, _is_default_instance_));
  TexasUserResultinfo_descriptor_ = file->message_type(8);
  static const int TexasUserResultinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, leftvalue_),
  };
  TexasUserResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasUserResultinfo_descriptor_,
      TexasUserResultinfo::default_instance_,
      TexasUserResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasUserResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasUserResultinfo, _is_default_instance_));
  TexasMatchInfo_descriptor_ = file->message_type(9);
  static const int TexasMatchInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasMatchInfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasMatchInfo, trunindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasMatchInfo, curnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasMatchInfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasMatchInfo, ifmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasMatchInfo, leftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasMatchInfo, begintime_),
  };
  TexasMatchInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasMatchInfo_descriptor_,
      TexasMatchInfo::default_instance_,
      TexasMatchInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasMatchInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasMatchInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasMatchInfo, _is_default_instance_));
  TexasSelfRoomInfo_descriptor_ = file->message_type(10);
  static const int TexasSelfRoomInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasSelfRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasSelfRoomInfo, roomcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasSelfRoomInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasSelfRoomInfo, createuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasSelfRoomInfo, basecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasSelfRoomInfo, playcount_),
  };
  TexasSelfRoomInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexasSelfRoomInfo_descriptor_,
      TexasSelfRoomInfo::default_instance_,
      TexasSelfRoomInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TexasSelfRoomInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasSelfRoomInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasSelfRoomInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_texas_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasDeskUserinfo_descriptor_, &TexasDeskUserinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasDeskinfo_descriptor_, &TexasDeskinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasEdgePool_descriptor_, &TexasEdgePool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasEdgePoolInfo_descriptor_, &TexasEdgePoolInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasUserPokerList_descriptor_, &TexasUserPokerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasUserPoker_descriptor_, &TexasUserPoker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasDeskResultinfo_descriptor_, &TexasDeskResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasUserResultinfo_descriptor_, &TexasUserResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasMatchInfo_descriptor_, &TexasMatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexasSelfRoomInfo_descriptor_, &TexasSelfRoomInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_texas_2eproto() {
  delete Card::default_instance_;
  delete Card_reflection_;
  delete TexasDeskUserinfo::default_instance_;
  delete TexasDeskUserinfo_reflection_;
  delete TexasDeskinfo::default_instance_;
  delete TexasDeskinfo_reflection_;
  delete TexasEdgePool::default_instance_;
  delete TexasEdgePool_reflection_;
  delete TexasEdgePoolInfo::default_instance_;
  delete TexasEdgePoolInfo_reflection_;
  delete TexasUserPokerList::default_instance_;
  delete TexasUserPokerList_reflection_;
  delete TexasUserPoker::default_instance_;
  delete TexasUserPoker_reflection_;
  delete TexasDeskResultinfo::default_instance_;
  delete TexasDeskResultinfo_reflection_;
  delete TexasUserResultinfo::default_instance_;
  delete TexasUserResultinfo_reflection_;
  delete TexasMatchInfo::default_instance_;
  delete TexasMatchInfo_reflection_;
  delete TexasSelfRoomInfo::default_instance_;
  delete TexasSelfRoomInfo_reflection_;
}

void protobuf_AddDesc_texas_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_texas_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013texas.proto\022\005texas\"\025\n\004Card\022\r\n\005value\030\001 "
    "\001(\r\"\224\002\n\021TexasDeskUserinfo\022\013\n\003uid\030\001 \001(\r\022\r"
    "\n\005uname\030\002 \001(\014\022\017\n\007coinnum\030\003 \001(\r\022\017\n\007headur"
    "l\030\004 \001(\014\022\016\n\006deskid\030\005 \001(\r\022\013\n\003pos\030\006 \001(\r\022\016\n\006"
    "status\030\007 \001(\r\022\017\n\007offline\030\010 \001(\r\022\032\n\005poker\030\t"
    " \003(\0132\013.texas.Card\022\016\n\006gender\030\n \001(\r\022\020\n\010int"
    "egral\030\013 \001(\r\022\021\n\tgamevalue\030\014 \001(\005\022\020\n\010totalb"
    "et\030\r \001(\r\022\016\n\006curbet\030\016 \001(\r\022\020\n\010roomcoin\030\017 \001"
    "(\r\"\366\001\n\rTexasDeskinfo\022\016\n\006deskid\030\001 \001(\r\022\016\n\006"
    "status\030\002 \001(\r\022\016\n\006curpos\030\003 \001(\r\022\020\n\010totalbet"
    "\030\004 \001(\r\022\016\n\006curbet\030\005 \001(\r\022\017\n\007hostpos\030\006 \001(\r\022"
    "\035\n\010pubpoker\030\007 \003(\0132\013.texas.Card\022*\n\010userli"
    "st\030\010 \003(\0132\030.texas.TexasDeskUserinfo\022\017\n\007ma"
    "tchid\030\t \001(\r\022&\n\004info\030\n \003(\0132\030.texas.TexasE"
    "dgePoolInfo\"I\n\rTexasEdgePool\022\020\n\010totalbet"
    "\030\001 \001(\r\022&\n\004info\030\002 \003(\0132\030.texas.TexasEdgePo"
    "olInfo\"G\n\021TexasEdgePoolInfo\022\021\n\tpoolindex"
    "\030\001 \001(\r\022\021\n\tallincoin\030\002 \001(\r\022\014\n\004coin\030\003 \001(\r\""
    "=\n\022TexasUserPokerList\022\'\n\010userlist\030\001 \003(\0132"
    "\025.texas.TexasUserPoker\"A\n\016TexasUserPoker"
    "\022\017\n\007userpos\030\001 \001(\r\022\036\n\tpokerlist\030\002 \003(\0132\013.t"
    "exas.Card\"b\n\023TexasDeskResultinfo\022\035\n\010pubp"
    "oker\030\001 \003(\0132\013.texas.Card\022,\n\010userlist\030\002 \003("
    "\0132\032.texas.TexasUserResultinfo\"\257\001\n\023TexasU"
    "serResultinfo\022\013\n\003uid\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\022"
    "\016\n\006result\030\003 \001(\r\022\r\n\005value\030\004 \001(\r\022\014\n\004coin\030\005"
    " \001(\r\022\035\n\010usercard\030\006 \003(\0132\013.texas.Card\022\021\n\tg"
    "amevalue\030\007 \001(\005\022\014\n\004rank\030\010 \001(\r\022\021\n\tleftvalu"
    "e\030\t \001(\r\"\214\001\n\016TexasMatchInfo\022\017\n\007matchid\030\001 "
    "\001(\r\022\021\n\ttrunindex\030\002 \001(\r\022\016\n\006curnum\030\003 \001(\r\022\021"
    "\n\tgamevalue\030\004 \001(\005\022\017\n\007ifmatch\030\005 \001(\005\022\017\n\007le"
    "ftnum\030\006 \001(\r\022\021\n\tbegintime\030\007 \001(\r\"~\n\021TexasS"
    "elfRoomInfo\022\016\n\006roomid\030\001 \001(\r\022\020\n\010roomcode\030"
    "\002 \001(\014\022\017\n\007endtime\030\003 \001(\r\022\021\n\tcreateuid\030\004 \001("
    "\r\022\020\n\010basecoin\030\005 \001(\r\022\021\n\tplaycount\030\006 \001(\rb\006"
    "proto3", 1406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "texas.proto", &protobuf_RegisterTypes);
  Card::default_instance_ = new Card();
  TexasDeskUserinfo::default_instance_ = new TexasDeskUserinfo();
  TexasDeskinfo::default_instance_ = new TexasDeskinfo();
  TexasEdgePool::default_instance_ = new TexasEdgePool();
  TexasEdgePoolInfo::default_instance_ = new TexasEdgePoolInfo();
  TexasUserPokerList::default_instance_ = new TexasUserPokerList();
  TexasUserPoker::default_instance_ = new TexasUserPoker();
  TexasDeskResultinfo::default_instance_ = new TexasDeskResultinfo();
  TexasUserResultinfo::default_instance_ = new TexasUserResultinfo();
  TexasMatchInfo::default_instance_ = new TexasMatchInfo();
  TexasSelfRoomInfo::default_instance_ = new TexasSelfRoomInfo();
  Card::default_instance_->InitAsDefaultInstance();
  TexasDeskUserinfo::default_instance_->InitAsDefaultInstance();
  TexasDeskinfo::default_instance_->InitAsDefaultInstance();
  TexasEdgePool::default_instance_->InitAsDefaultInstance();
  TexasEdgePoolInfo::default_instance_->InitAsDefaultInstance();
  TexasUserPokerList::default_instance_->InitAsDefaultInstance();
  TexasUserPoker::default_instance_->InitAsDefaultInstance();
  TexasDeskResultinfo::default_instance_->InitAsDefaultInstance();
  TexasUserResultinfo::default_instance_->InitAsDefaultInstance();
  TexasMatchInfo::default_instance_->InitAsDefaultInstance();
  TexasSelfRoomInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_texas_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_texas_2eproto {
  StaticDescriptorInitializer_texas_2eproto() {
    protobuf_AddDesc_texas_2eproto();
  }
} static_descriptor_initializer_texas_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Card::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Card::Card()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.Card)
}

void Card::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Card::Card(const Card& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.Card)
}

void Card::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:texas.Card)
  SharedDtor();
}

void Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New(::google::protobuf::Arena* arena) const {
  Card* n = new Card;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.Card)
  value_ = 0u;
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.Card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.Card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.Card)
  return false;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.Card)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.Card)
}

::google::protobuf::uint8* Card::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.Card)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.Card)
  return target;
}

int Card::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.Card)
  int total_size = 0;

  // optional uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Card* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Card>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.Card)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.Card)
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {

  return true;
}

void Card::Swap(Card* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Card::InternalSwap(Card* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional uint32 value = 1;
void Card::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 Card::value() const {
  // @@protoc_insertion_point(field_get:texas.Card.value)
  return value_;
}
 void Card::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:texas.Card.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasDeskUserinfo::kUidFieldNumber;
const int TexasDeskUserinfo::kUnameFieldNumber;
const int TexasDeskUserinfo::kCoinnumFieldNumber;
const int TexasDeskUserinfo::kHeadurlFieldNumber;
const int TexasDeskUserinfo::kDeskidFieldNumber;
const int TexasDeskUserinfo::kPosFieldNumber;
const int TexasDeskUserinfo::kStatusFieldNumber;
const int TexasDeskUserinfo::kOfflineFieldNumber;
const int TexasDeskUserinfo::kPokerFieldNumber;
const int TexasDeskUserinfo::kGenderFieldNumber;
const int TexasDeskUserinfo::kIntegralFieldNumber;
const int TexasDeskUserinfo::kGamevalueFieldNumber;
const int TexasDeskUserinfo::kTotalbetFieldNumber;
const int TexasDeskUserinfo::kCurbetFieldNumber;
const int TexasDeskUserinfo::kRoomcoinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasDeskUserinfo::TexasDeskUserinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasDeskUserinfo)
}

void TexasDeskUserinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasDeskUserinfo::TexasDeskUserinfo(const TexasDeskUserinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasDeskUserinfo)
}

void TexasDeskUserinfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinnum_ = 0u;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deskid_ = 0u;
  pos_ = 0u;
  status_ = 0u;
  offline_ = 0u;
  gender_ = 0u;
  integral_ = 0u;
  gamevalue_ = 0;
  totalbet_ = 0u;
  curbet_ = 0u;
  roomcoin_ = 0u;
}

TexasDeskUserinfo::~TexasDeskUserinfo() {
  // @@protoc_insertion_point(destructor:texas.TexasDeskUserinfo)
  SharedDtor();
}

void TexasDeskUserinfo::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TexasDeskUserinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasDeskUserinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasDeskUserinfo_descriptor_;
}

const TexasDeskUserinfo& TexasDeskUserinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasDeskUserinfo* TexasDeskUserinfo::default_instance_ = NULL;

TexasDeskUserinfo* TexasDeskUserinfo::New(::google::protobuf::Arena* arena) const {
  TexasDeskUserinfo* n = new TexasDeskUserinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasDeskUserinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasDeskUserinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TexasDeskUserinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TexasDeskUserinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, coinnum_);
  ZR_(deskid_, offline_);
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(gender_, roomcoin_);

#undef ZR_HELPER_
#undef ZR_

  poker_.Clear();
}

bool TexasDeskUserinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasDeskUserinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uname;
        break;
      }

      // optional bytes uname = 2;
      case 2: {
        if (tag == 18) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coinnum;
        break;
      }

      // optional uint32 coinnum = 3;
      case 3: {
        if (tag == 24) {
         parse_coinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_headurl;
        break;
      }

      // optional bytes headurl = 4;
      case 4: {
        if (tag == 34) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_headurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deskid;
        break;
      }

      // optional uint32 deskid = 5;
      case 5: {
        if (tag == 40) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 6;
      case 6: {
        if (tag == 48) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offline;
        break;
      }

      // optional uint32 offline = 8;
      case 8: {
        if (tag == 64) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_poker;
        break;
      }

      // repeated .texas.Card poker = 9;
      case 9: {
        if (tag == 74) {
         parse_poker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_poker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_poker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_poker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 10;
      case 10: {
        if (tag == 80) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 11;
      case 11: {
        if (tag == 88) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 12;
      case 12: {
        if (tag == 96) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_totalbet;
        break;
      }

      // optional uint32 totalbet = 13;
      case 13: {
        if (tag == 104) {
         parse_totalbet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_curbet;
        break;
      }

      // optional uint32 curbet = 14;
      case 14: {
        if (tag == 112) {
         parse_curbet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curbet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_roomcoin;
        break;
      }

      // optional uint32 roomcoin = 15;
      case 15: {
        if (tag == 120) {
         parse_roomcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomcoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasDeskUserinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasDeskUserinfo)
  return false;
#undef DO_
}

void TexasDeskUserinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasDeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coinnum(), output);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->headurl(), output);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deskid(), output);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos(), output);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offline(), output);
  }

  // repeated .texas.Card poker = 9;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->poker(i), output);
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gender(), output);
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->integral(), output);
  }

  // optional int32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gamevalue(), output);
  }

  // optional uint32 totalbet = 13;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->totalbet(), output);
  }

  // optional uint32 curbet = 14;
  if (this->curbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->curbet(), output);
  }

  // optional uint32 roomcoin = 15;
  if (this->roomcoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->roomcoin(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasDeskUserinfo)
}

::google::protobuf::uint8* TexasDeskUserinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasDeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uname(), target);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coinnum(), target);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->headurl(), target);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deskid(), target);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos(), target);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->offline(), target);
  }

  // repeated .texas.Card poker = 9;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->poker(i), false, target);
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gender(), target);
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->integral(), target);
  }

  // optional int32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gamevalue(), target);
  }

  // optional uint32 totalbet = 13;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->totalbet(), target);
  }

  // optional uint32 curbet = 14;
  if (this->curbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->curbet(), target);
  }

  // optional uint32 roomcoin = 15;
  if (this->roomcoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->roomcoin(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasDeskUserinfo)
  return target;
}

int TexasDeskUserinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasDeskUserinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uname());
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coinnum());
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->headurl());
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline());
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->integral());
  }

  // optional int32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 totalbet = 13;
  if (this->totalbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalbet());
  }

  // optional uint32 curbet = 14;
  if (this->curbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curbet());
  }

  // optional uint32 roomcoin = 15;
  if (this->roomcoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomcoin());
  }

  // repeated .texas.Card poker = 9;
  total_size += 1 * this->poker_size();
  for (int i = 0; i < this->poker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poker(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasDeskUserinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasDeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasDeskUserinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasDeskUserinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasDeskUserinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasDeskUserinfo)
    MergeFrom(*source);
  }
}

void TexasDeskUserinfo::MergeFrom(const TexasDeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasDeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  poker_.MergeFrom(from.poker_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.coinnum() != 0) {
    set_coinnum(from.coinnum());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.offline() != 0) {
    set_offline(from.offline());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.integral() != 0) {
    set_integral(from.integral());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
  if (from.curbet() != 0) {
    set_curbet(from.curbet());
  }
  if (from.roomcoin() != 0) {
    set_roomcoin(from.roomcoin());
  }
}

void TexasDeskUserinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasDeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasDeskUserinfo::CopyFrom(const TexasDeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasDeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasDeskUserinfo::IsInitialized() const {

  return true;
}

void TexasDeskUserinfo::Swap(TexasDeskUserinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasDeskUserinfo::InternalSwap(TexasDeskUserinfo* other) {
  std::swap(uid_, other->uid_);
  uname_.Swap(&other->uname_);
  std::swap(coinnum_, other->coinnum_);
  headurl_.Swap(&other->headurl_);
  std::swap(deskid_, other->deskid_);
  std::swap(pos_, other->pos_);
  std::swap(status_, other->status_);
  std::swap(offline_, other->offline_);
  poker_.UnsafeArenaSwap(&other->poker_);
  std::swap(gender_, other->gender_);
  std::swap(integral_, other->integral_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(totalbet_, other->totalbet_);
  std::swap(curbet_, other->curbet_);
  std::swap(roomcoin_, other->roomcoin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasDeskUserinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasDeskUserinfo_descriptor_;
  metadata.reflection = TexasDeskUserinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasDeskUserinfo

// optional uint32 uid = 1;
void TexasDeskUserinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.uid)
  return uid_;
}
 void TexasDeskUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.uid)
}

// optional bytes uname = 2;
void TexasDeskUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TexasDeskUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TexasDeskUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.uname)
}
 void TexasDeskUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas.TexasDeskUserinfo.uname)
}
 void TexasDeskUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas.TexasDeskUserinfo.uname)
}
 ::std::string* TexasDeskUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TexasDeskUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:texas.TexasDeskUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TexasDeskUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:texas.TexasDeskUserinfo.uname)
}

// optional uint32 coinnum = 3;
void TexasDeskUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.coinnum)
  return coinnum_;
}
 void TexasDeskUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.coinnum)
}

// optional bytes headurl = 4;
void TexasDeskUserinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TexasDeskUserinfo::headurl() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TexasDeskUserinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.headurl)
}
 void TexasDeskUserinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas.TexasDeskUserinfo.headurl)
}
 void TexasDeskUserinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas.TexasDeskUserinfo.headurl)
}
 ::std::string* TexasDeskUserinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskUserinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TexasDeskUserinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:texas.TexasDeskUserinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TexasDeskUserinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:texas.TexasDeskUserinfo.headurl)
}

// optional uint32 deskid = 5;
void TexasDeskUserinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::deskid() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.deskid)
  return deskid_;
}
 void TexasDeskUserinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.deskid)
}

// optional uint32 pos = 6;
void TexasDeskUserinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::pos() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.pos)
  return pos_;
}
 void TexasDeskUserinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.pos)
}

// optional uint32 status = 7;
void TexasDeskUserinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::status() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.status)
  return status_;
}
 void TexasDeskUserinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.status)
}

// optional uint32 offline = 8;
void TexasDeskUserinfo::clear_offline() {
  offline_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::offline() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.offline)
  return offline_;
}
 void TexasDeskUserinfo::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.offline)
}

// repeated .texas.Card poker = 9;
int TexasDeskUserinfo::poker_size() const {
  return poker_.size();
}
void TexasDeskUserinfo::clear_poker() {
  poker_.Clear();
}
const ::texas::Card& TexasDeskUserinfo::poker(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.poker)
  return poker_.Get(index);
}
::texas::Card* TexasDeskUserinfo::mutable_poker(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskUserinfo.poker)
  return poker_.Mutable(index);
}
::texas::Card* TexasDeskUserinfo::add_poker() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskUserinfo.poker)
  return poker_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasDeskUserinfo::mutable_poker() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskUserinfo.poker)
  return &poker_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasDeskUserinfo::poker() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskUserinfo.poker)
  return poker_;
}

// optional uint32 gender = 10;
void TexasDeskUserinfo::clear_gender() {
  gender_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.gender)
  return gender_;
}
 void TexasDeskUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.gender)
}

// optional uint32 integral = 11;
void TexasDeskUserinfo::clear_integral() {
  integral_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::integral() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.integral)
  return integral_;
}
 void TexasDeskUserinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.integral)
}

// optional int32 gamevalue = 12;
void TexasDeskUserinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 TexasDeskUserinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.gamevalue)
  return gamevalue_;
}
 void TexasDeskUserinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.gamevalue)
}

// optional uint32 totalbet = 13;
void TexasDeskUserinfo::clear_totalbet() {
  totalbet_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::totalbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.totalbet)
  return totalbet_;
}
 void TexasDeskUserinfo::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.totalbet)
}

// optional uint32 curbet = 14;
void TexasDeskUserinfo::clear_curbet() {
  curbet_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::curbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.curbet)
  return curbet_;
}
 void TexasDeskUserinfo::set_curbet(::google::protobuf::uint32 value) {
  
  curbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.curbet)
}

// optional uint32 roomcoin = 15;
void TexasDeskUserinfo::clear_roomcoin() {
  roomcoin_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskUserinfo::roomcoin() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.roomcoin)
  return roomcoin_;
}
 void TexasDeskUserinfo::set_roomcoin(::google::protobuf::uint32 value) {
  
  roomcoin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.roomcoin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasDeskinfo::kDeskidFieldNumber;
const int TexasDeskinfo::kStatusFieldNumber;
const int TexasDeskinfo::kCurposFieldNumber;
const int TexasDeskinfo::kTotalbetFieldNumber;
const int TexasDeskinfo::kCurbetFieldNumber;
const int TexasDeskinfo::kHostposFieldNumber;
const int TexasDeskinfo::kPubpokerFieldNumber;
const int TexasDeskinfo::kUserlistFieldNumber;
const int TexasDeskinfo::kMatchidFieldNumber;
const int TexasDeskinfo::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasDeskinfo::TexasDeskinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasDeskinfo)
}

void TexasDeskinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasDeskinfo::TexasDeskinfo(const TexasDeskinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasDeskinfo)
}

void TexasDeskinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  deskid_ = 0u;
  status_ = 0u;
  curpos_ = 0u;
  totalbet_ = 0u;
  curbet_ = 0u;
  hostpos_ = 0u;
  matchid_ = 0u;
}

TexasDeskinfo::~TexasDeskinfo() {
  // @@protoc_insertion_point(destructor:texas.TexasDeskinfo)
  SharedDtor();
}

void TexasDeskinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TexasDeskinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasDeskinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasDeskinfo_descriptor_;
}

const TexasDeskinfo& TexasDeskinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasDeskinfo* TexasDeskinfo::default_instance_ = NULL;

TexasDeskinfo* TexasDeskinfo::New(::google::protobuf::Arena* arena) const {
  TexasDeskinfo* n = new TexasDeskinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasDeskinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasDeskinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TexasDeskinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TexasDeskinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deskid_, hostpos_);
  matchid_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  pubpoker_.Clear();
  userlist_.Clear();
  info_.Clear();
}

bool TexasDeskinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasDeskinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curpos;
        break;
      }

      // optional uint32 curpos = 3;
      case 3: {
        if (tag == 24) {
         parse_curpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_totalbet;
        break;
      }

      // optional uint32 totalbet = 4;
      case 4: {
        if (tag == 32) {
         parse_totalbet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_curbet;
        break;
      }

      // optional uint32 curbet = 5;
      case 5: {
        if (tag == 40) {
         parse_curbet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curbet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hostpos;
        break;
      }

      // optional uint32 hostpos = 6;
      case 6: {
        if (tag == 48) {
         parse_hostpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hostpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pubpoker;
        break;
      }

      // repeated .texas.Card pubpoker = 7;
      case 7: {
        if (tag == 58) {
         parse_pubpoker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pubpoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pubpoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_pubpoker;
        if (input->ExpectTag(66)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .texas.TexasDeskUserinfo userlist = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_matchid;
        break;
      }

      // optional uint32 matchid = 9;
      case 9: {
        if (tag == 72) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_info;
        break;
      }

      // repeated .texas.TexasEdgePoolInfo info = 10;
      case 10: {
        if (tag == 82) {
         parse_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasDeskinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasDeskinfo)
  return false;
#undef DO_
}

void TexasDeskinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deskid(), output);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpos(), output);
  }

  // optional uint32 totalbet = 4;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalbet(), output);
  }

  // optional uint32 curbet = 5;
  if (this->curbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curbet(), output);
  }

  // optional uint32 hostpos = 6;
  if (this->hostpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hostpos(), output);
  }

  // repeated .texas.Card pubpoker = 7;
  for (unsigned int i = 0, n = this->pubpoker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pubpoker(i), output);
  }

  // repeated .texas.TexasDeskUserinfo userlist = 8;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->userlist(i), output);
  }

  // optional uint32 matchid = 9;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->matchid(), output);
  }

  // repeated .texas.TexasEdgePoolInfo info = 10;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasDeskinfo)
}

::google::protobuf::uint8* TexasDeskinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deskid(), target);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpos(), target);
  }

  // optional uint32 totalbet = 4;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totalbet(), target);
  }

  // optional uint32 curbet = 5;
  if (this->curbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curbet(), target);
  }

  // optional uint32 hostpos = 6;
  if (this->hostpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hostpos(), target);
  }

  // repeated .texas.Card pubpoker = 7;
  for (unsigned int i = 0, n = this->pubpoker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->pubpoker(i), false, target);
  }

  // repeated .texas.TexasDeskUserinfo userlist = 8;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->userlist(i), false, target);
  }

  // optional uint32 matchid = 9;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->matchid(), target);
  }

  // repeated .texas.TexasEdgePoolInfo info = 10;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasDeskinfo)
  return target;
}

int TexasDeskinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasDeskinfo)
  int total_size = 0;

  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curpos());
  }

  // optional uint32 totalbet = 4;
  if (this->totalbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalbet());
  }

  // optional uint32 curbet = 5;
  if (this->curbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curbet());
  }

  // optional uint32 hostpos = 6;
  if (this->hostpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hostpos());
  }

  // optional uint32 matchid = 9;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // repeated .texas.Card pubpoker = 7;
  total_size += 1 * this->pubpoker_size();
  for (int i = 0; i < this->pubpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pubpoker(i));
  }

  // repeated .texas.TexasDeskUserinfo userlist = 8;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  // repeated .texas.TexasEdgePoolInfo info = 10;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasDeskinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasDeskinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasDeskinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasDeskinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasDeskinfo)
    MergeFrom(*source);
  }
}

void TexasDeskinfo::MergeFrom(const TexasDeskinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pubpoker_.MergeFrom(from.pubpoker_);
  userlist_.MergeFrom(from.userlist_);
  info_.MergeFrom(from.info_);
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.curpos() != 0) {
    set_curpos(from.curpos());
  }
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
  if (from.curbet() != 0) {
    set_curbet(from.curbet());
  }
  if (from.hostpos() != 0) {
    set_hostpos(from.hostpos());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void TexasDeskinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasDeskinfo::CopyFrom(const TexasDeskinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasDeskinfo::IsInitialized() const {

  return true;
}

void TexasDeskinfo::Swap(TexasDeskinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasDeskinfo::InternalSwap(TexasDeskinfo* other) {
  std::swap(deskid_, other->deskid_);
  std::swap(status_, other->status_);
  std::swap(curpos_, other->curpos_);
  std::swap(totalbet_, other->totalbet_);
  std::swap(curbet_, other->curbet_);
  std::swap(hostpos_, other->hostpos_);
  pubpoker_.UnsafeArenaSwap(&other->pubpoker_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  std::swap(matchid_, other->matchid_);
  info_.UnsafeArenaSwap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasDeskinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasDeskinfo_descriptor_;
  metadata.reflection = TexasDeskinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasDeskinfo

// optional uint32 deskid = 1;
void TexasDeskinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskinfo::deskid() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.deskid)
  return deskid_;
}
 void TexasDeskinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.deskid)
}

// optional uint32 status = 2;
void TexasDeskinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskinfo::status() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.status)
  return status_;
}
 void TexasDeskinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.status)
}

// optional uint32 curpos = 3;
void TexasDeskinfo::clear_curpos() {
  curpos_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskinfo::curpos() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.curpos)
  return curpos_;
}
 void TexasDeskinfo::set_curpos(::google::protobuf::uint32 value) {
  
  curpos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.curpos)
}

// optional uint32 totalbet = 4;
void TexasDeskinfo::clear_totalbet() {
  totalbet_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskinfo::totalbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.totalbet)
  return totalbet_;
}
 void TexasDeskinfo::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.totalbet)
}

// optional uint32 curbet = 5;
void TexasDeskinfo::clear_curbet() {
  curbet_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskinfo::curbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.curbet)
  return curbet_;
}
 void TexasDeskinfo::set_curbet(::google::protobuf::uint32 value) {
  
  curbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.curbet)
}

// optional uint32 hostpos = 6;
void TexasDeskinfo::clear_hostpos() {
  hostpos_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskinfo::hostpos() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.hostpos)
  return hostpos_;
}
 void TexasDeskinfo::set_hostpos(::google::protobuf::uint32 value) {
  
  hostpos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.hostpos)
}

// repeated .texas.Card pubpoker = 7;
int TexasDeskinfo::pubpoker_size() const {
  return pubpoker_.size();
}
void TexasDeskinfo::clear_pubpoker() {
  pubpoker_.Clear();
}
const ::texas::Card& TexasDeskinfo::pubpoker(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.pubpoker)
  return pubpoker_.Get(index);
}
::texas::Card* TexasDeskinfo::mutable_pubpoker(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskinfo.pubpoker)
  return pubpoker_.Mutable(index);
}
::texas::Card* TexasDeskinfo::add_pubpoker() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskinfo.pubpoker)
  return pubpoker_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasDeskinfo::mutable_pubpoker() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskinfo.pubpoker)
  return &pubpoker_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasDeskinfo::pubpoker() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskinfo.pubpoker)
  return pubpoker_;
}

// repeated .texas.TexasDeskUserinfo userlist = 8;
int TexasDeskinfo::userlist_size() const {
  return userlist_.size();
}
void TexasDeskinfo::clear_userlist() {
  userlist_.Clear();
}
const ::texas::TexasDeskUserinfo& TexasDeskinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.userlist)
  return userlist_.Get(index);
}
::texas::TexasDeskUserinfo* TexasDeskinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskinfo.userlist)
  return userlist_.Mutable(index);
}
::texas::TexasDeskUserinfo* TexasDeskinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::TexasDeskUserinfo >*
TexasDeskinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::TexasDeskUserinfo >&
TexasDeskinfo::userlist() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskinfo.userlist)
  return userlist_;
}

// optional uint32 matchid = 9;
void TexasDeskinfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 TexasDeskinfo::matchid() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.matchid)
  return matchid_;
}
 void TexasDeskinfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.matchid)
}

// repeated .texas.TexasEdgePoolInfo info = 10;
int TexasDeskinfo::info_size() const {
  return info_.size();
}
void TexasDeskinfo::clear_info() {
  info_.Clear();
}
const ::texas::TexasEdgePoolInfo& TexasDeskinfo::info(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.info)
  return info_.Get(index);
}
::texas::TexasEdgePoolInfo* TexasDeskinfo::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskinfo.info)
  return info_.Mutable(index);
}
::texas::TexasEdgePoolInfo* TexasDeskinfo::add_info() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskinfo.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >*
TexasDeskinfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskinfo.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >&
TexasDeskinfo::info() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskinfo.info)
  return info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasEdgePool::kTotalbetFieldNumber;
const int TexasEdgePool::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasEdgePool::TexasEdgePool()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasEdgePool)
}

void TexasEdgePool::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasEdgePool::TexasEdgePool(const TexasEdgePool& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasEdgePool)
}

void TexasEdgePool::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  totalbet_ = 0u;
}

TexasEdgePool::~TexasEdgePool() {
  // @@protoc_insertion_point(destructor:texas.TexasEdgePool)
  SharedDtor();
}

void TexasEdgePool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TexasEdgePool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasEdgePool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasEdgePool_descriptor_;
}

const TexasEdgePool& TexasEdgePool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasEdgePool* TexasEdgePool::default_instance_ = NULL;

TexasEdgePool* TexasEdgePool::New(::google::protobuf::Arena* arena) const {
  TexasEdgePool* n = new TexasEdgePool;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasEdgePool::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasEdgePool)
  totalbet_ = 0u;
  info_.Clear();
}

bool TexasEdgePool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasEdgePool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 totalbet = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .texas.TexasEdgePoolInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasEdgePool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasEdgePool)
  return false;
#undef DO_
}

void TexasEdgePool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasEdgePool)
  // optional uint32 totalbet = 1;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalbet(), output);
  }

  // repeated .texas.TexasEdgePoolInfo info = 2;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasEdgePool)
}

::google::protobuf::uint8* TexasEdgePool::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasEdgePool)
  // optional uint32 totalbet = 1;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totalbet(), target);
  }

  // repeated .texas.TexasEdgePoolInfo info = 2;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasEdgePool)
  return target;
}

int TexasEdgePool::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasEdgePool)
  int total_size = 0;

  // optional uint32 totalbet = 1;
  if (this->totalbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalbet());
  }

  // repeated .texas.TexasEdgePoolInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasEdgePool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasEdgePool)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasEdgePool* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasEdgePool>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasEdgePool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasEdgePool)
    MergeFrom(*source);
  }
}

void TexasEdgePool::MergeFrom(const TexasEdgePool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasEdgePool)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  info_.MergeFrom(from.info_);
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
}

void TexasEdgePool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasEdgePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasEdgePool::CopyFrom(const TexasEdgePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasEdgePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasEdgePool::IsInitialized() const {

  return true;
}

void TexasEdgePool::Swap(TexasEdgePool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasEdgePool::InternalSwap(TexasEdgePool* other) {
  std::swap(totalbet_, other->totalbet_);
  info_.UnsafeArenaSwap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasEdgePool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasEdgePool_descriptor_;
  metadata.reflection = TexasEdgePool_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasEdgePool

// optional uint32 totalbet = 1;
void TexasEdgePool::clear_totalbet() {
  totalbet_ = 0u;
}
 ::google::protobuf::uint32 TexasEdgePool::totalbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePool.totalbet)
  return totalbet_;
}
 void TexasEdgePool::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasEdgePool.totalbet)
}

// repeated .texas.TexasEdgePoolInfo info = 2;
int TexasEdgePool::info_size() const {
  return info_.size();
}
void TexasEdgePool::clear_info() {
  info_.Clear();
}
const ::texas::TexasEdgePoolInfo& TexasEdgePool::info(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePool.info)
  return info_.Get(index);
}
::texas::TexasEdgePoolInfo* TexasEdgePool::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasEdgePool.info)
  return info_.Mutable(index);
}
::texas::TexasEdgePoolInfo* TexasEdgePool::add_info() {
  // @@protoc_insertion_point(field_add:texas.TexasEdgePool.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >*
TexasEdgePool::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasEdgePool.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >&
TexasEdgePool::info() const {
  // @@protoc_insertion_point(field_list:texas.TexasEdgePool.info)
  return info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasEdgePoolInfo::kPoolindexFieldNumber;
const int TexasEdgePoolInfo::kAllincoinFieldNumber;
const int TexasEdgePoolInfo::kCoinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasEdgePoolInfo::TexasEdgePoolInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasEdgePoolInfo)
}

void TexasEdgePoolInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasEdgePoolInfo::TexasEdgePoolInfo(const TexasEdgePoolInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasEdgePoolInfo)
}

void TexasEdgePoolInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  poolindex_ = 0u;
  allincoin_ = 0u;
  coin_ = 0u;
}

TexasEdgePoolInfo::~TexasEdgePoolInfo() {
  // @@protoc_insertion_point(destructor:texas.TexasEdgePoolInfo)
  SharedDtor();
}

void TexasEdgePoolInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TexasEdgePoolInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasEdgePoolInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasEdgePoolInfo_descriptor_;
}

const TexasEdgePoolInfo& TexasEdgePoolInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasEdgePoolInfo* TexasEdgePoolInfo::default_instance_ = NULL;

TexasEdgePoolInfo* TexasEdgePoolInfo::New(::google::protobuf::Arena* arena) const {
  TexasEdgePoolInfo* n = new TexasEdgePoolInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasEdgePoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasEdgePoolInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TexasEdgePoolInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TexasEdgePoolInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(poolindex_, coin_);

#undef ZR_HELPER_
#undef ZR_

}

bool TexasEdgePoolInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasEdgePoolInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 poolindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poolindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allincoin;
        break;
      }

      // optional uint32 allincoin = 2;
      case 2: {
        if (tag == 16) {
         parse_allincoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allincoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 3;
      case 3: {
        if (tag == 24) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasEdgePoolInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasEdgePoolInfo)
  return false;
#undef DO_
}

void TexasEdgePoolInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasEdgePoolInfo)
  // optional uint32 poolindex = 1;
  if (this->poolindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->poolindex(), output);
  }

  // optional uint32 allincoin = 2;
  if (this->allincoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allincoin(), output);
  }

  // optional uint32 coin = 3;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasEdgePoolInfo)
}

::google::protobuf::uint8* TexasEdgePoolInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasEdgePoolInfo)
  // optional uint32 poolindex = 1;
  if (this->poolindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->poolindex(), target);
  }

  // optional uint32 allincoin = 2;
  if (this->allincoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allincoin(), target);
  }

  // optional uint32 coin = 3;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coin(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasEdgePoolInfo)
  return target;
}

int TexasEdgePoolInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasEdgePoolInfo)
  int total_size = 0;

  // optional uint32 poolindex = 1;
  if (this->poolindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->poolindex());
  }

  // optional uint32 allincoin = 2;
  if (this->allincoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allincoin());
  }

  // optional uint32 coin = 3;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasEdgePoolInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasEdgePoolInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasEdgePoolInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasEdgePoolInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasEdgePoolInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasEdgePoolInfo)
    MergeFrom(*source);
  }
}

void TexasEdgePoolInfo::MergeFrom(const TexasEdgePoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasEdgePoolInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.poolindex() != 0) {
    set_poolindex(from.poolindex());
  }
  if (from.allincoin() != 0) {
    set_allincoin(from.allincoin());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
}

void TexasEdgePoolInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasEdgePoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasEdgePoolInfo::CopyFrom(const TexasEdgePoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasEdgePoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasEdgePoolInfo::IsInitialized() const {

  return true;
}

void TexasEdgePoolInfo::Swap(TexasEdgePoolInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasEdgePoolInfo::InternalSwap(TexasEdgePoolInfo* other) {
  std::swap(poolindex_, other->poolindex_);
  std::swap(allincoin_, other->allincoin_);
  std::swap(coin_, other->coin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasEdgePoolInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasEdgePoolInfo_descriptor_;
  metadata.reflection = TexasEdgePoolInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasEdgePoolInfo

// optional uint32 poolindex = 1;
void TexasEdgePoolInfo::clear_poolindex() {
  poolindex_ = 0u;
}
 ::google::protobuf::uint32 TexasEdgePoolInfo::poolindex() const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePoolInfo.poolindex)
  return poolindex_;
}
 void TexasEdgePoolInfo::set_poolindex(::google::protobuf::uint32 value) {
  
  poolindex_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasEdgePoolInfo.poolindex)
}

// optional uint32 allincoin = 2;
void TexasEdgePoolInfo::clear_allincoin() {
  allincoin_ = 0u;
}
 ::google::protobuf::uint32 TexasEdgePoolInfo::allincoin() const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePoolInfo.allincoin)
  return allincoin_;
}
 void TexasEdgePoolInfo::set_allincoin(::google::protobuf::uint32 value) {
  
  allincoin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasEdgePoolInfo.allincoin)
}

// optional uint32 coin = 3;
void TexasEdgePoolInfo::clear_coin() {
  coin_ = 0u;
}
 ::google::protobuf::uint32 TexasEdgePoolInfo::coin() const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePoolInfo.coin)
  return coin_;
}
 void TexasEdgePoolInfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasEdgePoolInfo.coin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasUserPokerList::kUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasUserPokerList::TexasUserPokerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasUserPokerList)
}

void TexasUserPokerList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasUserPokerList::TexasUserPokerList(const TexasUserPokerList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasUserPokerList)
}

void TexasUserPokerList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TexasUserPokerList::~TexasUserPokerList() {
  // @@protoc_insertion_point(destructor:texas.TexasUserPokerList)
  SharedDtor();
}

void TexasUserPokerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TexasUserPokerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasUserPokerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasUserPokerList_descriptor_;
}

const TexasUserPokerList& TexasUserPokerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasUserPokerList* TexasUserPokerList::default_instance_ = NULL;

TexasUserPokerList* TexasUserPokerList::New(::google::protobuf::Arena* arena) const {
  TexasUserPokerList* n = new TexasUserPokerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasUserPokerList::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasUserPokerList)
  userlist_.Clear();
}

bool TexasUserPokerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasUserPokerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .texas.TexasUserPoker userlist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasUserPokerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasUserPokerList)
  return false;
#undef DO_
}

void TexasUserPokerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasUserPokerList)
  // repeated .texas.TexasUserPoker userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasUserPokerList)
}

::google::protobuf::uint8* TexasUserPokerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasUserPokerList)
  // repeated .texas.TexasUserPoker userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->userlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasUserPokerList)
  return target;
}

int TexasUserPokerList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasUserPokerList)
  int total_size = 0;

  // repeated .texas.TexasUserPoker userlist = 1;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasUserPokerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasUserPokerList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasUserPokerList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasUserPokerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasUserPokerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasUserPokerList)
    MergeFrom(*source);
  }
}

void TexasUserPokerList::MergeFrom(const TexasUserPokerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasUserPokerList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
}

void TexasUserPokerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasUserPokerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasUserPokerList::CopyFrom(const TexasUserPokerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasUserPokerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasUserPokerList::IsInitialized() const {

  return true;
}

void TexasUserPokerList::Swap(TexasUserPokerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasUserPokerList::InternalSwap(TexasUserPokerList* other) {
  userlist_.UnsafeArenaSwap(&other->userlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasUserPokerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasUserPokerList_descriptor_;
  metadata.reflection = TexasUserPokerList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasUserPokerList

// repeated .texas.TexasUserPoker userlist = 1;
int TexasUserPokerList::userlist_size() const {
  return userlist_.size();
}
void TexasUserPokerList::clear_userlist() {
  userlist_.Clear();
}
const ::texas::TexasUserPoker& TexasUserPokerList::userlist(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasUserPokerList.userlist)
  return userlist_.Get(index);
}
::texas::TexasUserPoker* TexasUserPokerList::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasUserPokerList.userlist)
  return userlist_.Mutable(index);
}
::texas::TexasUserPoker* TexasUserPokerList::add_userlist() {
  // @@protoc_insertion_point(field_add:texas.TexasUserPokerList.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::TexasUserPoker >*
TexasUserPokerList::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasUserPokerList.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::TexasUserPoker >&
TexasUserPokerList::userlist() const {
  // @@protoc_insertion_point(field_list:texas.TexasUserPokerList.userlist)
  return userlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasUserPoker::kUserposFieldNumber;
const int TexasUserPoker::kPokerlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasUserPoker::TexasUserPoker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasUserPoker)
}

void TexasUserPoker::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasUserPoker::TexasUserPoker(const TexasUserPoker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasUserPoker)
}

void TexasUserPoker::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userpos_ = 0u;
}

TexasUserPoker::~TexasUserPoker() {
  // @@protoc_insertion_point(destructor:texas.TexasUserPoker)
  SharedDtor();
}

void TexasUserPoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TexasUserPoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasUserPoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasUserPoker_descriptor_;
}

const TexasUserPoker& TexasUserPoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasUserPoker* TexasUserPoker::default_instance_ = NULL;

TexasUserPoker* TexasUserPoker::New(::google::protobuf::Arena* arena) const {
  TexasUserPoker* n = new TexasUserPoker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasUserPoker::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasUserPoker)
  userpos_ = 0u;
  pokerlist_.Clear();
}

bool TexasUserPoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasUserPoker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userpos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pokerlist;
        break;
      }

      // repeated .texas.Card pokerlist = 2;
      case 2: {
        if (tag == 18) {
         parse_pokerlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pokerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pokerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pokerlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasUserPoker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasUserPoker)
  return false;
#undef DO_
}

void TexasUserPoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasUserPoker)
  // optional uint32 userpos = 1;
  if (this->userpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userpos(), output);
  }

  // repeated .texas.Card pokerlist = 2;
  for (unsigned int i = 0, n = this->pokerlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pokerlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasUserPoker)
}

::google::protobuf::uint8* TexasUserPoker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasUserPoker)
  // optional uint32 userpos = 1;
  if (this->userpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userpos(), target);
  }

  // repeated .texas.Card pokerlist = 2;
  for (unsigned int i = 0, n = this->pokerlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pokerlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasUserPoker)
  return target;
}

int TexasUserPoker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasUserPoker)
  int total_size = 0;

  // optional uint32 userpos = 1;
  if (this->userpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userpos());
  }

  // repeated .texas.Card pokerlist = 2;
  total_size += 1 * this->pokerlist_size();
  for (int i = 0; i < this->pokerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pokerlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasUserPoker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasUserPoker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasUserPoker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasUserPoker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasUserPoker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasUserPoker)
    MergeFrom(*source);
  }
}

void TexasUserPoker::MergeFrom(const TexasUserPoker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasUserPoker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pokerlist_.MergeFrom(from.pokerlist_);
  if (from.userpos() != 0) {
    set_userpos(from.userpos());
  }
}

void TexasUserPoker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasUserPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasUserPoker::CopyFrom(const TexasUserPoker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasUserPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasUserPoker::IsInitialized() const {

  return true;
}

void TexasUserPoker::Swap(TexasUserPoker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasUserPoker::InternalSwap(TexasUserPoker* other) {
  std::swap(userpos_, other->userpos_);
  pokerlist_.UnsafeArenaSwap(&other->pokerlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasUserPoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasUserPoker_descriptor_;
  metadata.reflection = TexasUserPoker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasUserPoker

// optional uint32 userpos = 1;
void TexasUserPoker::clear_userpos() {
  userpos_ = 0u;
}
 ::google::protobuf::uint32 TexasUserPoker::userpos() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserPoker.userpos)
  return userpos_;
}
 void TexasUserPoker::set_userpos(::google::protobuf::uint32 value) {
  
  userpos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserPoker.userpos)
}

// repeated .texas.Card pokerlist = 2;
int TexasUserPoker::pokerlist_size() const {
  return pokerlist_.size();
}
void TexasUserPoker::clear_pokerlist() {
  pokerlist_.Clear();
}
const ::texas::Card& TexasUserPoker::pokerlist(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasUserPoker.pokerlist)
  return pokerlist_.Get(index);
}
::texas::Card* TexasUserPoker::mutable_pokerlist(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasUserPoker.pokerlist)
  return pokerlist_.Mutable(index);
}
::texas::Card* TexasUserPoker::add_pokerlist() {
  // @@protoc_insertion_point(field_add:texas.TexasUserPoker.pokerlist)
  return pokerlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasUserPoker::mutable_pokerlist() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasUserPoker.pokerlist)
  return &pokerlist_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasUserPoker::pokerlist() const {
  // @@protoc_insertion_point(field_list:texas.TexasUserPoker.pokerlist)
  return pokerlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasDeskResultinfo::kPubpokerFieldNumber;
const int TexasDeskResultinfo::kUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasDeskResultinfo::TexasDeskResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasDeskResultinfo)
}

void TexasDeskResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasDeskResultinfo::TexasDeskResultinfo(const TexasDeskResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasDeskResultinfo)
}

void TexasDeskResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TexasDeskResultinfo::~TexasDeskResultinfo() {
  // @@protoc_insertion_point(destructor:texas.TexasDeskResultinfo)
  SharedDtor();
}

void TexasDeskResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TexasDeskResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasDeskResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasDeskResultinfo_descriptor_;
}

const TexasDeskResultinfo& TexasDeskResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasDeskResultinfo* TexasDeskResultinfo::default_instance_ = NULL;

TexasDeskResultinfo* TexasDeskResultinfo::New(::google::protobuf::Arena* arena) const {
  TexasDeskResultinfo* n = new TexasDeskResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasDeskResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasDeskResultinfo)
  pubpoker_.Clear();
  userlist_.Clear();
}

bool TexasDeskResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasDeskResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .texas.Card pubpoker = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pubpoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pubpoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pubpoker;
        if (input->ExpectTag(18)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .texas.TexasUserResultinfo userlist = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasDeskResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasDeskResultinfo)
  return false;
#undef DO_
}

void TexasDeskResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasDeskResultinfo)
  // repeated .texas.Card pubpoker = 1;
  for (unsigned int i = 0, n = this->pubpoker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pubpoker(i), output);
  }

  // repeated .texas.TexasUserResultinfo userlist = 2;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasDeskResultinfo)
}

::google::protobuf::uint8* TexasDeskResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasDeskResultinfo)
  // repeated .texas.Card pubpoker = 1;
  for (unsigned int i = 0, n = this->pubpoker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pubpoker(i), false, target);
  }

  // repeated .texas.TexasUserResultinfo userlist = 2;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->userlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasDeskResultinfo)
  return target;
}

int TexasDeskResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasDeskResultinfo)
  int total_size = 0;

  // repeated .texas.Card pubpoker = 1;
  total_size += 1 * this->pubpoker_size();
  for (int i = 0; i < this->pubpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pubpoker(i));
  }

  // repeated .texas.TexasUserResultinfo userlist = 2;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasDeskResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasDeskResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasDeskResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasDeskResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasDeskResultinfo)
    MergeFrom(*source);
  }
}

void TexasDeskResultinfo::MergeFrom(const TexasDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pubpoker_.MergeFrom(from.pubpoker_);
  userlist_.MergeFrom(from.userlist_);
}

void TexasDeskResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasDeskResultinfo::CopyFrom(const TexasDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasDeskResultinfo::IsInitialized() const {

  return true;
}

void TexasDeskResultinfo::Swap(TexasDeskResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasDeskResultinfo::InternalSwap(TexasDeskResultinfo* other) {
  pubpoker_.UnsafeArenaSwap(&other->pubpoker_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasDeskResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasDeskResultinfo_descriptor_;
  metadata.reflection = TexasDeskResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasDeskResultinfo

// repeated .texas.Card pubpoker = 1;
int TexasDeskResultinfo::pubpoker_size() const {
  return pubpoker_.size();
}
void TexasDeskResultinfo::clear_pubpoker() {
  pubpoker_.Clear();
}
const ::texas::Card& TexasDeskResultinfo::pubpoker(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskResultinfo.pubpoker)
  return pubpoker_.Get(index);
}
::texas::Card* TexasDeskResultinfo::mutable_pubpoker(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskResultinfo.pubpoker)
  return pubpoker_.Mutable(index);
}
::texas::Card* TexasDeskResultinfo::add_pubpoker() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskResultinfo.pubpoker)
  return pubpoker_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasDeskResultinfo::mutable_pubpoker() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskResultinfo.pubpoker)
  return &pubpoker_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasDeskResultinfo::pubpoker() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskResultinfo.pubpoker)
  return pubpoker_;
}

// repeated .texas.TexasUserResultinfo userlist = 2;
int TexasDeskResultinfo::userlist_size() const {
  return userlist_.size();
}
void TexasDeskResultinfo::clear_userlist() {
  userlist_.Clear();
}
const ::texas::TexasUserResultinfo& TexasDeskResultinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskResultinfo.userlist)
  return userlist_.Get(index);
}
::texas::TexasUserResultinfo* TexasDeskResultinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskResultinfo.userlist)
  return userlist_.Mutable(index);
}
::texas::TexasUserResultinfo* TexasDeskResultinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskResultinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::TexasUserResultinfo >*
TexasDeskResultinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskResultinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::TexasUserResultinfo >&
TexasDeskResultinfo::userlist() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskResultinfo.userlist)
  return userlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasUserResultinfo::kUidFieldNumber;
const int TexasUserResultinfo::kPosFieldNumber;
const int TexasUserResultinfo::kResultFieldNumber;
const int TexasUserResultinfo::kValueFieldNumber;
const int TexasUserResultinfo::kCoinFieldNumber;
const int TexasUserResultinfo::kUsercardFieldNumber;
const int TexasUserResultinfo::kGamevalueFieldNumber;
const int TexasUserResultinfo::kRankFieldNumber;
const int TexasUserResultinfo::kLeftvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasUserResultinfo::TexasUserResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasUserResultinfo)
}

void TexasUserResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasUserResultinfo::TexasUserResultinfo(const TexasUserResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasUserResultinfo)
}

void TexasUserResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0u;
  pos_ = 0u;
  result_ = 0u;
  value_ = 0u;
  coin_ = 0u;
  gamevalue_ = 0;
  rank_ = 0u;
  leftvalue_ = 0u;
}

TexasUserResultinfo::~TexasUserResultinfo() {
  // @@protoc_insertion_point(destructor:texas.TexasUserResultinfo)
  SharedDtor();
}

void TexasUserResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TexasUserResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasUserResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasUserResultinfo_descriptor_;
}

const TexasUserResultinfo& TexasUserResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasUserResultinfo* TexasUserResultinfo::default_instance_ = NULL;

TexasUserResultinfo* TexasUserResultinfo::New(::google::protobuf::Arena* arena) const {
  TexasUserResultinfo* n = new TexasUserResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasUserResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasUserResultinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TexasUserResultinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TexasUserResultinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, value_);
  ZR_(coin_, rank_);
  leftvalue_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  usercard_.Clear();
}

bool TexasUserResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasUserResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional uint32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 5;
      case 5: {
        if (tag == 40) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_usercard;
        break;
      }

      // repeated .texas.Card usercard = 6;
      case 6: {
        if (tag == 50) {
         parse_usercard:
          DO_(input->IncrementRecursionDepth());
         parse_loop_usercard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_usercard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_usercard;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 7;
      case 7: {
        if (tag == 56) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 8;
      case 8: {
        if (tag == 64) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_leftvalue;
        break;
      }

      // optional uint32 leftvalue = 9;
      case 9: {
        if (tag == 72) {
         parse_leftvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftvalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasUserResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasUserResultinfo)
  return false;
#undef DO_
}

void TexasUserResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // optional uint32 value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // optional uint32 coin = 5;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coin(), output);
  }

  // repeated .texas.Card usercard = 6;
  for (unsigned int i = 0, n = this->usercard_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->usercard(i), output);
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gamevalue(), output);
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rank(), output);
  }

  // optional uint32 leftvalue = 9;
  if (this->leftvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->leftvalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasUserResultinfo)
}

::google::protobuf::uint8* TexasUserResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // optional uint32 value = 4;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // optional uint32 coin = 5;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->coin(), target);
  }

  // repeated .texas.Card usercard = 6;
  for (unsigned int i = 0, n = this->usercard_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->usercard(i), false, target);
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gamevalue(), target);
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rank(), target);
  }

  // optional uint32 leftvalue = 9;
  if (this->leftvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->leftvalue(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasUserResultinfo)
  return target;
}

int TexasUserResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasUserResultinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional uint32 value = 4;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // optional uint32 coin = 5;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // optional uint32 leftvalue = 9;
  if (this->leftvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftvalue());
  }

  // repeated .texas.Card usercard = 6;
  total_size += 1 * this->usercard_size();
  for (int i = 0; i < this->usercard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercard(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasUserResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasUserResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasUserResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasUserResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasUserResultinfo)
    MergeFrom(*source);
  }
}

void TexasUserResultinfo::MergeFrom(const TexasUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  usercard_.MergeFrom(from.usercard_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.leftvalue() != 0) {
    set_leftvalue(from.leftvalue());
  }
}

void TexasUserResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasUserResultinfo::CopyFrom(const TexasUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasUserResultinfo::IsInitialized() const {

  return true;
}

void TexasUserResultinfo::Swap(TexasUserResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasUserResultinfo::InternalSwap(TexasUserResultinfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  std::swap(value_, other->value_);
  std::swap(coin_, other->coin_);
  usercard_.UnsafeArenaSwap(&other->usercard_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(rank_, other->rank_);
  std::swap(leftvalue_, other->leftvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasUserResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasUserResultinfo_descriptor_;
  metadata.reflection = TexasUserResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasUserResultinfo

// optional uint32 uid = 1;
void TexasUserResultinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 TexasUserResultinfo::uid() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.uid)
  return uid_;
}
 void TexasUserResultinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.uid)
}

// optional uint32 pos = 2;
void TexasUserResultinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 TexasUserResultinfo::pos() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.pos)
  return pos_;
}
 void TexasUserResultinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.pos)
}

// optional uint32 result = 3;
void TexasUserResultinfo::clear_result() {
  result_ = 0u;
}
 ::google::protobuf::uint32 TexasUserResultinfo::result() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.result)
  return result_;
}
 void TexasUserResultinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.result)
}

// optional uint32 value = 4;
void TexasUserResultinfo::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 TexasUserResultinfo::value() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.value)
  return value_;
}
 void TexasUserResultinfo::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.value)
}

// optional uint32 coin = 5;
void TexasUserResultinfo::clear_coin() {
  coin_ = 0u;
}
 ::google::protobuf::uint32 TexasUserResultinfo::coin() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.coin)
  return coin_;
}
 void TexasUserResultinfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.coin)
}

// repeated .texas.Card usercard = 6;
int TexasUserResultinfo::usercard_size() const {
  return usercard_.size();
}
void TexasUserResultinfo::clear_usercard() {
  usercard_.Clear();
}
const ::texas::Card& TexasUserResultinfo::usercard(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.usercard)
  return usercard_.Get(index);
}
::texas::Card* TexasUserResultinfo::mutable_usercard(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasUserResultinfo.usercard)
  return usercard_.Mutable(index);
}
::texas::Card* TexasUserResultinfo::add_usercard() {
  // @@protoc_insertion_point(field_add:texas.TexasUserResultinfo.usercard)
  return usercard_.Add();
}
::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasUserResultinfo::mutable_usercard() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasUserResultinfo.usercard)
  return &usercard_;
}
const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasUserResultinfo::usercard() const {
  // @@protoc_insertion_point(field_list:texas.TexasUserResultinfo.usercard)
  return usercard_;
}

// optional int32 gamevalue = 7;
void TexasUserResultinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 TexasUserResultinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.gamevalue)
  return gamevalue_;
}
 void TexasUserResultinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.gamevalue)
}

// optional uint32 rank = 8;
void TexasUserResultinfo::clear_rank() {
  rank_ = 0u;
}
 ::google::protobuf::uint32 TexasUserResultinfo::rank() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.rank)
  return rank_;
}
 void TexasUserResultinfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.rank)
}

// optional uint32 leftvalue = 9;
void TexasUserResultinfo::clear_leftvalue() {
  leftvalue_ = 0u;
}
 ::google::protobuf::uint32 TexasUserResultinfo::leftvalue() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.leftvalue)
  return leftvalue_;
}
 void TexasUserResultinfo::set_leftvalue(::google::protobuf::uint32 value) {
  
  leftvalue_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.leftvalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasMatchInfo::kMatchidFieldNumber;
const int TexasMatchInfo::kTrunindexFieldNumber;
const int TexasMatchInfo::kCurnumFieldNumber;
const int TexasMatchInfo::kGamevalueFieldNumber;
const int TexasMatchInfo::kIfmatchFieldNumber;
const int TexasMatchInfo::kLeftnumFieldNumber;
const int TexasMatchInfo::kBegintimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasMatchInfo::TexasMatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasMatchInfo)
}

void TexasMatchInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasMatchInfo::TexasMatchInfo(const TexasMatchInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasMatchInfo)
}

void TexasMatchInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  matchid_ = 0u;
  trunindex_ = 0u;
  curnum_ = 0u;
  gamevalue_ = 0;
  ifmatch_ = 0;
  leftnum_ = 0u;
  begintime_ = 0u;
}

TexasMatchInfo::~TexasMatchInfo() {
  // @@protoc_insertion_point(destructor:texas.TexasMatchInfo)
  SharedDtor();
}

void TexasMatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TexasMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasMatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasMatchInfo_descriptor_;
}

const TexasMatchInfo& TexasMatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasMatchInfo* TexasMatchInfo::default_instance_ = NULL;

TexasMatchInfo* TexasMatchInfo::New(::google::protobuf::Arena* arena) const {
  TexasMatchInfo* n = new TexasMatchInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasMatchInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TexasMatchInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TexasMatchInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(matchid_, begintime_);

#undef ZR_HELPER_
#undef ZR_

}

bool TexasMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasMatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matchid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trunindex;
        break;
      }

      // optional uint32 trunindex = 2;
      case 2: {
        if (tag == 16) {
         parse_trunindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trunindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curnum;
        break;
      }

      // optional uint32 curnum = 3;
      case 3: {
        if (tag == 24) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 4;
      case 4: {
        if (tag == 32) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ifmatch;
        break;
      }

      // optional int32 ifmatch = 5;
      case 5: {
        if (tag == 40) {
         parse_ifmatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifmatch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_leftnum;
        break;
      }

      // optional uint32 leftnum = 6;
      case 6: {
        if (tag == 48) {
         parse_leftnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_begintime;
        break;
      }

      // optional uint32 begintime = 7;
      case 7: {
        if (tag == 56) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasMatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasMatchInfo)
  return false;
#undef DO_
}

void TexasMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trunindex(), output);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curnum(), output);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gamevalue(), output);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifmatch(), output);
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leftnum(), output);
  }

  // optional uint32 begintime = 7;
  if (this->begintime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begintime(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasMatchInfo)
}

::google::protobuf::uint8* TexasMatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trunindex(), target);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curnum(), target);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gamevalue(), target);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifmatch(), target);
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->leftnum(), target);
  }

  // optional uint32 begintime = 7;
  if (this->begintime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begintime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasMatchInfo)
  return target;
}

int TexasMatchInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasMatchInfo)
  int total_size = 0;

  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trunindex());
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curnum());
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ifmatch());
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftnum());
  }

  // optional uint32 begintime = 7;
  if (this->begintime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begintime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasMatchInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasMatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasMatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasMatchInfo)
    MergeFrom(*source);
  }
}

void TexasMatchInfo::MergeFrom(const TexasMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.trunindex() != 0) {
    set_trunindex(from.trunindex());
  }
  if (from.curnum() != 0) {
    set_curnum(from.curnum());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.ifmatch() != 0) {
    set_ifmatch(from.ifmatch());
  }
  if (from.leftnum() != 0) {
    set_leftnum(from.leftnum());
  }
  if (from.begintime() != 0) {
    set_begintime(from.begintime());
  }
}

void TexasMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasMatchInfo::CopyFrom(const TexasMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasMatchInfo::IsInitialized() const {

  return true;
}

void TexasMatchInfo::Swap(TexasMatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasMatchInfo::InternalSwap(TexasMatchInfo* other) {
  std::swap(matchid_, other->matchid_);
  std::swap(trunindex_, other->trunindex_);
  std::swap(curnum_, other->curnum_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(ifmatch_, other->ifmatch_);
  std::swap(leftnum_, other->leftnum_);
  std::swap(begintime_, other->begintime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasMatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasMatchInfo_descriptor_;
  metadata.reflection = TexasMatchInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasMatchInfo

// optional uint32 matchid = 1;
void TexasMatchInfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 TexasMatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.matchid)
  return matchid_;
}
 void TexasMatchInfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.matchid)
}

// optional uint32 trunindex = 2;
void TexasMatchInfo::clear_trunindex() {
  trunindex_ = 0u;
}
 ::google::protobuf::uint32 TexasMatchInfo::trunindex() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.trunindex)
  return trunindex_;
}
 void TexasMatchInfo::set_trunindex(::google::protobuf::uint32 value) {
  
  trunindex_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.trunindex)
}

// optional uint32 curnum = 3;
void TexasMatchInfo::clear_curnum() {
  curnum_ = 0u;
}
 ::google::protobuf::uint32 TexasMatchInfo::curnum() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.curnum)
  return curnum_;
}
 void TexasMatchInfo::set_curnum(::google::protobuf::uint32 value) {
  
  curnum_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.curnum)
}

// optional int32 gamevalue = 4;
void TexasMatchInfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 TexasMatchInfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.gamevalue)
  return gamevalue_;
}
 void TexasMatchInfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.gamevalue)
}

// optional int32 ifmatch = 5;
void TexasMatchInfo::clear_ifmatch() {
  ifmatch_ = 0;
}
 ::google::protobuf::int32 TexasMatchInfo::ifmatch() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.ifmatch)
  return ifmatch_;
}
 void TexasMatchInfo::set_ifmatch(::google::protobuf::int32 value) {
  
  ifmatch_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.ifmatch)
}

// optional uint32 leftnum = 6;
void TexasMatchInfo::clear_leftnum() {
  leftnum_ = 0u;
}
 ::google::protobuf::uint32 TexasMatchInfo::leftnum() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.leftnum)
  return leftnum_;
}
 void TexasMatchInfo::set_leftnum(::google::protobuf::uint32 value) {
  
  leftnum_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.leftnum)
}

// optional uint32 begintime = 7;
void TexasMatchInfo::clear_begintime() {
  begintime_ = 0u;
}
 ::google::protobuf::uint32 TexasMatchInfo::begintime() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.begintime)
  return begintime_;
}
 void TexasMatchInfo::set_begintime(::google::protobuf::uint32 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.begintime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasSelfRoomInfo::kRoomidFieldNumber;
const int TexasSelfRoomInfo::kRoomcodeFieldNumber;
const int TexasSelfRoomInfo::kEndtimeFieldNumber;
const int TexasSelfRoomInfo::kCreateuidFieldNumber;
const int TexasSelfRoomInfo::kBasecoinFieldNumber;
const int TexasSelfRoomInfo::kPlaycountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasSelfRoomInfo::TexasSelfRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:texas.TexasSelfRoomInfo)
}

void TexasSelfRoomInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TexasSelfRoomInfo::TexasSelfRoomInfo(const TexasSelfRoomInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:texas.TexasSelfRoomInfo)
}

void TexasSelfRoomInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0u;
  roomcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = 0u;
  createuid_ = 0u;
  basecoin_ = 0u;
  playcount_ = 0u;
}

TexasSelfRoomInfo::~TexasSelfRoomInfo() {
  // @@protoc_insertion_point(destructor:texas.TexasSelfRoomInfo)
  SharedDtor();
}

void TexasSelfRoomInfo::SharedDtor() {
  roomcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TexasSelfRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasSelfRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexasSelfRoomInfo_descriptor_;
}

const TexasSelfRoomInfo& TexasSelfRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_2eproto();
  return *default_instance_;
}

TexasSelfRoomInfo* TexasSelfRoomInfo::default_instance_ = NULL;

TexasSelfRoomInfo* TexasSelfRoomInfo::New(::google::protobuf::Arena* arena) const {
  TexasSelfRoomInfo* n = new TexasSelfRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasSelfRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:texas.TexasSelfRoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TexasSelfRoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TexasSelfRoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roomid_, playcount_);
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TexasSelfRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:texas.TexasSelfRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roomid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomcode;
        break;
      }

      // optional bytes roomcode = 2;
      case 2: {
        if (tag == 18) {
         parse_roomcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createuid;
        break;
      }

      // optional uint32 createuid = 4;
      case 4: {
        if (tag == 32) {
         parse_createuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createuid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basecoin;
        break;
      }

      // optional uint32 basecoin = 5;
      case 5: {
        if (tag == 40) {
         parse_basecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basecoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playcount;
        break;
      }

      // optional uint32 playcount = 6;
      case 6: {
        if (tag == 48) {
         parse_playcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:texas.TexasSelfRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:texas.TexasSelfRoomInfo)
  return false;
#undef DO_
}

void TexasSelfRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:texas.TexasSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomcode(), output);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createuid(), output);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->basecoin(), output);
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:texas.TexasSelfRoomInfo)
}

::google::protobuf::uint8* TexasSelfRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:texas.TexasSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomcode(), target);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createuid(), target);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->basecoin(), target);
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:texas.TexasSelfRoomInfo)
  return target;
}

int TexasSelfRoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:texas.TexasSelfRoomInfo)
  int total_size = 0;

  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomcode());
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endtime());
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createuid());
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->basecoin());
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playcount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasSelfRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:texas.TexasSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TexasSelfRoomInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasSelfRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:texas.TexasSelfRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:texas.TexasSelfRoomInfo)
    MergeFrom(*source);
  }
}

void TexasSelfRoomInfo::MergeFrom(const TexasSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:texas.TexasSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.roomcode().size() > 0) {

    roomcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomcode_);
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.createuid() != 0) {
    set_createuid(from.createuid());
  }
  if (from.basecoin() != 0) {
    set_basecoin(from.basecoin());
  }
  if (from.playcount() != 0) {
    set_playcount(from.playcount());
  }
}

void TexasSelfRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:texas.TexasSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasSelfRoomInfo::CopyFrom(const TexasSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texas.TexasSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasSelfRoomInfo::IsInitialized() const {

  return true;
}

void TexasSelfRoomInfo::Swap(TexasSelfRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasSelfRoomInfo::InternalSwap(TexasSelfRoomInfo* other) {
  std::swap(roomid_, other->roomid_);
  roomcode_.Swap(&other->roomcode_);
  std::swap(endtime_, other->endtime_);
  std::swap(createuid_, other->createuid_);
  std::swap(basecoin_, other->basecoin_);
  std::swap(playcount_, other->playcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasSelfRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexasSelfRoomInfo_descriptor_;
  metadata.reflection = TexasSelfRoomInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasSelfRoomInfo

// optional uint32 roomid = 1;
void TexasSelfRoomInfo::clear_roomid() {
  roomid_ = 0u;
}
 ::google::protobuf::uint32 TexasSelfRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.roomid)
  return roomid_;
}
 void TexasSelfRoomInfo::set_roomid(::google::protobuf::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.roomid)
}

// optional bytes roomcode = 2;
void TexasSelfRoomInfo::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TexasSelfRoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.roomcode)
  return roomcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TexasSelfRoomInfo::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.roomcode)
}
 void TexasSelfRoomInfo::set_roomcode(const char* value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas.TexasSelfRoomInfo.roomcode)
}
 void TexasSelfRoomInfo::set_roomcode(const void* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas.TexasSelfRoomInfo.roomcode)
}
 ::std::string* TexasSelfRoomInfo::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:texas.TexasSelfRoomInfo.roomcode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TexasSelfRoomInfo::release_roomcode() {
  // @@protoc_insertion_point(field_release:texas.TexasSelfRoomInfo.roomcode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TexasSelfRoomInfo::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:texas.TexasSelfRoomInfo.roomcode)
}

// optional uint32 endtime = 3;
void TexasSelfRoomInfo::clear_endtime() {
  endtime_ = 0u;
}
 ::google::protobuf::uint32 TexasSelfRoomInfo::endtime() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.endtime)
  return endtime_;
}
 void TexasSelfRoomInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.endtime)
}

// optional uint32 createuid = 4;
void TexasSelfRoomInfo::clear_createuid() {
  createuid_ = 0u;
}
 ::google::protobuf::uint32 TexasSelfRoomInfo::createuid() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.createuid)
  return createuid_;
}
 void TexasSelfRoomInfo::set_createuid(::google::protobuf::uint32 value) {
  
  createuid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.createuid)
}

// optional uint32 basecoin = 5;
void TexasSelfRoomInfo::clear_basecoin() {
  basecoin_ = 0u;
}
 ::google::protobuf::uint32 TexasSelfRoomInfo::basecoin() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.basecoin)
  return basecoin_;
}
 void TexasSelfRoomInfo::set_basecoin(::google::protobuf::uint32 value) {
  
  basecoin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.basecoin)
}

// optional uint32 playcount = 6;
void TexasSelfRoomInfo::clear_playcount() {
  playcount_ = 0u;
}
 ::google::protobuf::uint32 TexasSelfRoomInfo::playcount() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.playcount)
  return playcount_;
}
 void TexasSelfRoomInfo::set_playcount(::google::protobuf::uint32 value) {
  
  playcount_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.playcount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace texas

// @@protoc_insertion_point(global_scope)
