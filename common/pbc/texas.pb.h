// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texas.proto

#ifndef PROTOBUF_texas_2eproto__INCLUDED
#define PROTOBUF_texas_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace texas {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_texas_2eproto();
void protobuf_AssignDesc_texas_2eproto();
void protobuf_ShutdownFile_texas_2eproto();

class Card;
class TexasDeskResultinfo;
class TexasDeskUserinfo;
class TexasDeskinfo;
class TexasEdgePool;
class TexasEdgePoolInfo;
class TexasMatchInfo;
class TexasSelfRoomInfo;
class TexasUserPoker;
class TexasUserPokerList;
class TexasUserResultinfo;

// ===================================================================

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  void Swap(Card* other);

  // implements Message ----------------------------------------------

  inline Card* New() const { return New(NULL); }

  Card* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:texas.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static Card* default_instance_;
};
// -------------------------------------------------------------------

class TexasDeskUserinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasDeskUserinfo) */ {
 public:
  TexasDeskUserinfo();
  virtual ~TexasDeskUserinfo();

  TexasDeskUserinfo(const TexasDeskUserinfo& from);

  inline TexasDeskUserinfo& operator=(const TexasDeskUserinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasDeskUserinfo& default_instance();

  void Swap(TexasDeskUserinfo* other);

  // implements Message ----------------------------------------------

  inline TexasDeskUserinfo* New() const { return New(NULL); }

  TexasDeskUserinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasDeskUserinfo& from);
  void MergeFrom(const TexasDeskUserinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasDeskUserinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional bytes uname = 2;
  void clear_uname();
  static const int kUnameFieldNumber = 2;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  void set_uname(const char* value);
  void set_uname(const void* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // optional uint32 coinnum = 3;
  void clear_coinnum();
  static const int kCoinnumFieldNumber = 3;
  ::google::protobuf::uint32 coinnum() const;
  void set_coinnum(::google::protobuf::uint32 value);

  // optional bytes headurl = 4;
  void clear_headurl();
  static const int kHeadurlFieldNumber = 4;
  const ::std::string& headurl() const;
  void set_headurl(const ::std::string& value);
  void set_headurl(const char* value);
  void set_headurl(const void* value, size_t size);
  ::std::string* mutable_headurl();
  ::std::string* release_headurl();
  void set_allocated_headurl(::std::string* headurl);

  // optional uint32 deskid = 5;
  void clear_deskid();
  static const int kDeskidFieldNumber = 5;
  ::google::protobuf::uint32 deskid() const;
  void set_deskid(::google::protobuf::uint32 value);

  // optional uint32 pos = 6;
  void clear_pos();
  static const int kPosFieldNumber = 6;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // optional uint32 status = 7;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 offline = 8;
  void clear_offline();
  static const int kOfflineFieldNumber = 8;
  ::google::protobuf::uint32 offline() const;
  void set_offline(::google::protobuf::uint32 value);

  // repeated .texas.Card poker = 9;
  int poker_size() const;
  void clear_poker();
  static const int kPokerFieldNumber = 9;
  const ::texas::Card& poker(int index) const;
  ::texas::Card* mutable_poker(int index);
  ::texas::Card* add_poker();
  ::google::protobuf::RepeatedPtrField< ::texas::Card >*
      mutable_poker();
  const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
      poker() const;

  // optional uint32 gender = 10;
  void clear_gender();
  static const int kGenderFieldNumber = 10;
  ::google::protobuf::uint32 gender() const;
  void set_gender(::google::protobuf::uint32 value);

  // optional uint32 integral = 11;
  void clear_integral();
  static const int kIntegralFieldNumber = 11;
  ::google::protobuf::uint32 integral() const;
  void set_integral(::google::protobuf::uint32 value);

  // optional int32 gamevalue = 12;
  void clear_gamevalue();
  static const int kGamevalueFieldNumber = 12;
  ::google::protobuf::int32 gamevalue() const;
  void set_gamevalue(::google::protobuf::int32 value);

  // optional uint32 totalbet = 13;
  void clear_totalbet();
  static const int kTotalbetFieldNumber = 13;
  ::google::protobuf::uint32 totalbet() const;
  void set_totalbet(::google::protobuf::uint32 value);

  // optional uint32 curbet = 14;
  void clear_curbet();
  static const int kCurbetFieldNumber = 14;
  ::google::protobuf::uint32 curbet() const;
  void set_curbet(::google::protobuf::uint32 value);

  // optional uint32 roomcoin = 15;
  void clear_roomcoin();
  static const int kRoomcoinFieldNumber = 15;
  ::google::protobuf::uint32 roomcoin() const;
  void set_roomcoin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:texas.TexasDeskUserinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 coinnum_;
  ::google::protobuf::internal::ArenaStringPtr headurl_;
  ::google::protobuf::uint32 deskid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 offline_;
  ::google::protobuf::RepeatedPtrField< ::texas::Card > poker_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 integral_;
  ::google::protobuf::int32 gamevalue_;
  ::google::protobuf::uint32 totalbet_;
  ::google::protobuf::uint32 curbet_;
  ::google::protobuf::uint32 roomcoin_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasDeskUserinfo* default_instance_;
};
// -------------------------------------------------------------------

class TexasDeskinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasDeskinfo) */ {
 public:
  TexasDeskinfo();
  virtual ~TexasDeskinfo();

  TexasDeskinfo(const TexasDeskinfo& from);

  inline TexasDeskinfo& operator=(const TexasDeskinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasDeskinfo& default_instance();

  void Swap(TexasDeskinfo* other);

  // implements Message ----------------------------------------------

  inline TexasDeskinfo* New() const { return New(NULL); }

  TexasDeskinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasDeskinfo& from);
  void MergeFrom(const TexasDeskinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasDeskinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deskid = 1;
  void clear_deskid();
  static const int kDeskidFieldNumber = 1;
  ::google::protobuf::uint32 deskid() const;
  void set_deskid(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 curpos = 3;
  void clear_curpos();
  static const int kCurposFieldNumber = 3;
  ::google::protobuf::uint32 curpos() const;
  void set_curpos(::google::protobuf::uint32 value);

  // optional uint32 totalbet = 4;
  void clear_totalbet();
  static const int kTotalbetFieldNumber = 4;
  ::google::protobuf::uint32 totalbet() const;
  void set_totalbet(::google::protobuf::uint32 value);

  // optional uint32 curbet = 5;
  void clear_curbet();
  static const int kCurbetFieldNumber = 5;
  ::google::protobuf::uint32 curbet() const;
  void set_curbet(::google::protobuf::uint32 value);

  // optional uint32 hostpos = 6;
  void clear_hostpos();
  static const int kHostposFieldNumber = 6;
  ::google::protobuf::uint32 hostpos() const;
  void set_hostpos(::google::protobuf::uint32 value);

  // repeated .texas.Card pubpoker = 7;
  int pubpoker_size() const;
  void clear_pubpoker();
  static const int kPubpokerFieldNumber = 7;
  const ::texas::Card& pubpoker(int index) const;
  ::texas::Card* mutable_pubpoker(int index);
  ::texas::Card* add_pubpoker();
  ::google::protobuf::RepeatedPtrField< ::texas::Card >*
      mutable_pubpoker();
  const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
      pubpoker() const;

  // repeated .texas.TexasDeskUserinfo userlist = 8;
  int userlist_size() const;
  void clear_userlist();
  static const int kUserlistFieldNumber = 8;
  const ::texas::TexasDeskUserinfo& userlist(int index) const;
  ::texas::TexasDeskUserinfo* mutable_userlist(int index);
  ::texas::TexasDeskUserinfo* add_userlist();
  ::google::protobuf::RepeatedPtrField< ::texas::TexasDeskUserinfo >*
      mutable_userlist();
  const ::google::protobuf::RepeatedPtrField< ::texas::TexasDeskUserinfo >&
      userlist() const;

  // optional uint32 matchid = 9;
  void clear_matchid();
  static const int kMatchidFieldNumber = 9;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // repeated .texas.TexasEdgePoolInfo info = 10;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 10;
  const ::texas::TexasEdgePoolInfo& info(int index) const;
  ::texas::TexasEdgePoolInfo* mutable_info(int index);
  ::texas::TexasEdgePoolInfo* add_info();
  ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:texas.TexasDeskinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 deskid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 curpos_;
  ::google::protobuf::uint32 totalbet_;
  ::google::protobuf::uint32 curbet_;
  ::google::protobuf::uint32 hostpos_;
  ::google::protobuf::RepeatedPtrField< ::texas::Card > pubpoker_;
  ::google::protobuf::RepeatedPtrField< ::texas::TexasDeskUserinfo > userlist_;
  ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo > info_;
  ::google::protobuf::uint32 matchid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasDeskinfo* default_instance_;
};
// -------------------------------------------------------------------

class TexasEdgePool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasEdgePool) */ {
 public:
  TexasEdgePool();
  virtual ~TexasEdgePool();

  TexasEdgePool(const TexasEdgePool& from);

  inline TexasEdgePool& operator=(const TexasEdgePool& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasEdgePool& default_instance();

  void Swap(TexasEdgePool* other);

  // implements Message ----------------------------------------------

  inline TexasEdgePool* New() const { return New(NULL); }

  TexasEdgePool* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasEdgePool& from);
  void MergeFrom(const TexasEdgePool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasEdgePool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 totalbet = 1;
  void clear_totalbet();
  static const int kTotalbetFieldNumber = 1;
  ::google::protobuf::uint32 totalbet() const;
  void set_totalbet(::google::protobuf::uint32 value);

  // repeated .texas.TexasEdgePoolInfo info = 2;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::texas::TexasEdgePoolInfo& info(int index) const;
  ::texas::TexasEdgePoolInfo* mutable_info(int index);
  ::texas::TexasEdgePoolInfo* add_info();
  ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:texas.TexasEdgePool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo > info_;
  ::google::protobuf::uint32 totalbet_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasEdgePool* default_instance_;
};
// -------------------------------------------------------------------

class TexasEdgePoolInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasEdgePoolInfo) */ {
 public:
  TexasEdgePoolInfo();
  virtual ~TexasEdgePoolInfo();

  TexasEdgePoolInfo(const TexasEdgePoolInfo& from);

  inline TexasEdgePoolInfo& operator=(const TexasEdgePoolInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasEdgePoolInfo& default_instance();

  void Swap(TexasEdgePoolInfo* other);

  // implements Message ----------------------------------------------

  inline TexasEdgePoolInfo* New() const { return New(NULL); }

  TexasEdgePoolInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasEdgePoolInfo& from);
  void MergeFrom(const TexasEdgePoolInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasEdgePoolInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 poolindex = 1;
  void clear_poolindex();
  static const int kPoolindexFieldNumber = 1;
  ::google::protobuf::uint32 poolindex() const;
  void set_poolindex(::google::protobuf::uint32 value);

  // optional uint32 allincoin = 2;
  void clear_allincoin();
  static const int kAllincoinFieldNumber = 2;
  ::google::protobuf::uint32 allincoin() const;
  void set_allincoin(::google::protobuf::uint32 value);

  // optional uint32 coin = 3;
  void clear_coin();
  static const int kCoinFieldNumber = 3;
  ::google::protobuf::uint32 coin() const;
  void set_coin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:texas.TexasEdgePoolInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 poolindex_;
  ::google::protobuf::uint32 allincoin_;
  ::google::protobuf::uint32 coin_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasEdgePoolInfo* default_instance_;
};
// -------------------------------------------------------------------

class TexasUserPokerList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasUserPokerList) */ {
 public:
  TexasUserPokerList();
  virtual ~TexasUserPokerList();

  TexasUserPokerList(const TexasUserPokerList& from);

  inline TexasUserPokerList& operator=(const TexasUserPokerList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasUserPokerList& default_instance();

  void Swap(TexasUserPokerList* other);

  // implements Message ----------------------------------------------

  inline TexasUserPokerList* New() const { return New(NULL); }

  TexasUserPokerList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasUserPokerList& from);
  void MergeFrom(const TexasUserPokerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasUserPokerList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .texas.TexasUserPoker userlist = 1;
  int userlist_size() const;
  void clear_userlist();
  static const int kUserlistFieldNumber = 1;
  const ::texas::TexasUserPoker& userlist(int index) const;
  ::texas::TexasUserPoker* mutable_userlist(int index);
  ::texas::TexasUserPoker* add_userlist();
  ::google::protobuf::RepeatedPtrField< ::texas::TexasUserPoker >*
      mutable_userlist();
  const ::google::protobuf::RepeatedPtrField< ::texas::TexasUserPoker >&
      userlist() const;

  // @@protoc_insertion_point(class_scope:texas.TexasUserPokerList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::texas::TexasUserPoker > userlist_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasUserPokerList* default_instance_;
};
// -------------------------------------------------------------------

class TexasUserPoker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasUserPoker) */ {
 public:
  TexasUserPoker();
  virtual ~TexasUserPoker();

  TexasUserPoker(const TexasUserPoker& from);

  inline TexasUserPoker& operator=(const TexasUserPoker& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasUserPoker& default_instance();

  void Swap(TexasUserPoker* other);

  // implements Message ----------------------------------------------

  inline TexasUserPoker* New() const { return New(NULL); }

  TexasUserPoker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasUserPoker& from);
  void MergeFrom(const TexasUserPoker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasUserPoker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 userpos = 1;
  void clear_userpos();
  static const int kUserposFieldNumber = 1;
  ::google::protobuf::uint32 userpos() const;
  void set_userpos(::google::protobuf::uint32 value);

  // repeated .texas.Card pokerlist = 2;
  int pokerlist_size() const;
  void clear_pokerlist();
  static const int kPokerlistFieldNumber = 2;
  const ::texas::Card& pokerlist(int index) const;
  ::texas::Card* mutable_pokerlist(int index);
  ::texas::Card* add_pokerlist();
  ::google::protobuf::RepeatedPtrField< ::texas::Card >*
      mutable_pokerlist();
  const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
      pokerlist() const;

  // @@protoc_insertion_point(class_scope:texas.TexasUserPoker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::texas::Card > pokerlist_;
  ::google::protobuf::uint32 userpos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasUserPoker* default_instance_;
};
// -------------------------------------------------------------------

class TexasDeskResultinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasDeskResultinfo) */ {
 public:
  TexasDeskResultinfo();
  virtual ~TexasDeskResultinfo();

  TexasDeskResultinfo(const TexasDeskResultinfo& from);

  inline TexasDeskResultinfo& operator=(const TexasDeskResultinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasDeskResultinfo& default_instance();

  void Swap(TexasDeskResultinfo* other);

  // implements Message ----------------------------------------------

  inline TexasDeskResultinfo* New() const { return New(NULL); }

  TexasDeskResultinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasDeskResultinfo& from);
  void MergeFrom(const TexasDeskResultinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasDeskResultinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .texas.Card pubpoker = 1;
  int pubpoker_size() const;
  void clear_pubpoker();
  static const int kPubpokerFieldNumber = 1;
  const ::texas::Card& pubpoker(int index) const;
  ::texas::Card* mutable_pubpoker(int index);
  ::texas::Card* add_pubpoker();
  ::google::protobuf::RepeatedPtrField< ::texas::Card >*
      mutable_pubpoker();
  const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
      pubpoker() const;

  // repeated .texas.TexasUserResultinfo userlist = 2;
  int userlist_size() const;
  void clear_userlist();
  static const int kUserlistFieldNumber = 2;
  const ::texas::TexasUserResultinfo& userlist(int index) const;
  ::texas::TexasUserResultinfo* mutable_userlist(int index);
  ::texas::TexasUserResultinfo* add_userlist();
  ::google::protobuf::RepeatedPtrField< ::texas::TexasUserResultinfo >*
      mutable_userlist();
  const ::google::protobuf::RepeatedPtrField< ::texas::TexasUserResultinfo >&
      userlist() const;

  // @@protoc_insertion_point(class_scope:texas.TexasDeskResultinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::texas::Card > pubpoker_;
  ::google::protobuf::RepeatedPtrField< ::texas::TexasUserResultinfo > userlist_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasDeskResultinfo* default_instance_;
};
// -------------------------------------------------------------------

class TexasUserResultinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasUserResultinfo) */ {
 public:
  TexasUserResultinfo();
  virtual ~TexasUserResultinfo();

  TexasUserResultinfo(const TexasUserResultinfo& from);

  inline TexasUserResultinfo& operator=(const TexasUserResultinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasUserResultinfo& default_instance();

  void Swap(TexasUserResultinfo* other);

  // implements Message ----------------------------------------------

  inline TexasUserResultinfo* New() const { return New(NULL); }

  TexasUserResultinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasUserResultinfo& from);
  void MergeFrom(const TexasUserResultinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasUserResultinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional uint32 value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // optional uint32 coin = 5;
  void clear_coin();
  static const int kCoinFieldNumber = 5;
  ::google::protobuf::uint32 coin() const;
  void set_coin(::google::protobuf::uint32 value);

  // repeated .texas.Card usercard = 6;
  int usercard_size() const;
  void clear_usercard();
  static const int kUsercardFieldNumber = 6;
  const ::texas::Card& usercard(int index) const;
  ::texas::Card* mutable_usercard(int index);
  ::texas::Card* add_usercard();
  ::google::protobuf::RepeatedPtrField< ::texas::Card >*
      mutable_usercard();
  const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
      usercard() const;

  // optional int32 gamevalue = 7;
  void clear_gamevalue();
  static const int kGamevalueFieldNumber = 7;
  ::google::protobuf::int32 gamevalue() const;
  void set_gamevalue(::google::protobuf::int32 value);

  // optional uint32 rank = 8;
  void clear_rank();
  static const int kRankFieldNumber = 8;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint32 leftvalue = 9;
  void clear_leftvalue();
  static const int kLeftvalueFieldNumber = 9;
  ::google::protobuf::uint32 leftvalue() const;
  void set_leftvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:texas.TexasUserResultinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::RepeatedPtrField< ::texas::Card > usercard_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::int32 gamevalue_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 leftvalue_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasUserResultinfo* default_instance_;
};
// -------------------------------------------------------------------

class TexasMatchInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasMatchInfo) */ {
 public:
  TexasMatchInfo();
  virtual ~TexasMatchInfo();

  TexasMatchInfo(const TexasMatchInfo& from);

  inline TexasMatchInfo& operator=(const TexasMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasMatchInfo& default_instance();

  void Swap(TexasMatchInfo* other);

  // implements Message ----------------------------------------------

  inline TexasMatchInfo* New() const { return New(NULL); }

  TexasMatchInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasMatchInfo& from);
  void MergeFrom(const TexasMatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasMatchInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // optional uint32 trunindex = 2;
  void clear_trunindex();
  static const int kTrunindexFieldNumber = 2;
  ::google::protobuf::uint32 trunindex() const;
  void set_trunindex(::google::protobuf::uint32 value);

  // optional uint32 curnum = 3;
  void clear_curnum();
  static const int kCurnumFieldNumber = 3;
  ::google::protobuf::uint32 curnum() const;
  void set_curnum(::google::protobuf::uint32 value);

  // optional int32 gamevalue = 4;
  void clear_gamevalue();
  static const int kGamevalueFieldNumber = 4;
  ::google::protobuf::int32 gamevalue() const;
  void set_gamevalue(::google::protobuf::int32 value);

  // optional int32 ifmatch = 5;
  void clear_ifmatch();
  static const int kIfmatchFieldNumber = 5;
  ::google::protobuf::int32 ifmatch() const;
  void set_ifmatch(::google::protobuf::int32 value);

  // optional uint32 leftnum = 6;
  void clear_leftnum();
  static const int kLeftnumFieldNumber = 6;
  ::google::protobuf::uint32 leftnum() const;
  void set_leftnum(::google::protobuf::uint32 value);

  // optional uint32 begintime = 7;
  void clear_begintime();
  static const int kBegintimeFieldNumber = 7;
  ::google::protobuf::uint32 begintime() const;
  void set_begintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:texas.TexasMatchInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 trunindex_;
  ::google::protobuf::uint32 curnum_;
  ::google::protobuf::int32 gamevalue_;
  ::google::protobuf::int32 ifmatch_;
  ::google::protobuf::uint32 leftnum_;
  ::google::protobuf::uint32 begintime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasMatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class TexasSelfRoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:texas.TexasSelfRoomInfo) */ {
 public:
  TexasSelfRoomInfo();
  virtual ~TexasSelfRoomInfo();

  TexasSelfRoomInfo(const TexasSelfRoomInfo& from);

  inline TexasSelfRoomInfo& operator=(const TexasSelfRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasSelfRoomInfo& default_instance();

  void Swap(TexasSelfRoomInfo* other);

  // implements Message ----------------------------------------------

  inline TexasSelfRoomInfo* New() const { return New(NULL); }

  TexasSelfRoomInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexasSelfRoomInfo& from);
  void MergeFrom(const TexasSelfRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexasSelfRoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint32 roomid() const;
  void set_roomid(::google::protobuf::uint32 value);

  // optional bytes roomcode = 2;
  void clear_roomcode();
  static const int kRoomcodeFieldNumber = 2;
  const ::std::string& roomcode() const;
  void set_roomcode(const ::std::string& value);
  void set_roomcode(const char* value);
  void set_roomcode(const void* value, size_t size);
  ::std::string* mutable_roomcode();
  ::std::string* release_roomcode();
  void set_allocated_roomcode(::std::string* roomcode);

  // optional uint32 endtime = 3;
  void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  ::google::protobuf::uint32 endtime() const;
  void set_endtime(::google::protobuf::uint32 value);

  // optional uint32 createuid = 4;
  void clear_createuid();
  static const int kCreateuidFieldNumber = 4;
  ::google::protobuf::uint32 createuid() const;
  void set_createuid(::google::protobuf::uint32 value);

  // optional uint32 basecoin = 5;
  void clear_basecoin();
  static const int kBasecoinFieldNumber = 5;
  ::google::protobuf::uint32 basecoin() const;
  void set_basecoin(::google::protobuf::uint32 value);

  // optional uint32 playcount = 6;
  void clear_playcount();
  static const int kPlaycountFieldNumber = 6;
  ::google::protobuf::uint32 playcount() const;
  void set_playcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:texas.TexasSelfRoomInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr roomcode_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::uint32 createuid_;
  ::google::protobuf::uint32 basecoin_;
  ::google::protobuf::uint32 playcount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_texas_2eproto();
  friend void protobuf_AssignDesc_texas_2eproto();
  friend void protobuf_ShutdownFile_texas_2eproto();

  void InitAsDefaultInstance();
  static TexasSelfRoomInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional uint32 value = 1;
inline void Card::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 Card::value() const {
  // @@protoc_insertion_point(field_get:texas.Card.value)
  return value_;
}
inline void Card::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:texas.Card.value)
}

// -------------------------------------------------------------------

// TexasDeskUserinfo

// optional uint32 uid = 1;
inline void TexasDeskUserinfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.uid)
  return uid_;
}
inline void TexasDeskUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.uid)
}

// optional bytes uname = 2;
inline void TexasDeskUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TexasDeskUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TexasDeskUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.uname)
}
inline void TexasDeskUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas.TexasDeskUserinfo.uname)
}
inline void TexasDeskUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas.TexasDeskUserinfo.uname)
}
inline ::std::string* TexasDeskUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TexasDeskUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:texas.TexasDeskUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TexasDeskUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:texas.TexasDeskUserinfo.uname)
}

// optional uint32 coinnum = 3;
inline void TexasDeskUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.coinnum)
  return coinnum_;
}
inline void TexasDeskUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.coinnum)
}

// optional bytes headurl = 4;
inline void TexasDeskUserinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TexasDeskUserinfo::headurl() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TexasDeskUserinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.headurl)
}
inline void TexasDeskUserinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas.TexasDeskUserinfo.headurl)
}
inline void TexasDeskUserinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas.TexasDeskUserinfo.headurl)
}
inline ::std::string* TexasDeskUserinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskUserinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TexasDeskUserinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:texas.TexasDeskUserinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TexasDeskUserinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:texas.TexasDeskUserinfo.headurl)
}

// optional uint32 deskid = 5;
inline void TexasDeskUserinfo::clear_deskid() {
  deskid_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::deskid() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.deskid)
  return deskid_;
}
inline void TexasDeskUserinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.deskid)
}

// optional uint32 pos = 6;
inline void TexasDeskUserinfo::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::pos() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.pos)
  return pos_;
}
inline void TexasDeskUserinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.pos)
}

// optional uint32 status = 7;
inline void TexasDeskUserinfo::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::status() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.status)
  return status_;
}
inline void TexasDeskUserinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.status)
}

// optional uint32 offline = 8;
inline void TexasDeskUserinfo::clear_offline() {
  offline_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::offline() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.offline)
  return offline_;
}
inline void TexasDeskUserinfo::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.offline)
}

// repeated .texas.Card poker = 9;
inline int TexasDeskUserinfo::poker_size() const {
  return poker_.size();
}
inline void TexasDeskUserinfo::clear_poker() {
  poker_.Clear();
}
inline const ::texas::Card& TexasDeskUserinfo::poker(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.poker)
  return poker_.Get(index);
}
inline ::texas::Card* TexasDeskUserinfo::mutable_poker(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskUserinfo.poker)
  return poker_.Mutable(index);
}
inline ::texas::Card* TexasDeskUserinfo::add_poker() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskUserinfo.poker)
  return poker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasDeskUserinfo::mutable_poker() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskUserinfo.poker)
  return &poker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasDeskUserinfo::poker() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskUserinfo.poker)
  return poker_;
}

// optional uint32 gender = 10;
inline void TexasDeskUserinfo::clear_gender() {
  gender_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.gender)
  return gender_;
}
inline void TexasDeskUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.gender)
}

// optional uint32 integral = 11;
inline void TexasDeskUserinfo::clear_integral() {
  integral_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::integral() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.integral)
  return integral_;
}
inline void TexasDeskUserinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.integral)
}

// optional int32 gamevalue = 12;
inline void TexasDeskUserinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
inline ::google::protobuf::int32 TexasDeskUserinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.gamevalue)
  return gamevalue_;
}
inline void TexasDeskUserinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.gamevalue)
}

// optional uint32 totalbet = 13;
inline void TexasDeskUserinfo::clear_totalbet() {
  totalbet_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::totalbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.totalbet)
  return totalbet_;
}
inline void TexasDeskUserinfo::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.totalbet)
}

// optional uint32 curbet = 14;
inline void TexasDeskUserinfo::clear_curbet() {
  curbet_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::curbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.curbet)
  return curbet_;
}
inline void TexasDeskUserinfo::set_curbet(::google::protobuf::uint32 value) {
  
  curbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.curbet)
}

// optional uint32 roomcoin = 15;
inline void TexasDeskUserinfo::clear_roomcoin() {
  roomcoin_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskUserinfo::roomcoin() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskUserinfo.roomcoin)
  return roomcoin_;
}
inline void TexasDeskUserinfo::set_roomcoin(::google::protobuf::uint32 value) {
  
  roomcoin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskUserinfo.roomcoin)
}

// -------------------------------------------------------------------

// TexasDeskinfo

// optional uint32 deskid = 1;
inline void TexasDeskinfo::clear_deskid() {
  deskid_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskinfo::deskid() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.deskid)
  return deskid_;
}
inline void TexasDeskinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.deskid)
}

// optional uint32 status = 2;
inline void TexasDeskinfo::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskinfo::status() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.status)
  return status_;
}
inline void TexasDeskinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.status)
}

// optional uint32 curpos = 3;
inline void TexasDeskinfo::clear_curpos() {
  curpos_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskinfo::curpos() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.curpos)
  return curpos_;
}
inline void TexasDeskinfo::set_curpos(::google::protobuf::uint32 value) {
  
  curpos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.curpos)
}

// optional uint32 totalbet = 4;
inline void TexasDeskinfo::clear_totalbet() {
  totalbet_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskinfo::totalbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.totalbet)
  return totalbet_;
}
inline void TexasDeskinfo::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.totalbet)
}

// optional uint32 curbet = 5;
inline void TexasDeskinfo::clear_curbet() {
  curbet_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskinfo::curbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.curbet)
  return curbet_;
}
inline void TexasDeskinfo::set_curbet(::google::protobuf::uint32 value) {
  
  curbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.curbet)
}

// optional uint32 hostpos = 6;
inline void TexasDeskinfo::clear_hostpos() {
  hostpos_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskinfo::hostpos() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.hostpos)
  return hostpos_;
}
inline void TexasDeskinfo::set_hostpos(::google::protobuf::uint32 value) {
  
  hostpos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.hostpos)
}

// repeated .texas.Card pubpoker = 7;
inline int TexasDeskinfo::pubpoker_size() const {
  return pubpoker_.size();
}
inline void TexasDeskinfo::clear_pubpoker() {
  pubpoker_.Clear();
}
inline const ::texas::Card& TexasDeskinfo::pubpoker(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.pubpoker)
  return pubpoker_.Get(index);
}
inline ::texas::Card* TexasDeskinfo::mutable_pubpoker(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskinfo.pubpoker)
  return pubpoker_.Mutable(index);
}
inline ::texas::Card* TexasDeskinfo::add_pubpoker() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskinfo.pubpoker)
  return pubpoker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasDeskinfo::mutable_pubpoker() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskinfo.pubpoker)
  return &pubpoker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasDeskinfo::pubpoker() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskinfo.pubpoker)
  return pubpoker_;
}

// repeated .texas.TexasDeskUserinfo userlist = 8;
inline int TexasDeskinfo::userlist_size() const {
  return userlist_.size();
}
inline void TexasDeskinfo::clear_userlist() {
  userlist_.Clear();
}
inline const ::texas::TexasDeskUserinfo& TexasDeskinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.userlist)
  return userlist_.Get(index);
}
inline ::texas::TexasDeskUserinfo* TexasDeskinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskinfo.userlist)
  return userlist_.Mutable(index);
}
inline ::texas::TexasDeskUserinfo* TexasDeskinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskinfo.userlist)
  return userlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::TexasDeskUserinfo >*
TexasDeskinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskinfo.userlist)
  return &userlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::TexasDeskUserinfo >&
TexasDeskinfo::userlist() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskinfo.userlist)
  return userlist_;
}

// optional uint32 matchid = 9;
inline void TexasDeskinfo::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 TexasDeskinfo::matchid() const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.matchid)
  return matchid_;
}
inline void TexasDeskinfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasDeskinfo.matchid)
}

// repeated .texas.TexasEdgePoolInfo info = 10;
inline int TexasDeskinfo::info_size() const {
  return info_.size();
}
inline void TexasDeskinfo::clear_info() {
  info_.Clear();
}
inline const ::texas::TexasEdgePoolInfo& TexasDeskinfo::info(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskinfo.info)
  return info_.Get(index);
}
inline ::texas::TexasEdgePoolInfo* TexasDeskinfo::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskinfo.info)
  return info_.Mutable(index);
}
inline ::texas::TexasEdgePoolInfo* TexasDeskinfo::add_info() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskinfo.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >*
TexasDeskinfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskinfo.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >&
TexasDeskinfo::info() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskinfo.info)
  return info_;
}

// -------------------------------------------------------------------

// TexasEdgePool

// optional uint32 totalbet = 1;
inline void TexasEdgePool::clear_totalbet() {
  totalbet_ = 0u;
}
inline ::google::protobuf::uint32 TexasEdgePool::totalbet() const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePool.totalbet)
  return totalbet_;
}
inline void TexasEdgePool::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasEdgePool.totalbet)
}

// repeated .texas.TexasEdgePoolInfo info = 2;
inline int TexasEdgePool::info_size() const {
  return info_.size();
}
inline void TexasEdgePool::clear_info() {
  info_.Clear();
}
inline const ::texas::TexasEdgePoolInfo& TexasEdgePool::info(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePool.info)
  return info_.Get(index);
}
inline ::texas::TexasEdgePoolInfo* TexasEdgePool::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasEdgePool.info)
  return info_.Mutable(index);
}
inline ::texas::TexasEdgePoolInfo* TexasEdgePool::add_info() {
  // @@protoc_insertion_point(field_add:texas.TexasEdgePool.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >*
TexasEdgePool::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasEdgePool.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::TexasEdgePoolInfo >&
TexasEdgePool::info() const {
  // @@protoc_insertion_point(field_list:texas.TexasEdgePool.info)
  return info_;
}

// -------------------------------------------------------------------

// TexasEdgePoolInfo

// optional uint32 poolindex = 1;
inline void TexasEdgePoolInfo::clear_poolindex() {
  poolindex_ = 0u;
}
inline ::google::protobuf::uint32 TexasEdgePoolInfo::poolindex() const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePoolInfo.poolindex)
  return poolindex_;
}
inline void TexasEdgePoolInfo::set_poolindex(::google::protobuf::uint32 value) {
  
  poolindex_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasEdgePoolInfo.poolindex)
}

// optional uint32 allincoin = 2;
inline void TexasEdgePoolInfo::clear_allincoin() {
  allincoin_ = 0u;
}
inline ::google::protobuf::uint32 TexasEdgePoolInfo::allincoin() const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePoolInfo.allincoin)
  return allincoin_;
}
inline void TexasEdgePoolInfo::set_allincoin(::google::protobuf::uint32 value) {
  
  allincoin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasEdgePoolInfo.allincoin)
}

// optional uint32 coin = 3;
inline void TexasEdgePoolInfo::clear_coin() {
  coin_ = 0u;
}
inline ::google::protobuf::uint32 TexasEdgePoolInfo::coin() const {
  // @@protoc_insertion_point(field_get:texas.TexasEdgePoolInfo.coin)
  return coin_;
}
inline void TexasEdgePoolInfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasEdgePoolInfo.coin)
}

// -------------------------------------------------------------------

// TexasUserPokerList

// repeated .texas.TexasUserPoker userlist = 1;
inline int TexasUserPokerList::userlist_size() const {
  return userlist_.size();
}
inline void TexasUserPokerList::clear_userlist() {
  userlist_.Clear();
}
inline const ::texas::TexasUserPoker& TexasUserPokerList::userlist(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasUserPokerList.userlist)
  return userlist_.Get(index);
}
inline ::texas::TexasUserPoker* TexasUserPokerList::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasUserPokerList.userlist)
  return userlist_.Mutable(index);
}
inline ::texas::TexasUserPoker* TexasUserPokerList::add_userlist() {
  // @@protoc_insertion_point(field_add:texas.TexasUserPokerList.userlist)
  return userlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::TexasUserPoker >*
TexasUserPokerList::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasUserPokerList.userlist)
  return &userlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::TexasUserPoker >&
TexasUserPokerList::userlist() const {
  // @@protoc_insertion_point(field_list:texas.TexasUserPokerList.userlist)
  return userlist_;
}

// -------------------------------------------------------------------

// TexasUserPoker

// optional uint32 userpos = 1;
inline void TexasUserPoker::clear_userpos() {
  userpos_ = 0u;
}
inline ::google::protobuf::uint32 TexasUserPoker::userpos() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserPoker.userpos)
  return userpos_;
}
inline void TexasUserPoker::set_userpos(::google::protobuf::uint32 value) {
  
  userpos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserPoker.userpos)
}

// repeated .texas.Card pokerlist = 2;
inline int TexasUserPoker::pokerlist_size() const {
  return pokerlist_.size();
}
inline void TexasUserPoker::clear_pokerlist() {
  pokerlist_.Clear();
}
inline const ::texas::Card& TexasUserPoker::pokerlist(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasUserPoker.pokerlist)
  return pokerlist_.Get(index);
}
inline ::texas::Card* TexasUserPoker::mutable_pokerlist(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasUserPoker.pokerlist)
  return pokerlist_.Mutable(index);
}
inline ::texas::Card* TexasUserPoker::add_pokerlist() {
  // @@protoc_insertion_point(field_add:texas.TexasUserPoker.pokerlist)
  return pokerlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasUserPoker::mutable_pokerlist() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasUserPoker.pokerlist)
  return &pokerlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasUserPoker::pokerlist() const {
  // @@protoc_insertion_point(field_list:texas.TexasUserPoker.pokerlist)
  return pokerlist_;
}

// -------------------------------------------------------------------

// TexasDeskResultinfo

// repeated .texas.Card pubpoker = 1;
inline int TexasDeskResultinfo::pubpoker_size() const {
  return pubpoker_.size();
}
inline void TexasDeskResultinfo::clear_pubpoker() {
  pubpoker_.Clear();
}
inline const ::texas::Card& TexasDeskResultinfo::pubpoker(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskResultinfo.pubpoker)
  return pubpoker_.Get(index);
}
inline ::texas::Card* TexasDeskResultinfo::mutable_pubpoker(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskResultinfo.pubpoker)
  return pubpoker_.Mutable(index);
}
inline ::texas::Card* TexasDeskResultinfo::add_pubpoker() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskResultinfo.pubpoker)
  return pubpoker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasDeskResultinfo::mutable_pubpoker() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskResultinfo.pubpoker)
  return &pubpoker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasDeskResultinfo::pubpoker() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskResultinfo.pubpoker)
  return pubpoker_;
}

// repeated .texas.TexasUserResultinfo userlist = 2;
inline int TexasDeskResultinfo::userlist_size() const {
  return userlist_.size();
}
inline void TexasDeskResultinfo::clear_userlist() {
  userlist_.Clear();
}
inline const ::texas::TexasUserResultinfo& TexasDeskResultinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasDeskResultinfo.userlist)
  return userlist_.Get(index);
}
inline ::texas::TexasUserResultinfo* TexasDeskResultinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasDeskResultinfo.userlist)
  return userlist_.Mutable(index);
}
inline ::texas::TexasUserResultinfo* TexasDeskResultinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:texas.TexasDeskResultinfo.userlist)
  return userlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::TexasUserResultinfo >*
TexasDeskResultinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasDeskResultinfo.userlist)
  return &userlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::TexasUserResultinfo >&
TexasDeskResultinfo::userlist() const {
  // @@protoc_insertion_point(field_list:texas.TexasDeskResultinfo.userlist)
  return userlist_;
}

// -------------------------------------------------------------------

// TexasUserResultinfo

// optional uint32 uid = 1;
inline void TexasUserResultinfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 TexasUserResultinfo::uid() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.uid)
  return uid_;
}
inline void TexasUserResultinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.uid)
}

// optional uint32 pos = 2;
inline void TexasUserResultinfo::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 TexasUserResultinfo::pos() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.pos)
  return pos_;
}
inline void TexasUserResultinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.pos)
}

// optional uint32 result = 3;
inline void TexasUserResultinfo::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 TexasUserResultinfo::result() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.result)
  return result_;
}
inline void TexasUserResultinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.result)
}

// optional uint32 value = 4;
inline void TexasUserResultinfo::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 TexasUserResultinfo::value() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.value)
  return value_;
}
inline void TexasUserResultinfo::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.value)
}

// optional uint32 coin = 5;
inline void TexasUserResultinfo::clear_coin() {
  coin_ = 0u;
}
inline ::google::protobuf::uint32 TexasUserResultinfo::coin() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.coin)
  return coin_;
}
inline void TexasUserResultinfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.coin)
}

// repeated .texas.Card usercard = 6;
inline int TexasUserResultinfo::usercard_size() const {
  return usercard_.size();
}
inline void TexasUserResultinfo::clear_usercard() {
  usercard_.Clear();
}
inline const ::texas::Card& TexasUserResultinfo::usercard(int index) const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.usercard)
  return usercard_.Get(index);
}
inline ::texas::Card* TexasUserResultinfo::mutable_usercard(int index) {
  // @@protoc_insertion_point(field_mutable:texas.TexasUserResultinfo.usercard)
  return usercard_.Mutable(index);
}
inline ::texas::Card* TexasUserResultinfo::add_usercard() {
  // @@protoc_insertion_point(field_add:texas.TexasUserResultinfo.usercard)
  return usercard_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::texas::Card >*
TexasUserResultinfo::mutable_usercard() {
  // @@protoc_insertion_point(field_mutable_list:texas.TexasUserResultinfo.usercard)
  return &usercard_;
}
inline const ::google::protobuf::RepeatedPtrField< ::texas::Card >&
TexasUserResultinfo::usercard() const {
  // @@protoc_insertion_point(field_list:texas.TexasUserResultinfo.usercard)
  return usercard_;
}

// optional int32 gamevalue = 7;
inline void TexasUserResultinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
inline ::google::protobuf::int32 TexasUserResultinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.gamevalue)
  return gamevalue_;
}
inline void TexasUserResultinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.gamevalue)
}

// optional uint32 rank = 8;
inline void TexasUserResultinfo::clear_rank() {
  rank_ = 0u;
}
inline ::google::protobuf::uint32 TexasUserResultinfo::rank() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.rank)
  return rank_;
}
inline void TexasUserResultinfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.rank)
}

// optional uint32 leftvalue = 9;
inline void TexasUserResultinfo::clear_leftvalue() {
  leftvalue_ = 0u;
}
inline ::google::protobuf::uint32 TexasUserResultinfo::leftvalue() const {
  // @@protoc_insertion_point(field_get:texas.TexasUserResultinfo.leftvalue)
  return leftvalue_;
}
inline void TexasUserResultinfo::set_leftvalue(::google::protobuf::uint32 value) {
  
  leftvalue_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasUserResultinfo.leftvalue)
}

// -------------------------------------------------------------------

// TexasMatchInfo

// optional uint32 matchid = 1;
inline void TexasMatchInfo::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 TexasMatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.matchid)
  return matchid_;
}
inline void TexasMatchInfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.matchid)
}

// optional uint32 trunindex = 2;
inline void TexasMatchInfo::clear_trunindex() {
  trunindex_ = 0u;
}
inline ::google::protobuf::uint32 TexasMatchInfo::trunindex() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.trunindex)
  return trunindex_;
}
inline void TexasMatchInfo::set_trunindex(::google::protobuf::uint32 value) {
  
  trunindex_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.trunindex)
}

// optional uint32 curnum = 3;
inline void TexasMatchInfo::clear_curnum() {
  curnum_ = 0u;
}
inline ::google::protobuf::uint32 TexasMatchInfo::curnum() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.curnum)
  return curnum_;
}
inline void TexasMatchInfo::set_curnum(::google::protobuf::uint32 value) {
  
  curnum_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.curnum)
}

// optional int32 gamevalue = 4;
inline void TexasMatchInfo::clear_gamevalue() {
  gamevalue_ = 0;
}
inline ::google::protobuf::int32 TexasMatchInfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.gamevalue)
  return gamevalue_;
}
inline void TexasMatchInfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.gamevalue)
}

// optional int32 ifmatch = 5;
inline void TexasMatchInfo::clear_ifmatch() {
  ifmatch_ = 0;
}
inline ::google::protobuf::int32 TexasMatchInfo::ifmatch() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.ifmatch)
  return ifmatch_;
}
inline void TexasMatchInfo::set_ifmatch(::google::protobuf::int32 value) {
  
  ifmatch_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.ifmatch)
}

// optional uint32 leftnum = 6;
inline void TexasMatchInfo::clear_leftnum() {
  leftnum_ = 0u;
}
inline ::google::protobuf::uint32 TexasMatchInfo::leftnum() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.leftnum)
  return leftnum_;
}
inline void TexasMatchInfo::set_leftnum(::google::protobuf::uint32 value) {
  
  leftnum_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.leftnum)
}

// optional uint32 begintime = 7;
inline void TexasMatchInfo::clear_begintime() {
  begintime_ = 0u;
}
inline ::google::protobuf::uint32 TexasMatchInfo::begintime() const {
  // @@protoc_insertion_point(field_get:texas.TexasMatchInfo.begintime)
  return begintime_;
}
inline void TexasMatchInfo::set_begintime(::google::protobuf::uint32 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasMatchInfo.begintime)
}

// -------------------------------------------------------------------

// TexasSelfRoomInfo

// optional uint32 roomid = 1;
inline void TexasSelfRoomInfo::clear_roomid() {
  roomid_ = 0u;
}
inline ::google::protobuf::uint32 TexasSelfRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.roomid)
  return roomid_;
}
inline void TexasSelfRoomInfo::set_roomid(::google::protobuf::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.roomid)
}

// optional bytes roomcode = 2;
inline void TexasSelfRoomInfo::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TexasSelfRoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.roomcode)
  return roomcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TexasSelfRoomInfo::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.roomcode)
}
inline void TexasSelfRoomInfo::set_roomcode(const char* value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:texas.TexasSelfRoomInfo.roomcode)
}
inline void TexasSelfRoomInfo::set_roomcode(const void* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:texas.TexasSelfRoomInfo.roomcode)
}
inline ::std::string* TexasSelfRoomInfo::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:texas.TexasSelfRoomInfo.roomcode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TexasSelfRoomInfo::release_roomcode() {
  // @@protoc_insertion_point(field_release:texas.TexasSelfRoomInfo.roomcode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TexasSelfRoomInfo::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:texas.TexasSelfRoomInfo.roomcode)
}

// optional uint32 endtime = 3;
inline void TexasSelfRoomInfo::clear_endtime() {
  endtime_ = 0u;
}
inline ::google::protobuf::uint32 TexasSelfRoomInfo::endtime() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.endtime)
  return endtime_;
}
inline void TexasSelfRoomInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.endtime)
}

// optional uint32 createuid = 4;
inline void TexasSelfRoomInfo::clear_createuid() {
  createuid_ = 0u;
}
inline ::google::protobuf::uint32 TexasSelfRoomInfo::createuid() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.createuid)
  return createuid_;
}
inline void TexasSelfRoomInfo::set_createuid(::google::protobuf::uint32 value) {
  
  createuid_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.createuid)
}

// optional uint32 basecoin = 5;
inline void TexasSelfRoomInfo::clear_basecoin() {
  basecoin_ = 0u;
}
inline ::google::protobuf::uint32 TexasSelfRoomInfo::basecoin() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.basecoin)
  return basecoin_;
}
inline void TexasSelfRoomInfo::set_basecoin(::google::protobuf::uint32 value) {
  
  basecoin_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.basecoin)
}

// optional uint32 playcount = 6;
inline void TexasSelfRoomInfo::clear_playcount() {
  playcount_ = 0u;
}
inline ::google::protobuf::uint32 TexasSelfRoomInfo::playcount() const {
  // @@protoc_insertion_point(field_get:texas.TexasSelfRoomInfo.playcount)
  return playcount_;
}
inline void TexasSelfRoomInfo::set_playcount(::google::protobuf::uint32 value) {
  
  playcount_ = value;
  // @@protoc_insertion_point(field_set:texas.TexasSelfRoomInfo.playcount)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace texas

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_texas_2eproto__INCLUDED
