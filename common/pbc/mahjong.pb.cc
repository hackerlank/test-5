// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mahjong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mahjong {

namespace {

const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahjongDeskUserinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahjongDeskUserinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahjongDeskinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahjongDeskinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahjongUserOpCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahjongUserOpCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahjongDeskResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahjongDeskResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahjongUserResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahjongUserResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HuCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultPreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultPreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahjongCoinChangeinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahjongCoinChangeinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahjongUserCoinChinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahjongUserCoinChinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahjongMatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahjongMatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahjongSelfRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahjongSelfRoomInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mahjong_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mahjong_2eproto() {
  protobuf_AddDesc_mahjong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mahjong.proto");
  GOOGLE_CHECK(file != NULL);
  Card_descriptor_ = file->message_type(0);
  static const int Card_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, value_),
  };
  Card_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      -1,
      -1,
      -1,
      sizeof(Card),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _is_default_instance_));
  MahjongDeskUserinfo_descriptor_ = file->message_type(1);
  static const int MahjongDeskUserinfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, offline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, poker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, opcardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, putpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, lacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, hupoker_),
  };
  MahjongDeskUserinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MahjongDeskUserinfo_descriptor_,
      MahjongDeskUserinfo::default_instance_,
      MahjongDeskUserinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MahjongDeskUserinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskUserinfo, _is_default_instance_));
  MahjongDeskinfo_descriptor_ = file->message_type(2);
  static const int MahjongDeskinfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskinfo, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskinfo, hostpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskinfo, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskinfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskinfo, leftpnum_),
  };
  MahjongDeskinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MahjongDeskinfo_descriptor_,
      MahjongDeskinfo::default_instance_,
      MahjongDeskinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MahjongDeskinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskinfo, _is_default_instance_));
  MahjongUserOpCardInfo_descriptor_ = file->message_type(3);
  static const int MahjongUserOpCardInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserOpCardInfo, poker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserOpCardInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserOpCardInfo, cardvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserOpCardInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserOpCardInfo, oppos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserOpCardInfo, putpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserOpCardInfo, changecoin_),
  };
  MahjongUserOpCardInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MahjongUserOpCardInfo_descriptor_,
      MahjongUserOpCardInfo::default_instance_,
      MahjongUserOpCardInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MahjongUserOpCardInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserOpCardInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserOpCardInfo, _is_default_instance_));
  MahjongDeskResultinfo_descriptor_ = file->message_type(4);
  static const int MahjongDeskResultinfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskResultinfo, userlist_),
  };
  MahjongDeskResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MahjongDeskResultinfo_descriptor_,
      MahjongDeskResultinfo::default_instance_,
      MahjongDeskResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MahjongDeskResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongDeskResultinfo, _is_default_instance_));
  MahjongUserResultinfo_descriptor_ = file->message_type(5);
  static const int MahjongUserResultinfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, gangwincoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, opcardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, hulist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, prelist_),
  };
  MahjongUserResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MahjongUserResultinfo_descriptor_,
      MahjongUserResultinfo::default_instance_,
      MahjongUserResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MahjongUserResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserResultinfo, _is_default_instance_));
  HuCardInfo_descriptor_ = file->message_type(6);
  static const int HuCardInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, cardvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, oppos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, putpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, changecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, gangnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, othertype_),
  };
  HuCardInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HuCardInfo_descriptor_,
      HuCardInfo::default_instance_,
      HuCardInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(HuCardInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuCardInfo, _is_default_instance_));
  ResultPreInfo_descriptor_ = file->message_type(7);
  static const int ResultPreInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultPreInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultPreInfo, oppos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultPreInfo, putpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultPreInfo, changecoin_),
  };
  ResultPreInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResultPreInfo_descriptor_,
      ResultPreInfo::default_instance_,
      ResultPreInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResultPreInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultPreInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultPreInfo, _is_default_instance_));
  MahjongCoinChangeinfo_descriptor_ = file->message_type(8);
  static const int MahjongCoinChangeinfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongCoinChangeinfo, userlist_),
  };
  MahjongCoinChangeinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MahjongCoinChangeinfo_descriptor_,
      MahjongCoinChangeinfo::default_instance_,
      MahjongCoinChangeinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MahjongCoinChangeinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongCoinChangeinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongCoinChangeinfo, _is_default_instance_));
  MahjongUserCoinChinfo_descriptor_ = file->message_type(9);
  static const int MahjongUserCoinChinfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserCoinChinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserCoinChinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserCoinChinfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserCoinChinfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserCoinChinfo, type_),
  };
  MahjongUserCoinChinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MahjongUserCoinChinfo_descriptor_,
      MahjongUserCoinChinfo::default_instance_,
      MahjongUserCoinChinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MahjongUserCoinChinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserCoinChinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongUserCoinChinfo, _is_default_instance_));
  MahjongMatchInfo_descriptor_ = file->message_type(10);
  static const int MahjongMatchInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongMatchInfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongMatchInfo, trunindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongMatchInfo, curnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongMatchInfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongMatchInfo, ifmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongMatchInfo, leftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongMatchInfo, begintime_),
  };
  MahjongMatchInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MahjongMatchInfo_descriptor_,
      MahjongMatchInfo::default_instance_,
      MahjongMatchInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MahjongMatchInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongMatchInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongMatchInfo, _is_default_instance_));
  MahjongSelfRoomInfo_descriptor_ = file->message_type(11);
  static const int MahjongSelfRoomInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongSelfRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongSelfRoomInfo, roomcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongSelfRoomInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongSelfRoomInfo, createuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongSelfRoomInfo, basecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongSelfRoomInfo, playcount_),
  };
  MahjongSelfRoomInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MahjongSelfRoomInfo_descriptor_,
      MahjongSelfRoomInfo::default_instance_,
      MahjongSelfRoomInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MahjongSelfRoomInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongSelfRoomInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongSelfRoomInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mahjong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MahjongDeskUserinfo_descriptor_, &MahjongDeskUserinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MahjongDeskinfo_descriptor_, &MahjongDeskinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MahjongUserOpCardInfo_descriptor_, &MahjongUserOpCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MahjongDeskResultinfo_descriptor_, &MahjongDeskResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MahjongUserResultinfo_descriptor_, &MahjongUserResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HuCardInfo_descriptor_, &HuCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResultPreInfo_descriptor_, &ResultPreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MahjongCoinChangeinfo_descriptor_, &MahjongCoinChangeinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MahjongUserCoinChinfo_descriptor_, &MahjongUserCoinChinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MahjongMatchInfo_descriptor_, &MahjongMatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MahjongSelfRoomInfo_descriptor_, &MahjongSelfRoomInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mahjong_2eproto() {
  delete Card::default_instance_;
  delete Card_reflection_;
  delete MahjongDeskUserinfo::default_instance_;
  delete MahjongDeskUserinfo_reflection_;
  delete MahjongDeskinfo::default_instance_;
  delete MahjongDeskinfo_reflection_;
  delete MahjongUserOpCardInfo::default_instance_;
  delete MahjongUserOpCardInfo_reflection_;
  delete MahjongDeskResultinfo::default_instance_;
  delete MahjongDeskResultinfo_reflection_;
  delete MahjongUserResultinfo::default_instance_;
  delete MahjongUserResultinfo_reflection_;
  delete HuCardInfo::default_instance_;
  delete HuCardInfo_reflection_;
  delete ResultPreInfo::default_instance_;
  delete ResultPreInfo_reflection_;
  delete MahjongCoinChangeinfo::default_instance_;
  delete MahjongCoinChangeinfo_reflection_;
  delete MahjongUserCoinChinfo::default_instance_;
  delete MahjongUserCoinChinfo_reflection_;
  delete MahjongMatchInfo::default_instance_;
  delete MahjongMatchInfo_reflection_;
  delete MahjongSelfRoomInfo::default_instance_;
  delete MahjongSelfRoomInfo_reflection_;
}

void protobuf_AddDesc_mahjong_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mahjong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmahjong.proto\022\007mahjong\"\025\n\004Card\022\r\n\005valu"
    "e\030\001 \001(\r\"\353\002\n\023MahjongDeskUserinfo\022\013\n\003uid\030\001"
    " \001(\r\022\r\n\005uname\030\002 \001(\014\022\017\n\007coinnum\030\003 \001(\r\022\017\n\007"
    "headurl\030\004 \001(\014\022\016\n\006deskid\030\005 \001(\r\022\013\n\003pos\030\006 \001"
    "(\r\022\016\n\006status\030\007 \001(\r\022\017\n\007offline\030\010 \001(\r\022\034\n\005p"
    "oker\030\t \003(\0132\r.mahjong.Card\022\016\n\006gender\030\n \001("
    "\r\022\020\n\010integral\030\013 \001(\r\022\021\n\tgamevalue\030\014 \001(\005\0222"
    "\n\nopcardinfo\030\r \003(\0132\036.mahjong.MahjongUser"
    "OpCardInfo\022\037\n\010putpoker\030\016 \003(\0132\r.mahjong.C"
    "ard\022\020\n\010lacktype\030\017 \001(\r\022\036\n\007hupoker\030\020 \003(\0132\r"
    ".mahjong.Card\"\245\001\n\017MahjongDeskinfo\022\016\n\006des"
    "kid\030\001 \001(\r\022\016\n\006status\030\002 \001(\r\022\016\n\006curpos\030\003 \001("
    "\r\022\017\n\007hostpos\030\004 \001(\r\022.\n\010userlist\030\005 \003(\0132\034.m"
    "ahjong.MahjongDeskUserinfo\022\017\n\007matchid\030\006 "
    "\001(\r\022\020\n\010leftpnum\030\007 \001(\r\"\226\001\n\025MahjongUserOpC"
    "ardInfo\022\034\n\005poker\030\001 \003(\0132\r.mahjong.Card\022\014\n"
    "\004type\030\002 \001(\r\022\021\n\tcardvalue\030\003 \001(\r\022\013\n\003uid\030\004 "
    "\001(\r\022\r\n\005oppos\030\005 \001(\005\022\016\n\006putpos\030\006 \001(\005\022\022\n\nch"
    "angecoin\030\007 \001(\005\"I\n\025MahjongDeskResultinfo\022"
    "0\n\010userlist\030\001 \003(\0132\036.mahjong.MahjongUserR"
    "esultinfo\"\267\002\n\025MahjongUserResultinfo\022\013\n\003u"
    "id\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\022\016\n\006result\030\003 \001(\r\022\r\n"
    "\005value\030\004 \001(\005\022\014\n\004coin\030\005 \001(\005\022\037\n\010usercard\030\006"
    " \003(\0132\r.mahjong.Card\022\021\n\tgamevalue\030\007 \001(\005\022\014"
    "\n\004rank\030\010 \001(\r\022\023\n\013gangwincoin\030\t \001(\005\0222\n\nopc"
    "ardinfo\030\n \003(\0132\036.mahjong.MahjongUserOpCar"
    "dInfo\022#\n\006hulist\030\013 \003(\0132\023.mahjong.HuCardIn"
    "fo\022\'\n\007prelist\030\014 \003(\0132\026.mahjong.ResultPreI"
    "nfo\"\221\001\n\nHuCardInfo\022\014\n\004type\030\001 \001(\r\022\021\n\tcard"
    "value\030\002 \001(\r\022\013\n\003uid\030\003 \001(\r\022\r\n\005oppos\030\004 \001(\005\022"
    "\016\n\006putpos\030\005 \001(\005\022\022\n\nchangecoin\030\006 \001(\005\022\017\n\007g"
    "angnum\030\007 \001(\r\022\021\n\tothertype\030\010 \001(\r\"P\n\rResul"
    "tPreInfo\022\014\n\004type\030\001 \001(\r\022\r\n\005oppos\030\002 \001(\005\022\016\n"
    "\006putpos\030\003 \001(\005\022\022\n\nchangecoin\030\004 \001(\005\"I\n\025Mah"
    "jongCoinChangeinfo\0220\n\010userlist\030\001 \003(\0132\036.m"
    "ahjong.MahjongUserCoinChinfo\"^\n\025MahjongU"
    "serCoinChinfo\022\013\n\003uid\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\022"
    "\016\n\006result\030\003 \001(\r\022\r\n\005value\030\004 \001(\005\022\014\n\004type\030\005"
    " \001(\r\"\216\001\n\020MahjongMatchInfo\022\017\n\007matchid\030\001 \001"
    "(\r\022\021\n\ttrunindex\030\002 \001(\r\022\016\n\006curnum\030\003 \001(\r\022\021\n"
    "\tgamevalue\030\004 \001(\005\022\017\n\007ifmatch\030\005 \001(\005\022\017\n\007lef"
    "tnum\030\006 \001(\r\022\021\n\tbegintime\030\007 \001(\r\"\200\001\n\023Mahjon"
    "gSelfRoomInfo\022\016\n\006roomid\030\001 \001(\r\022\020\n\010roomcod"
    "e\030\002 \001(\014\022\017\n\007endtime\030\003 \001(\r\022\021\n\tcreateuid\030\004 "
    "\001(\r\022\020\n\010basecoin\030\005 \001(\r\022\021\n\tplaycount\030\006 \001(\r"
    "b\006proto3", 1808);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mahjong.proto", &protobuf_RegisterTypes);
  Card::default_instance_ = new Card();
  MahjongDeskUserinfo::default_instance_ = new MahjongDeskUserinfo();
  MahjongDeskinfo::default_instance_ = new MahjongDeskinfo();
  MahjongUserOpCardInfo::default_instance_ = new MahjongUserOpCardInfo();
  MahjongDeskResultinfo::default_instance_ = new MahjongDeskResultinfo();
  MahjongUserResultinfo::default_instance_ = new MahjongUserResultinfo();
  HuCardInfo::default_instance_ = new HuCardInfo();
  ResultPreInfo::default_instance_ = new ResultPreInfo();
  MahjongCoinChangeinfo::default_instance_ = new MahjongCoinChangeinfo();
  MahjongUserCoinChinfo::default_instance_ = new MahjongUserCoinChinfo();
  MahjongMatchInfo::default_instance_ = new MahjongMatchInfo();
  MahjongSelfRoomInfo::default_instance_ = new MahjongSelfRoomInfo();
  Card::default_instance_->InitAsDefaultInstance();
  MahjongDeskUserinfo::default_instance_->InitAsDefaultInstance();
  MahjongDeskinfo::default_instance_->InitAsDefaultInstance();
  MahjongUserOpCardInfo::default_instance_->InitAsDefaultInstance();
  MahjongDeskResultinfo::default_instance_->InitAsDefaultInstance();
  MahjongUserResultinfo::default_instance_->InitAsDefaultInstance();
  HuCardInfo::default_instance_->InitAsDefaultInstance();
  ResultPreInfo::default_instance_->InitAsDefaultInstance();
  MahjongCoinChangeinfo::default_instance_->InitAsDefaultInstance();
  MahjongUserCoinChinfo::default_instance_->InitAsDefaultInstance();
  MahjongMatchInfo::default_instance_->InitAsDefaultInstance();
  MahjongSelfRoomInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mahjong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mahjong_2eproto {
  StaticDescriptorInitializer_mahjong_2eproto() {
    protobuf_AddDesc_mahjong_2eproto();
  }
} static_descriptor_initializer_mahjong_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Card::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Card::Card()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.Card)
}

void Card::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Card::Card(const Card& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.Card)
}

void Card::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:mahjong.Card)
  SharedDtor();
}

void Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New(::google::protobuf::Arena* arena) const {
  Card* n = new Card;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.Card)
  value_ = 0u;
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.Card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.Card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.Card)
  return false;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.Card)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.Card)
}

::google::protobuf::uint8* Card::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.Card)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.Card)
  return target;
}

int Card::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.Card)
  int total_size = 0;

  // optional uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Card* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Card>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.Card)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.Card)
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {

  return true;
}

void Card::Swap(Card* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Card::InternalSwap(Card* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional uint32 value = 1;
void Card::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 Card::value() const {
  // @@protoc_insertion_point(field_get:mahjong.Card.value)
  return value_;
}
 void Card::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:mahjong.Card.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MahjongDeskUserinfo::kUidFieldNumber;
const int MahjongDeskUserinfo::kUnameFieldNumber;
const int MahjongDeskUserinfo::kCoinnumFieldNumber;
const int MahjongDeskUserinfo::kHeadurlFieldNumber;
const int MahjongDeskUserinfo::kDeskidFieldNumber;
const int MahjongDeskUserinfo::kPosFieldNumber;
const int MahjongDeskUserinfo::kStatusFieldNumber;
const int MahjongDeskUserinfo::kOfflineFieldNumber;
const int MahjongDeskUserinfo::kPokerFieldNumber;
const int MahjongDeskUserinfo::kGenderFieldNumber;
const int MahjongDeskUserinfo::kIntegralFieldNumber;
const int MahjongDeskUserinfo::kGamevalueFieldNumber;
const int MahjongDeskUserinfo::kOpcardinfoFieldNumber;
const int MahjongDeskUserinfo::kPutpokerFieldNumber;
const int MahjongDeskUserinfo::kLacktypeFieldNumber;
const int MahjongDeskUserinfo::kHupokerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MahjongDeskUserinfo::MahjongDeskUserinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.MahjongDeskUserinfo)
}

void MahjongDeskUserinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MahjongDeskUserinfo::MahjongDeskUserinfo(const MahjongDeskUserinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.MahjongDeskUserinfo)
}

void MahjongDeskUserinfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinnum_ = 0u;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deskid_ = 0u;
  pos_ = 0u;
  status_ = 0u;
  offline_ = 0u;
  gender_ = 0u;
  integral_ = 0u;
  gamevalue_ = 0;
  lacktype_ = 0u;
}

MahjongDeskUserinfo::~MahjongDeskUserinfo() {
  // @@protoc_insertion_point(destructor:mahjong.MahjongDeskUserinfo)
  SharedDtor();
}

void MahjongDeskUserinfo::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MahjongDeskUserinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahjongDeskUserinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongDeskUserinfo_descriptor_;
}

const MahjongDeskUserinfo& MahjongDeskUserinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MahjongDeskUserinfo* MahjongDeskUserinfo::default_instance_ = NULL;

MahjongDeskUserinfo* MahjongDeskUserinfo::New(::google::protobuf::Arena* arena) const {
  MahjongDeskUserinfo* n = new MahjongDeskUserinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MahjongDeskUserinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.MahjongDeskUserinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MahjongDeskUserinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MahjongDeskUserinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, coinnum_);
  ZR_(deskid_, offline_);
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(gender_, integral_);
  ZR_(gamevalue_, lacktype_);

#undef ZR_HELPER_
#undef ZR_

  poker_.Clear();
  opcardinfo_.Clear();
  putpoker_.Clear();
  hupoker_.Clear();
}

bool MahjongDeskUserinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.MahjongDeskUserinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uname;
        break;
      }

      // optional bytes uname = 2;
      case 2: {
        if (tag == 18) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coinnum;
        break;
      }

      // optional uint32 coinnum = 3;
      case 3: {
        if (tag == 24) {
         parse_coinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_headurl;
        break;
      }

      // optional bytes headurl = 4;
      case 4: {
        if (tag == 34) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_headurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deskid;
        break;
      }

      // optional uint32 deskid = 5;
      case 5: {
        if (tag == 40) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 6;
      case 6: {
        if (tag == 48) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offline;
        break;
      }

      // optional uint32 offline = 8;
      case 8: {
        if (tag == 64) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_poker;
        break;
      }

      // repeated .mahjong.Card poker = 9;
      case 9: {
        if (tag == 74) {
         parse_poker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_poker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_poker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_poker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 10;
      case 10: {
        if (tag == 80) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 11;
      case 11: {
        if (tag == 88) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 12;
      case 12: {
        if (tag == 96) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_opcardinfo;
        break;
      }

      // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 13;
      case 13: {
        if (tag == 106) {
         parse_opcardinfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_opcardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_opcardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_opcardinfo;
        if (input->ExpectTag(114)) goto parse_loop_putpoker;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .mahjong.Card putpoker = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_putpoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_putpoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_putpoker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(120)) goto parse_lacktype;
        break;
      }

      // optional uint32 lacktype = 15;
      case 15: {
        if (tag == 120) {
         parse_lacktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lacktype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_hupoker;
        break;
      }

      // repeated .mahjong.Card hupoker = 16;
      case 16: {
        if (tag == 130) {
         parse_hupoker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_hupoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hupoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_hupoker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.MahjongDeskUserinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.MahjongDeskUserinfo)
  return false;
#undef DO_
}

void MahjongDeskUserinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.MahjongDeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coinnum(), output);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->headurl(), output);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deskid(), output);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos(), output);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offline(), output);
  }

  // repeated .mahjong.Card poker = 9;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->poker(i), output);
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gender(), output);
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->integral(), output);
  }

  // optional int32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gamevalue(), output);
  }

  // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 13;
  for (unsigned int i = 0, n = this->opcardinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->opcardinfo(i), output);
  }

  // repeated .mahjong.Card putpoker = 14;
  for (unsigned int i = 0, n = this->putpoker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->putpoker(i), output);
  }

  // optional uint32 lacktype = 15;
  if (this->lacktype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->lacktype(), output);
  }

  // repeated .mahjong.Card hupoker = 16;
  for (unsigned int i = 0, n = this->hupoker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->hupoker(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.MahjongDeskUserinfo)
}

::google::protobuf::uint8* MahjongDeskUserinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.MahjongDeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uname(), target);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coinnum(), target);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->headurl(), target);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deskid(), target);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos(), target);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->offline(), target);
  }

  // repeated .mahjong.Card poker = 9;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->poker(i), false, target);
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gender(), target);
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->integral(), target);
  }

  // optional int32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gamevalue(), target);
  }

  // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 13;
  for (unsigned int i = 0, n = this->opcardinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->opcardinfo(i), false, target);
  }

  // repeated .mahjong.Card putpoker = 14;
  for (unsigned int i = 0, n = this->putpoker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->putpoker(i), false, target);
  }

  // optional uint32 lacktype = 15;
  if (this->lacktype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->lacktype(), target);
  }

  // repeated .mahjong.Card hupoker = 16;
  for (unsigned int i = 0, n = this->hupoker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->hupoker(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.MahjongDeskUserinfo)
  return target;
}

int MahjongDeskUserinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.MahjongDeskUserinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uname());
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coinnum());
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->headurl());
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline());
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->integral());
  }

  // optional int32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 lacktype = 15;
  if (this->lacktype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lacktype());
  }

  // repeated .mahjong.Card poker = 9;
  total_size += 1 * this->poker_size();
  for (int i = 0; i < this->poker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poker(i));
  }

  // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 13;
  total_size += 1 * this->opcardinfo_size();
  for (int i = 0; i < this->opcardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opcardinfo(i));
  }

  // repeated .mahjong.Card putpoker = 14;
  total_size += 1 * this->putpoker_size();
  for (int i = 0; i < this->putpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->putpoker(i));
  }

  // repeated .mahjong.Card hupoker = 16;
  total_size += 2 * this->hupoker_size();
  for (int i = 0; i < this->hupoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hupoker(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongDeskUserinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.MahjongDeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MahjongDeskUserinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MahjongDeskUserinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.MahjongDeskUserinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.MahjongDeskUserinfo)
    MergeFrom(*source);
  }
}

void MahjongDeskUserinfo::MergeFrom(const MahjongDeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.MahjongDeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  poker_.MergeFrom(from.poker_);
  opcardinfo_.MergeFrom(from.opcardinfo_);
  putpoker_.MergeFrom(from.putpoker_);
  hupoker_.MergeFrom(from.hupoker_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.coinnum() != 0) {
    set_coinnum(from.coinnum());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.offline() != 0) {
    set_offline(from.offline());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.integral() != 0) {
    set_integral(from.integral());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.lacktype() != 0) {
    set_lacktype(from.lacktype());
  }
}

void MahjongDeskUserinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.MahjongDeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongDeskUserinfo::CopyFrom(const MahjongDeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.MahjongDeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongDeskUserinfo::IsInitialized() const {

  return true;
}

void MahjongDeskUserinfo::Swap(MahjongDeskUserinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MahjongDeskUserinfo::InternalSwap(MahjongDeskUserinfo* other) {
  std::swap(uid_, other->uid_);
  uname_.Swap(&other->uname_);
  std::swap(coinnum_, other->coinnum_);
  headurl_.Swap(&other->headurl_);
  std::swap(deskid_, other->deskid_);
  std::swap(pos_, other->pos_);
  std::swap(status_, other->status_);
  std::swap(offline_, other->offline_);
  poker_.UnsafeArenaSwap(&other->poker_);
  std::swap(gender_, other->gender_);
  std::swap(integral_, other->integral_);
  std::swap(gamevalue_, other->gamevalue_);
  opcardinfo_.UnsafeArenaSwap(&other->opcardinfo_);
  putpoker_.UnsafeArenaSwap(&other->putpoker_);
  std::swap(lacktype_, other->lacktype_);
  hupoker_.UnsafeArenaSwap(&other->hupoker_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MahjongDeskUserinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahjongDeskUserinfo_descriptor_;
  metadata.reflection = MahjongDeskUserinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MahjongDeskUserinfo

// optional uint32 uid = 1;
void MahjongDeskUserinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.uid)
  return uid_;
}
 void MahjongDeskUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.uid)
}

// optional bytes uname = 2;
void MahjongDeskUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MahjongDeskUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MahjongDeskUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.uname)
}
 void MahjongDeskUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mahjong.MahjongDeskUserinfo.uname)
}
 void MahjongDeskUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mahjong.MahjongDeskUserinfo.uname)
}
 ::std::string* MahjongDeskUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MahjongDeskUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:mahjong.MahjongDeskUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MahjongDeskUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:mahjong.MahjongDeskUserinfo.uname)
}

// optional uint32 coinnum = 3;
void MahjongDeskUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.coinnum)
  return coinnum_;
}
 void MahjongDeskUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.coinnum)
}

// optional bytes headurl = 4;
void MahjongDeskUserinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MahjongDeskUserinfo::headurl() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MahjongDeskUserinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.headurl)
}
 void MahjongDeskUserinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mahjong.MahjongDeskUserinfo.headurl)
}
 void MahjongDeskUserinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mahjong.MahjongDeskUserinfo.headurl)
}
 ::std::string* MahjongDeskUserinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MahjongDeskUserinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:mahjong.MahjongDeskUserinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MahjongDeskUserinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:mahjong.MahjongDeskUserinfo.headurl)
}

// optional uint32 deskid = 5;
void MahjongDeskUserinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskUserinfo::deskid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.deskid)
  return deskid_;
}
 void MahjongDeskUserinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.deskid)
}

// optional uint32 pos = 6;
void MahjongDeskUserinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskUserinfo::pos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.pos)
  return pos_;
}
 void MahjongDeskUserinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.pos)
}

// optional uint32 status = 7;
void MahjongDeskUserinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskUserinfo::status() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.status)
  return status_;
}
 void MahjongDeskUserinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.status)
}

// optional uint32 offline = 8;
void MahjongDeskUserinfo::clear_offline() {
  offline_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskUserinfo::offline() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.offline)
  return offline_;
}
 void MahjongDeskUserinfo::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.offline)
}

// repeated .mahjong.Card poker = 9;
int MahjongDeskUserinfo::poker_size() const {
  return poker_.size();
}
void MahjongDeskUserinfo::clear_poker() {
  poker_.Clear();
}
const ::mahjong::Card& MahjongDeskUserinfo::poker(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.poker)
  return poker_.Get(index);
}
::mahjong::Card* MahjongDeskUserinfo::mutable_poker(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.poker)
  return poker_.Mutable(index);
}
::mahjong::Card* MahjongDeskUserinfo::add_poker() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskUserinfo.poker)
  return poker_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongDeskUserinfo::mutable_poker() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskUserinfo.poker)
  return &poker_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongDeskUserinfo::poker() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskUserinfo.poker)
  return poker_;
}

// optional uint32 gender = 10;
void MahjongDeskUserinfo::clear_gender() {
  gender_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.gender)
  return gender_;
}
 void MahjongDeskUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.gender)
}

// optional uint32 integral = 11;
void MahjongDeskUserinfo::clear_integral() {
  integral_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskUserinfo::integral() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.integral)
  return integral_;
}
 void MahjongDeskUserinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.integral)
}

// optional int32 gamevalue = 12;
void MahjongDeskUserinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 MahjongDeskUserinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.gamevalue)
  return gamevalue_;
}
 void MahjongDeskUserinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.gamevalue)
}

// repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 13;
int MahjongDeskUserinfo::opcardinfo_size() const {
  return opcardinfo_.size();
}
void MahjongDeskUserinfo::clear_opcardinfo() {
  opcardinfo_.Clear();
}
const ::mahjong::MahjongUserOpCardInfo& MahjongDeskUserinfo::opcardinfo(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.opcardinfo)
  return opcardinfo_.Get(index);
}
::mahjong::MahjongUserOpCardInfo* MahjongDeskUserinfo::mutable_opcardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.opcardinfo)
  return opcardinfo_.Mutable(index);
}
::mahjong::MahjongUserOpCardInfo* MahjongDeskUserinfo::add_opcardinfo() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskUserinfo.opcardinfo)
  return opcardinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >*
MahjongDeskUserinfo::mutable_opcardinfo() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskUserinfo.opcardinfo)
  return &opcardinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >&
MahjongDeskUserinfo::opcardinfo() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskUserinfo.opcardinfo)
  return opcardinfo_;
}

// repeated .mahjong.Card putpoker = 14;
int MahjongDeskUserinfo::putpoker_size() const {
  return putpoker_.size();
}
void MahjongDeskUserinfo::clear_putpoker() {
  putpoker_.Clear();
}
const ::mahjong::Card& MahjongDeskUserinfo::putpoker(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.putpoker)
  return putpoker_.Get(index);
}
::mahjong::Card* MahjongDeskUserinfo::mutable_putpoker(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.putpoker)
  return putpoker_.Mutable(index);
}
::mahjong::Card* MahjongDeskUserinfo::add_putpoker() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskUserinfo.putpoker)
  return putpoker_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongDeskUserinfo::mutable_putpoker() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskUserinfo.putpoker)
  return &putpoker_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongDeskUserinfo::putpoker() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskUserinfo.putpoker)
  return putpoker_;
}

// optional uint32 lacktype = 15;
void MahjongDeskUserinfo::clear_lacktype() {
  lacktype_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskUserinfo::lacktype() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.lacktype)
  return lacktype_;
}
 void MahjongDeskUserinfo::set_lacktype(::google::protobuf::uint32 value) {
  
  lacktype_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskUserinfo.lacktype)
}

// repeated .mahjong.Card hupoker = 16;
int MahjongDeskUserinfo::hupoker_size() const {
  return hupoker_.size();
}
void MahjongDeskUserinfo::clear_hupoker() {
  hupoker_.Clear();
}
const ::mahjong::Card& MahjongDeskUserinfo::hupoker(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskUserinfo.hupoker)
  return hupoker_.Get(index);
}
::mahjong::Card* MahjongDeskUserinfo::mutable_hupoker(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskUserinfo.hupoker)
  return hupoker_.Mutable(index);
}
::mahjong::Card* MahjongDeskUserinfo::add_hupoker() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskUserinfo.hupoker)
  return hupoker_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongDeskUserinfo::mutable_hupoker() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskUserinfo.hupoker)
  return &hupoker_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongDeskUserinfo::hupoker() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskUserinfo.hupoker)
  return hupoker_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MahjongDeskinfo::kDeskidFieldNumber;
const int MahjongDeskinfo::kStatusFieldNumber;
const int MahjongDeskinfo::kCurposFieldNumber;
const int MahjongDeskinfo::kHostposFieldNumber;
const int MahjongDeskinfo::kUserlistFieldNumber;
const int MahjongDeskinfo::kMatchidFieldNumber;
const int MahjongDeskinfo::kLeftpnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MahjongDeskinfo::MahjongDeskinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.MahjongDeskinfo)
}

void MahjongDeskinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MahjongDeskinfo::MahjongDeskinfo(const MahjongDeskinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.MahjongDeskinfo)
}

void MahjongDeskinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  deskid_ = 0u;
  status_ = 0u;
  curpos_ = 0u;
  hostpos_ = 0u;
  matchid_ = 0u;
  leftpnum_ = 0u;
}

MahjongDeskinfo::~MahjongDeskinfo() {
  // @@protoc_insertion_point(destructor:mahjong.MahjongDeskinfo)
  SharedDtor();
}

void MahjongDeskinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongDeskinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahjongDeskinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongDeskinfo_descriptor_;
}

const MahjongDeskinfo& MahjongDeskinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MahjongDeskinfo* MahjongDeskinfo::default_instance_ = NULL;

MahjongDeskinfo* MahjongDeskinfo::New(::google::protobuf::Arena* arena) const {
  MahjongDeskinfo* n = new MahjongDeskinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MahjongDeskinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.MahjongDeskinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MahjongDeskinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MahjongDeskinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deskid_, hostpos_);
  ZR_(matchid_, leftpnum_);

#undef ZR_HELPER_
#undef ZR_

  userlist_.Clear();
}

bool MahjongDeskinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.MahjongDeskinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curpos;
        break;
      }

      // optional uint32 curpos = 3;
      case 3: {
        if (tag == 24) {
         parse_curpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hostpos;
        break;
      }

      // optional uint32 hostpos = 4;
      case 4: {
        if (tag == 32) {
         parse_hostpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hostpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userlist;
        break;
      }

      // repeated .mahjong.MahjongDeskUserinfo userlist = 5;
      case 5: {
        if (tag == 42) {
         parse_userlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_matchid;
        break;
      }

      // optional uint32 matchid = 6;
      case 6: {
        if (tag == 48) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_leftpnum;
        break;
      }

      // optional uint32 leftpnum = 7;
      case 7: {
        if (tag == 56) {
         parse_leftpnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftpnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.MahjongDeskinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.MahjongDeskinfo)
  return false;
#undef DO_
}

void MahjongDeskinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.MahjongDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deskid(), output);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpos(), output);
  }

  // optional uint32 hostpos = 4;
  if (this->hostpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hostpos(), output);
  }

  // repeated .mahjong.MahjongDeskUserinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userlist(i), output);
  }

  // optional uint32 matchid = 6;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->matchid(), output);
  }

  // optional uint32 leftpnum = 7;
  if (this->leftpnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->leftpnum(), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.MahjongDeskinfo)
}

::google::protobuf::uint8* MahjongDeskinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.MahjongDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deskid(), target);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpos(), target);
  }

  // optional uint32 hostpos = 4;
  if (this->hostpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hostpos(), target);
  }

  // repeated .mahjong.MahjongDeskUserinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->userlist(i), false, target);
  }

  // optional uint32 matchid = 6;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->matchid(), target);
  }

  // optional uint32 leftpnum = 7;
  if (this->leftpnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->leftpnum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.MahjongDeskinfo)
  return target;
}

int MahjongDeskinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.MahjongDeskinfo)
  int total_size = 0;

  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curpos());
  }

  // optional uint32 hostpos = 4;
  if (this->hostpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hostpos());
  }

  // optional uint32 matchid = 6;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // optional uint32 leftpnum = 7;
  if (this->leftpnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftpnum());
  }

  // repeated .mahjong.MahjongDeskUserinfo userlist = 5;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongDeskinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.MahjongDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MahjongDeskinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MahjongDeskinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.MahjongDeskinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.MahjongDeskinfo)
    MergeFrom(*source);
  }
}

void MahjongDeskinfo::MergeFrom(const MahjongDeskinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.MahjongDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.curpos() != 0) {
    set_curpos(from.curpos());
  }
  if (from.hostpos() != 0) {
    set_hostpos(from.hostpos());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.leftpnum() != 0) {
    set_leftpnum(from.leftpnum());
  }
}

void MahjongDeskinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.MahjongDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongDeskinfo::CopyFrom(const MahjongDeskinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.MahjongDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongDeskinfo::IsInitialized() const {

  return true;
}

void MahjongDeskinfo::Swap(MahjongDeskinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MahjongDeskinfo::InternalSwap(MahjongDeskinfo* other) {
  std::swap(deskid_, other->deskid_);
  std::swap(status_, other->status_);
  std::swap(curpos_, other->curpos_);
  std::swap(hostpos_, other->hostpos_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  std::swap(matchid_, other->matchid_);
  std::swap(leftpnum_, other->leftpnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MahjongDeskinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahjongDeskinfo_descriptor_;
  metadata.reflection = MahjongDeskinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MahjongDeskinfo

// optional uint32 deskid = 1;
void MahjongDeskinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskinfo::deskid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.deskid)
  return deskid_;
}
 void MahjongDeskinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.deskid)
}

// optional uint32 status = 2;
void MahjongDeskinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskinfo::status() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.status)
  return status_;
}
 void MahjongDeskinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.status)
}

// optional uint32 curpos = 3;
void MahjongDeskinfo::clear_curpos() {
  curpos_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskinfo::curpos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.curpos)
  return curpos_;
}
 void MahjongDeskinfo::set_curpos(::google::protobuf::uint32 value) {
  
  curpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.curpos)
}

// optional uint32 hostpos = 4;
void MahjongDeskinfo::clear_hostpos() {
  hostpos_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskinfo::hostpos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.hostpos)
  return hostpos_;
}
 void MahjongDeskinfo::set_hostpos(::google::protobuf::uint32 value) {
  
  hostpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.hostpos)
}

// repeated .mahjong.MahjongDeskUserinfo userlist = 5;
int MahjongDeskinfo::userlist_size() const {
  return userlist_.size();
}
void MahjongDeskinfo::clear_userlist() {
  userlist_.Clear();
}
const ::mahjong::MahjongDeskUserinfo& MahjongDeskinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.userlist)
  return userlist_.Get(index);
}
::mahjong::MahjongDeskUserinfo* MahjongDeskinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskinfo.userlist)
  return userlist_.Mutable(index);
}
::mahjong::MahjongDeskUserinfo* MahjongDeskinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::MahjongDeskUserinfo >*
MahjongDeskinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongDeskUserinfo >&
MahjongDeskinfo::userlist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskinfo.userlist)
  return userlist_;
}

// optional uint32 matchid = 6;
void MahjongDeskinfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskinfo::matchid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.matchid)
  return matchid_;
}
 void MahjongDeskinfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.matchid)
}

// optional uint32 leftpnum = 7;
void MahjongDeskinfo::clear_leftpnum() {
  leftpnum_ = 0u;
}
 ::google::protobuf::uint32 MahjongDeskinfo::leftpnum() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskinfo.leftpnum)
  return leftpnum_;
}
 void MahjongDeskinfo::set_leftpnum(::google::protobuf::uint32 value) {
  
  leftpnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongDeskinfo.leftpnum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MahjongUserOpCardInfo::kPokerFieldNumber;
const int MahjongUserOpCardInfo::kTypeFieldNumber;
const int MahjongUserOpCardInfo::kCardvalueFieldNumber;
const int MahjongUserOpCardInfo::kUidFieldNumber;
const int MahjongUserOpCardInfo::kOpposFieldNumber;
const int MahjongUserOpCardInfo::kPutposFieldNumber;
const int MahjongUserOpCardInfo::kChangecoinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MahjongUserOpCardInfo::MahjongUserOpCardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.MahjongUserOpCardInfo)
}

void MahjongUserOpCardInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MahjongUserOpCardInfo::MahjongUserOpCardInfo(const MahjongUserOpCardInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.MahjongUserOpCardInfo)
}

void MahjongUserOpCardInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0u;
  cardvalue_ = 0u;
  uid_ = 0u;
  oppos_ = 0;
  putpos_ = 0;
  changecoin_ = 0;
}

MahjongUserOpCardInfo::~MahjongUserOpCardInfo() {
  // @@protoc_insertion_point(destructor:mahjong.MahjongUserOpCardInfo)
  SharedDtor();
}

void MahjongUserOpCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongUserOpCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahjongUserOpCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongUserOpCardInfo_descriptor_;
}

const MahjongUserOpCardInfo& MahjongUserOpCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MahjongUserOpCardInfo* MahjongUserOpCardInfo::default_instance_ = NULL;

MahjongUserOpCardInfo* MahjongUserOpCardInfo::New(::google::protobuf::Arena* arena) const {
  MahjongUserOpCardInfo* n = new MahjongUserOpCardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MahjongUserOpCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.MahjongUserOpCardInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MahjongUserOpCardInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MahjongUserOpCardInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, changecoin_);

#undef ZR_HELPER_
#undef ZR_

  poker_.Clear();
}

bool MahjongUserOpCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.MahjongUserOpCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mahjong.Card poker = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_poker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_poker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_poker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cardvalue;
        break;
      }

      // optional uint32 cardvalue = 3;
      case 3: {
        if (tag == 24) {
         parse_cardvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardvalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 4;
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_oppos;
        break;
      }

      // optional int32 oppos = 5;
      case 5: {
        if (tag == 40) {
         parse_oppos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oppos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_putpos;
        break;
      }

      // optional int32 putpos = 6;
      case 6: {
        if (tag == 48) {
         parse_putpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &putpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_changecoin;
        break;
      }

      // optional int32 changecoin = 7;
      case 7: {
        if (tag == 56) {
         parse_changecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changecoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.MahjongUserOpCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.MahjongUserOpCardInfo)
  return false;
#undef DO_
}

void MahjongUserOpCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.MahjongUserOpCardInfo)
  // repeated .mahjong.Card poker = 1;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->poker(i), output);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 cardvalue = 3;
  if (this->cardvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cardvalue(), output);
  }

  // optional uint32 uid = 4;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uid(), output);
  }

  // optional int32 oppos = 5;
  if (this->oppos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->oppos(), output);
  }

  // optional int32 putpos = 6;
  if (this->putpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->putpos(), output);
  }

  // optional int32 changecoin = 7;
  if (this->changecoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->changecoin(), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.MahjongUserOpCardInfo)
}

::google::protobuf::uint8* MahjongUserOpCardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.MahjongUserOpCardInfo)
  // repeated .mahjong.Card poker = 1;
  for (unsigned int i = 0, n = this->poker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->poker(i), false, target);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 cardvalue = 3;
  if (this->cardvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cardvalue(), target);
  }

  // optional uint32 uid = 4;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uid(), target);
  }

  // optional int32 oppos = 5;
  if (this->oppos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->oppos(), target);
  }

  // optional int32 putpos = 6;
  if (this->putpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->putpos(), target);
  }

  // optional int32 changecoin = 7;
  if (this->changecoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->changecoin(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.MahjongUserOpCardInfo)
  return target;
}

int MahjongUserOpCardInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.MahjongUserOpCardInfo)
  int total_size = 0;

  // optional uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 cardvalue = 3;
  if (this->cardvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cardvalue());
  }

  // optional uint32 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional int32 oppos = 5;
  if (this->oppos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oppos());
  }

  // optional int32 putpos = 6;
  if (this->putpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->putpos());
  }

  // optional int32 changecoin = 7;
  if (this->changecoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->changecoin());
  }

  // repeated .mahjong.Card poker = 1;
  total_size += 1 * this->poker_size();
  for (int i = 0; i < this->poker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poker(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongUserOpCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.MahjongUserOpCardInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MahjongUserOpCardInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MahjongUserOpCardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.MahjongUserOpCardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.MahjongUserOpCardInfo)
    MergeFrom(*source);
  }
}

void MahjongUserOpCardInfo::MergeFrom(const MahjongUserOpCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.MahjongUserOpCardInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  poker_.MergeFrom(from.poker_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.cardvalue() != 0) {
    set_cardvalue(from.cardvalue());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.oppos() != 0) {
    set_oppos(from.oppos());
  }
  if (from.putpos() != 0) {
    set_putpos(from.putpos());
  }
  if (from.changecoin() != 0) {
    set_changecoin(from.changecoin());
  }
}

void MahjongUserOpCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.MahjongUserOpCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongUserOpCardInfo::CopyFrom(const MahjongUserOpCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.MahjongUserOpCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongUserOpCardInfo::IsInitialized() const {

  return true;
}

void MahjongUserOpCardInfo::Swap(MahjongUserOpCardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MahjongUserOpCardInfo::InternalSwap(MahjongUserOpCardInfo* other) {
  poker_.UnsafeArenaSwap(&other->poker_);
  std::swap(type_, other->type_);
  std::swap(cardvalue_, other->cardvalue_);
  std::swap(uid_, other->uid_);
  std::swap(oppos_, other->oppos_);
  std::swap(putpos_, other->putpos_);
  std::swap(changecoin_, other->changecoin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MahjongUserOpCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahjongUserOpCardInfo_descriptor_;
  metadata.reflection = MahjongUserOpCardInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MahjongUserOpCardInfo

// repeated .mahjong.Card poker = 1;
int MahjongUserOpCardInfo::poker_size() const {
  return poker_.size();
}
void MahjongUserOpCardInfo::clear_poker() {
  poker_.Clear();
}
const ::mahjong::Card& MahjongUserOpCardInfo::poker(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.poker)
  return poker_.Get(index);
}
::mahjong::Card* MahjongUserOpCardInfo::mutable_poker(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserOpCardInfo.poker)
  return poker_.Mutable(index);
}
::mahjong::Card* MahjongUserOpCardInfo::add_poker() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserOpCardInfo.poker)
  return poker_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongUserOpCardInfo::mutable_poker() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserOpCardInfo.poker)
  return &poker_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongUserOpCardInfo::poker() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserOpCardInfo.poker)
  return poker_;
}

// optional uint32 type = 2;
void MahjongUserOpCardInfo::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserOpCardInfo::type() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.type)
  return type_;
}
 void MahjongUserOpCardInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.type)
}

// optional uint32 cardvalue = 3;
void MahjongUserOpCardInfo::clear_cardvalue() {
  cardvalue_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserOpCardInfo::cardvalue() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.cardvalue)
  return cardvalue_;
}
 void MahjongUserOpCardInfo::set_cardvalue(::google::protobuf::uint32 value) {
  
  cardvalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.cardvalue)
}

// optional uint32 uid = 4;
void MahjongUserOpCardInfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserOpCardInfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.uid)
  return uid_;
}
 void MahjongUserOpCardInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.uid)
}

// optional int32 oppos = 5;
void MahjongUserOpCardInfo::clear_oppos() {
  oppos_ = 0;
}
 ::google::protobuf::int32 MahjongUserOpCardInfo::oppos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.oppos)
  return oppos_;
}
 void MahjongUserOpCardInfo::set_oppos(::google::protobuf::int32 value) {
  
  oppos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.oppos)
}

// optional int32 putpos = 6;
void MahjongUserOpCardInfo::clear_putpos() {
  putpos_ = 0;
}
 ::google::protobuf::int32 MahjongUserOpCardInfo::putpos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.putpos)
  return putpos_;
}
 void MahjongUserOpCardInfo::set_putpos(::google::protobuf::int32 value) {
  
  putpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.putpos)
}

// optional int32 changecoin = 7;
void MahjongUserOpCardInfo::clear_changecoin() {
  changecoin_ = 0;
}
 ::google::protobuf::int32 MahjongUserOpCardInfo::changecoin() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserOpCardInfo.changecoin)
  return changecoin_;
}
 void MahjongUserOpCardInfo::set_changecoin(::google::protobuf::int32 value) {
  
  changecoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserOpCardInfo.changecoin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MahjongDeskResultinfo::kUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MahjongDeskResultinfo::MahjongDeskResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.MahjongDeskResultinfo)
}

void MahjongDeskResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MahjongDeskResultinfo::MahjongDeskResultinfo(const MahjongDeskResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.MahjongDeskResultinfo)
}

void MahjongDeskResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MahjongDeskResultinfo::~MahjongDeskResultinfo() {
  // @@protoc_insertion_point(destructor:mahjong.MahjongDeskResultinfo)
  SharedDtor();
}

void MahjongDeskResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongDeskResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahjongDeskResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongDeskResultinfo_descriptor_;
}

const MahjongDeskResultinfo& MahjongDeskResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MahjongDeskResultinfo* MahjongDeskResultinfo::default_instance_ = NULL;

MahjongDeskResultinfo* MahjongDeskResultinfo::New(::google::protobuf::Arena* arena) const {
  MahjongDeskResultinfo* n = new MahjongDeskResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MahjongDeskResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.MahjongDeskResultinfo)
  userlist_.Clear();
}

bool MahjongDeskResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.MahjongDeskResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mahjong.MahjongUserResultinfo userlist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.MahjongDeskResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.MahjongDeskResultinfo)
  return false;
#undef DO_
}

void MahjongDeskResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.MahjongDeskResultinfo)
  // repeated .mahjong.MahjongUserResultinfo userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.MahjongDeskResultinfo)
}

::google::protobuf::uint8* MahjongDeskResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.MahjongDeskResultinfo)
  // repeated .mahjong.MahjongUserResultinfo userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->userlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.MahjongDeskResultinfo)
  return target;
}

int MahjongDeskResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.MahjongDeskResultinfo)
  int total_size = 0;

  // repeated .mahjong.MahjongUserResultinfo userlist = 1;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongDeskResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.MahjongDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MahjongDeskResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MahjongDeskResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.MahjongDeskResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.MahjongDeskResultinfo)
    MergeFrom(*source);
  }
}

void MahjongDeskResultinfo::MergeFrom(const MahjongDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.MahjongDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
}

void MahjongDeskResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.MahjongDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongDeskResultinfo::CopyFrom(const MahjongDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.MahjongDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongDeskResultinfo::IsInitialized() const {

  return true;
}

void MahjongDeskResultinfo::Swap(MahjongDeskResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MahjongDeskResultinfo::InternalSwap(MahjongDeskResultinfo* other) {
  userlist_.UnsafeArenaSwap(&other->userlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MahjongDeskResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahjongDeskResultinfo_descriptor_;
  metadata.reflection = MahjongDeskResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MahjongDeskResultinfo

// repeated .mahjong.MahjongUserResultinfo userlist = 1;
int MahjongDeskResultinfo::userlist_size() const {
  return userlist_.size();
}
void MahjongDeskResultinfo::clear_userlist() {
  userlist_.Clear();
}
const ::mahjong::MahjongUserResultinfo& MahjongDeskResultinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongDeskResultinfo.userlist)
  return userlist_.Get(index);
}
::mahjong::MahjongUserResultinfo* MahjongDeskResultinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongDeskResultinfo.userlist)
  return userlist_.Mutable(index);
}
::mahjong::MahjongUserResultinfo* MahjongDeskResultinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongDeskResultinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserResultinfo >*
MahjongDeskResultinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongDeskResultinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserResultinfo >&
MahjongDeskResultinfo::userlist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongDeskResultinfo.userlist)
  return userlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MahjongUserResultinfo::kUidFieldNumber;
const int MahjongUserResultinfo::kPosFieldNumber;
const int MahjongUserResultinfo::kResultFieldNumber;
const int MahjongUserResultinfo::kValueFieldNumber;
const int MahjongUserResultinfo::kCoinFieldNumber;
const int MahjongUserResultinfo::kUsercardFieldNumber;
const int MahjongUserResultinfo::kGamevalueFieldNumber;
const int MahjongUserResultinfo::kRankFieldNumber;
const int MahjongUserResultinfo::kGangwincoinFieldNumber;
const int MahjongUserResultinfo::kOpcardinfoFieldNumber;
const int MahjongUserResultinfo::kHulistFieldNumber;
const int MahjongUserResultinfo::kPrelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MahjongUserResultinfo::MahjongUserResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.MahjongUserResultinfo)
}

void MahjongUserResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MahjongUserResultinfo::MahjongUserResultinfo(const MahjongUserResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.MahjongUserResultinfo)
}

void MahjongUserResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0u;
  pos_ = 0u;
  result_ = 0u;
  value_ = 0;
  coin_ = 0;
  gamevalue_ = 0;
  rank_ = 0u;
  gangwincoin_ = 0;
}

MahjongUserResultinfo::~MahjongUserResultinfo() {
  // @@protoc_insertion_point(destructor:mahjong.MahjongUserResultinfo)
  SharedDtor();
}

void MahjongUserResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongUserResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahjongUserResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongUserResultinfo_descriptor_;
}

const MahjongUserResultinfo& MahjongUserResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MahjongUserResultinfo* MahjongUserResultinfo::default_instance_ = NULL;

MahjongUserResultinfo* MahjongUserResultinfo::New(::google::protobuf::Arena* arena) const {
  MahjongUserResultinfo* n = new MahjongUserResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MahjongUserResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.MahjongUserResultinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MahjongUserResultinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MahjongUserResultinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, value_);
  ZR_(coin_, rank_);
  gangwincoin_ = 0;

#undef ZR_HELPER_
#undef ZR_

  usercard_.Clear();
  opcardinfo_.Clear();
  hulist_.Clear();
  prelist_.Clear();
}

bool MahjongUserResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.MahjongUserResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // optional int32 coin = 5;
      case 5: {
        if (tag == 40) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_usercard;
        break;
      }

      // repeated .mahjong.Card usercard = 6;
      case 6: {
        if (tag == 50) {
         parse_usercard:
          DO_(input->IncrementRecursionDepth());
         parse_loop_usercard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_usercard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_usercard;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 7;
      case 7: {
        if (tag == 56) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 8;
      case 8: {
        if (tag == 64) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gangwincoin;
        break;
      }

      // optional int32 gangwincoin = 9;
      case 9: {
        if (tag == 72) {
         parse_gangwincoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangwincoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_opcardinfo;
        break;
      }

      // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 10;
      case 10: {
        if (tag == 82) {
         parse_opcardinfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_opcardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_opcardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_opcardinfo;
        if (input->ExpectTag(90)) goto parse_loop_hulist;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .mahjong.HuCardInfo hulist = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hulist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hulist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_hulist;
        if (input->ExpectTag(98)) goto parse_loop_prelist;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .mahjong.ResultPreInfo prelist = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_prelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_prelist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.MahjongUserResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.MahjongUserResultinfo)
  return false;
#undef DO_
}

void MahjongUserResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.MahjongUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // optional int32 value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  // optional int32 coin = 5;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->coin(), output);
  }

  // repeated .mahjong.Card usercard = 6;
  for (unsigned int i = 0, n = this->usercard_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->usercard(i), output);
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gamevalue(), output);
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rank(), output);
  }

  // optional int32 gangwincoin = 9;
  if (this->gangwincoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gangwincoin(), output);
  }

  // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 10;
  for (unsigned int i = 0, n = this->opcardinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->opcardinfo(i), output);
  }

  // repeated .mahjong.HuCardInfo hulist = 11;
  for (unsigned int i = 0, n = this->hulist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->hulist(i), output);
  }

  // repeated .mahjong.ResultPreInfo prelist = 12;
  for (unsigned int i = 0, n = this->prelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->prelist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.MahjongUserResultinfo)
}

::google::protobuf::uint8* MahjongUserResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.MahjongUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // optional int32 value = 4;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }

  // optional int32 coin = 5;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->coin(), target);
  }

  // repeated .mahjong.Card usercard = 6;
  for (unsigned int i = 0, n = this->usercard_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->usercard(i), false, target);
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gamevalue(), target);
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rank(), target);
  }

  // optional int32 gangwincoin = 9;
  if (this->gangwincoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gangwincoin(), target);
  }

  // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 10;
  for (unsigned int i = 0, n = this->opcardinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->opcardinfo(i), false, target);
  }

  // repeated .mahjong.HuCardInfo hulist = 11;
  for (unsigned int i = 0, n = this->hulist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->hulist(i), false, target);
  }

  // repeated .mahjong.ResultPreInfo prelist = 12;
  for (unsigned int i = 0, n = this->prelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->prelist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.MahjongUserResultinfo)
  return target;
}

int MahjongUserResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.MahjongUserResultinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional int32 value = 4;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  // optional int32 coin = 5;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coin());
  }

  // optional int32 gamevalue = 7;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 rank = 8;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // optional int32 gangwincoin = 9;
  if (this->gangwincoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gangwincoin());
  }

  // repeated .mahjong.Card usercard = 6;
  total_size += 1 * this->usercard_size();
  for (int i = 0; i < this->usercard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercard(i));
  }

  // repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 10;
  total_size += 1 * this->opcardinfo_size();
  for (int i = 0; i < this->opcardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opcardinfo(i));
  }

  // repeated .mahjong.HuCardInfo hulist = 11;
  total_size += 1 * this->hulist_size();
  for (int i = 0; i < this->hulist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hulist(i));
  }

  // repeated .mahjong.ResultPreInfo prelist = 12;
  total_size += 1 * this->prelist_size();
  for (int i = 0; i < this->prelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prelist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongUserResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.MahjongUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MahjongUserResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MahjongUserResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.MahjongUserResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.MahjongUserResultinfo)
    MergeFrom(*source);
  }
}

void MahjongUserResultinfo::MergeFrom(const MahjongUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.MahjongUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  usercard_.MergeFrom(from.usercard_);
  opcardinfo_.MergeFrom(from.opcardinfo_);
  hulist_.MergeFrom(from.hulist_);
  prelist_.MergeFrom(from.prelist_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.gangwincoin() != 0) {
    set_gangwincoin(from.gangwincoin());
  }
}

void MahjongUserResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.MahjongUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongUserResultinfo::CopyFrom(const MahjongUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.MahjongUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongUserResultinfo::IsInitialized() const {

  return true;
}

void MahjongUserResultinfo::Swap(MahjongUserResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MahjongUserResultinfo::InternalSwap(MahjongUserResultinfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  std::swap(value_, other->value_);
  std::swap(coin_, other->coin_);
  usercard_.UnsafeArenaSwap(&other->usercard_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(rank_, other->rank_);
  std::swap(gangwincoin_, other->gangwincoin_);
  opcardinfo_.UnsafeArenaSwap(&other->opcardinfo_);
  hulist_.UnsafeArenaSwap(&other->hulist_);
  prelist_.UnsafeArenaSwap(&other->prelist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MahjongUserResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahjongUserResultinfo_descriptor_;
  metadata.reflection = MahjongUserResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MahjongUserResultinfo

// optional uint32 uid = 1;
void MahjongUserResultinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserResultinfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.uid)
  return uid_;
}
 void MahjongUserResultinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.uid)
}

// optional uint32 pos = 2;
void MahjongUserResultinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserResultinfo::pos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.pos)
  return pos_;
}
 void MahjongUserResultinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.pos)
}

// optional uint32 result = 3;
void MahjongUserResultinfo::clear_result() {
  result_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserResultinfo::result() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.result)
  return result_;
}
 void MahjongUserResultinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.result)
}

// optional int32 value = 4;
void MahjongUserResultinfo::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 MahjongUserResultinfo::value() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.value)
  return value_;
}
 void MahjongUserResultinfo::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.value)
}

// optional int32 coin = 5;
void MahjongUserResultinfo::clear_coin() {
  coin_ = 0;
}
 ::google::protobuf::int32 MahjongUserResultinfo::coin() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.coin)
  return coin_;
}
 void MahjongUserResultinfo::set_coin(::google::protobuf::int32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.coin)
}

// repeated .mahjong.Card usercard = 6;
int MahjongUserResultinfo::usercard_size() const {
  return usercard_.size();
}
void MahjongUserResultinfo::clear_usercard() {
  usercard_.Clear();
}
const ::mahjong::Card& MahjongUserResultinfo::usercard(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.usercard)
  return usercard_.Get(index);
}
::mahjong::Card* MahjongUserResultinfo::mutable_usercard(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserResultinfo.usercard)
  return usercard_.Mutable(index);
}
::mahjong::Card* MahjongUserResultinfo::add_usercard() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserResultinfo.usercard)
  return usercard_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::Card >*
MahjongUserResultinfo::mutable_usercard() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserResultinfo.usercard)
  return &usercard_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::Card >&
MahjongUserResultinfo::usercard() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserResultinfo.usercard)
  return usercard_;
}

// optional int32 gamevalue = 7;
void MahjongUserResultinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 MahjongUserResultinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.gamevalue)
  return gamevalue_;
}
 void MahjongUserResultinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.gamevalue)
}

// optional uint32 rank = 8;
void MahjongUserResultinfo::clear_rank() {
  rank_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserResultinfo::rank() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.rank)
  return rank_;
}
 void MahjongUserResultinfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.rank)
}

// optional int32 gangwincoin = 9;
void MahjongUserResultinfo::clear_gangwincoin() {
  gangwincoin_ = 0;
}
 ::google::protobuf::int32 MahjongUserResultinfo::gangwincoin() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.gangwincoin)
  return gangwincoin_;
}
 void MahjongUserResultinfo::set_gangwincoin(::google::protobuf::int32 value) {
  
  gangwincoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserResultinfo.gangwincoin)
}

// repeated .mahjong.MahjongUserOpCardInfo opcardinfo = 10;
int MahjongUserResultinfo::opcardinfo_size() const {
  return opcardinfo_.size();
}
void MahjongUserResultinfo::clear_opcardinfo() {
  opcardinfo_.Clear();
}
const ::mahjong::MahjongUserOpCardInfo& MahjongUserResultinfo::opcardinfo(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.opcardinfo)
  return opcardinfo_.Get(index);
}
::mahjong::MahjongUserOpCardInfo* MahjongUserResultinfo::mutable_opcardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserResultinfo.opcardinfo)
  return opcardinfo_.Mutable(index);
}
::mahjong::MahjongUserOpCardInfo* MahjongUserResultinfo::add_opcardinfo() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserResultinfo.opcardinfo)
  return opcardinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >*
MahjongUserResultinfo::mutable_opcardinfo() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserResultinfo.opcardinfo)
  return &opcardinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserOpCardInfo >&
MahjongUserResultinfo::opcardinfo() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserResultinfo.opcardinfo)
  return opcardinfo_;
}

// repeated .mahjong.HuCardInfo hulist = 11;
int MahjongUserResultinfo::hulist_size() const {
  return hulist_.size();
}
void MahjongUserResultinfo::clear_hulist() {
  hulist_.Clear();
}
const ::mahjong::HuCardInfo& MahjongUserResultinfo::hulist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.hulist)
  return hulist_.Get(index);
}
::mahjong::HuCardInfo* MahjongUserResultinfo::mutable_hulist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserResultinfo.hulist)
  return hulist_.Mutable(index);
}
::mahjong::HuCardInfo* MahjongUserResultinfo::add_hulist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserResultinfo.hulist)
  return hulist_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::HuCardInfo >*
MahjongUserResultinfo::mutable_hulist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserResultinfo.hulist)
  return &hulist_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::HuCardInfo >&
MahjongUserResultinfo::hulist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserResultinfo.hulist)
  return hulist_;
}

// repeated .mahjong.ResultPreInfo prelist = 12;
int MahjongUserResultinfo::prelist_size() const {
  return prelist_.size();
}
void MahjongUserResultinfo::clear_prelist() {
  prelist_.Clear();
}
const ::mahjong::ResultPreInfo& MahjongUserResultinfo::prelist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserResultinfo.prelist)
  return prelist_.Get(index);
}
::mahjong::ResultPreInfo* MahjongUserResultinfo::mutable_prelist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongUserResultinfo.prelist)
  return prelist_.Mutable(index);
}
::mahjong::ResultPreInfo* MahjongUserResultinfo::add_prelist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongUserResultinfo.prelist)
  return prelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::ResultPreInfo >*
MahjongUserResultinfo::mutable_prelist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongUserResultinfo.prelist)
  return &prelist_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::ResultPreInfo >&
MahjongUserResultinfo::prelist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongUserResultinfo.prelist)
  return prelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuCardInfo::kTypeFieldNumber;
const int HuCardInfo::kCardvalueFieldNumber;
const int HuCardInfo::kUidFieldNumber;
const int HuCardInfo::kOpposFieldNumber;
const int HuCardInfo::kPutposFieldNumber;
const int HuCardInfo::kChangecoinFieldNumber;
const int HuCardInfo::kGangnumFieldNumber;
const int HuCardInfo::kOthertypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuCardInfo::HuCardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.HuCardInfo)
}

void HuCardInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HuCardInfo::HuCardInfo(const HuCardInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.HuCardInfo)
}

void HuCardInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0u;
  cardvalue_ = 0u;
  uid_ = 0u;
  oppos_ = 0;
  putpos_ = 0;
  changecoin_ = 0;
  gangnum_ = 0u;
  othertype_ = 0u;
}

HuCardInfo::~HuCardInfo() {
  // @@protoc_insertion_point(destructor:mahjong.HuCardInfo)
  SharedDtor();
}

void HuCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HuCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuCardInfo_descriptor_;
}

const HuCardInfo& HuCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

HuCardInfo* HuCardInfo::default_instance_ = NULL;

HuCardInfo* HuCardInfo::New(::google::protobuf::Arena* arena) const {
  HuCardInfo* n = new HuCardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.HuCardInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HuCardInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HuCardInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, othertype_);

#undef ZR_HELPER_
#undef ZR_

}

bool HuCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.HuCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cardvalue;
        break;
      }

      // optional uint32 cardvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_cardvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardvalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_oppos;
        break;
      }

      // optional int32 oppos = 4;
      case 4: {
        if (tag == 32) {
         parse_oppos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oppos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_putpos;
        break;
      }

      // optional int32 putpos = 5;
      case 5: {
        if (tag == 40) {
         parse_putpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &putpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_changecoin;
        break;
      }

      // optional int32 changecoin = 6;
      case 6: {
        if (tag == 48) {
         parse_changecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changecoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gangnum;
        break;
      }

      // optional uint32 gangnum = 7;
      case 7: {
        if (tag == 56) {
         parse_gangnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gangnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_othertype;
        break;
      }

      // optional uint32 othertype = 8;
      case 8: {
        if (tag == 64) {
         parse_othertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othertype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.HuCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.HuCardInfo)
  return false;
#undef DO_
}

void HuCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.HuCardInfo)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 cardvalue = 2;
  if (this->cardvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cardvalue(), output);
  }

  // optional uint32 uid = 3;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional int32 oppos = 4;
  if (this->oppos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oppos(), output);
  }

  // optional int32 putpos = 5;
  if (this->putpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->putpos(), output);
  }

  // optional int32 changecoin = 6;
  if (this->changecoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->changecoin(), output);
  }

  // optional uint32 gangnum = 7;
  if (this->gangnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gangnum(), output);
  }

  // optional uint32 othertype = 8;
  if (this->othertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->othertype(), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.HuCardInfo)
}

::google::protobuf::uint8* HuCardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.HuCardInfo)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 cardvalue = 2;
  if (this->cardvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cardvalue(), target);
  }

  // optional uint32 uid = 3;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional int32 oppos = 4;
  if (this->oppos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oppos(), target);
  }

  // optional int32 putpos = 5;
  if (this->putpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->putpos(), target);
  }

  // optional int32 changecoin = 6;
  if (this->changecoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->changecoin(), target);
  }

  // optional uint32 gangnum = 7;
  if (this->gangnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gangnum(), target);
  }

  // optional uint32 othertype = 8;
  if (this->othertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->othertype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.HuCardInfo)
  return target;
}

int HuCardInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.HuCardInfo)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 cardvalue = 2;
  if (this->cardvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cardvalue());
  }

  // optional uint32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional int32 oppos = 4;
  if (this->oppos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oppos());
  }

  // optional int32 putpos = 5;
  if (this->putpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->putpos());
  }

  // optional int32 changecoin = 6;
  if (this->changecoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->changecoin());
  }

  // optional uint32 gangnum = 7;
  if (this->gangnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gangnum());
  }

  // optional uint32 othertype = 8;
  if (this->othertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->othertype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.HuCardInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HuCardInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HuCardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.HuCardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.HuCardInfo)
    MergeFrom(*source);
  }
}

void HuCardInfo::MergeFrom(const HuCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.HuCardInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.cardvalue() != 0) {
    set_cardvalue(from.cardvalue());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.oppos() != 0) {
    set_oppos(from.oppos());
  }
  if (from.putpos() != 0) {
    set_putpos(from.putpos());
  }
  if (from.changecoin() != 0) {
    set_changecoin(from.changecoin());
  }
  if (from.gangnum() != 0) {
    set_gangnum(from.gangnum());
  }
  if (from.othertype() != 0) {
    set_othertype(from.othertype());
  }
}

void HuCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.HuCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuCardInfo::CopyFrom(const HuCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.HuCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuCardInfo::IsInitialized() const {

  return true;
}

void HuCardInfo::Swap(HuCardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuCardInfo::InternalSwap(HuCardInfo* other) {
  std::swap(type_, other->type_);
  std::swap(cardvalue_, other->cardvalue_);
  std::swap(uid_, other->uid_);
  std::swap(oppos_, other->oppos_);
  std::swap(putpos_, other->putpos_);
  std::swap(changecoin_, other->changecoin_);
  std::swap(gangnum_, other->gangnum_);
  std::swap(othertype_, other->othertype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuCardInfo_descriptor_;
  metadata.reflection = HuCardInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuCardInfo

// optional uint32 type = 1;
void HuCardInfo::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 HuCardInfo::type() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.type)
  return type_;
}
 void HuCardInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.type)
}

// optional uint32 cardvalue = 2;
void HuCardInfo::clear_cardvalue() {
  cardvalue_ = 0u;
}
 ::google::protobuf::uint32 HuCardInfo::cardvalue() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.cardvalue)
  return cardvalue_;
}
 void HuCardInfo::set_cardvalue(::google::protobuf::uint32 value) {
  
  cardvalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.cardvalue)
}

// optional uint32 uid = 3;
void HuCardInfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 HuCardInfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.uid)
  return uid_;
}
 void HuCardInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.uid)
}

// optional int32 oppos = 4;
void HuCardInfo::clear_oppos() {
  oppos_ = 0;
}
 ::google::protobuf::int32 HuCardInfo::oppos() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.oppos)
  return oppos_;
}
 void HuCardInfo::set_oppos(::google::protobuf::int32 value) {
  
  oppos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.oppos)
}

// optional int32 putpos = 5;
void HuCardInfo::clear_putpos() {
  putpos_ = 0;
}
 ::google::protobuf::int32 HuCardInfo::putpos() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.putpos)
  return putpos_;
}
 void HuCardInfo::set_putpos(::google::protobuf::int32 value) {
  
  putpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.putpos)
}

// optional int32 changecoin = 6;
void HuCardInfo::clear_changecoin() {
  changecoin_ = 0;
}
 ::google::protobuf::int32 HuCardInfo::changecoin() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.changecoin)
  return changecoin_;
}
 void HuCardInfo::set_changecoin(::google::protobuf::int32 value) {
  
  changecoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.changecoin)
}

// optional uint32 gangnum = 7;
void HuCardInfo::clear_gangnum() {
  gangnum_ = 0u;
}
 ::google::protobuf::uint32 HuCardInfo::gangnum() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.gangnum)
  return gangnum_;
}
 void HuCardInfo::set_gangnum(::google::protobuf::uint32 value) {
  
  gangnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.gangnum)
}

// optional uint32 othertype = 8;
void HuCardInfo::clear_othertype() {
  othertype_ = 0u;
}
 ::google::protobuf::uint32 HuCardInfo::othertype() const {
  // @@protoc_insertion_point(field_get:mahjong.HuCardInfo.othertype)
  return othertype_;
}
 void HuCardInfo::set_othertype(::google::protobuf::uint32 value) {
  
  othertype_ = value;
  // @@protoc_insertion_point(field_set:mahjong.HuCardInfo.othertype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultPreInfo::kTypeFieldNumber;
const int ResultPreInfo::kOpposFieldNumber;
const int ResultPreInfo::kPutposFieldNumber;
const int ResultPreInfo::kChangecoinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultPreInfo::ResultPreInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.ResultPreInfo)
}

void ResultPreInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResultPreInfo::ResultPreInfo(const ResultPreInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.ResultPreInfo)
}

void ResultPreInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0u;
  oppos_ = 0;
  putpos_ = 0;
  changecoin_ = 0;
}

ResultPreInfo::~ResultPreInfo() {
  // @@protoc_insertion_point(destructor:mahjong.ResultPreInfo)
  SharedDtor();
}

void ResultPreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultPreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultPreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultPreInfo_descriptor_;
}

const ResultPreInfo& ResultPreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

ResultPreInfo* ResultPreInfo::default_instance_ = NULL;

ResultPreInfo* ResultPreInfo::New(::google::protobuf::Arena* arena) const {
  ResultPreInfo* n = new ResultPreInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultPreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.ResultPreInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResultPreInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResultPreInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, changecoin_);

#undef ZR_HELPER_
#undef ZR_

}

bool ResultPreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.ResultPreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oppos;
        break;
      }

      // optional int32 oppos = 2;
      case 2: {
        if (tag == 16) {
         parse_oppos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oppos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_putpos;
        break;
      }

      // optional int32 putpos = 3;
      case 3: {
        if (tag == 24) {
         parse_putpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &putpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_changecoin;
        break;
      }

      // optional int32 changecoin = 4;
      case 4: {
        if (tag == 32) {
         parse_changecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changecoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.ResultPreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.ResultPreInfo)
  return false;
#undef DO_
}

void ResultPreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.ResultPreInfo)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional int32 oppos = 2;
  if (this->oppos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oppos(), output);
  }

  // optional int32 putpos = 3;
  if (this->putpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->putpos(), output);
  }

  // optional int32 changecoin = 4;
  if (this->changecoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->changecoin(), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.ResultPreInfo)
}

::google::protobuf::uint8* ResultPreInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.ResultPreInfo)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional int32 oppos = 2;
  if (this->oppos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oppos(), target);
  }

  // optional int32 putpos = 3;
  if (this->putpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->putpos(), target);
  }

  // optional int32 changecoin = 4;
  if (this->changecoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->changecoin(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.ResultPreInfo)
  return target;
}

int ResultPreInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.ResultPreInfo)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional int32 oppos = 2;
  if (this->oppos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oppos());
  }

  // optional int32 putpos = 3;
  if (this->putpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->putpos());
  }

  // optional int32 changecoin = 4;
  if (this->changecoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->changecoin());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultPreInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.ResultPreInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResultPreInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultPreInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.ResultPreInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.ResultPreInfo)
    MergeFrom(*source);
  }
}

void ResultPreInfo::MergeFrom(const ResultPreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.ResultPreInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.oppos() != 0) {
    set_oppos(from.oppos());
  }
  if (from.putpos() != 0) {
    set_putpos(from.putpos());
  }
  if (from.changecoin() != 0) {
    set_changecoin(from.changecoin());
  }
}

void ResultPreInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.ResultPreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultPreInfo::CopyFrom(const ResultPreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.ResultPreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultPreInfo::IsInitialized() const {

  return true;
}

void ResultPreInfo::Swap(ResultPreInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultPreInfo::InternalSwap(ResultPreInfo* other) {
  std::swap(type_, other->type_);
  std::swap(oppos_, other->oppos_);
  std::swap(putpos_, other->putpos_);
  std::swap(changecoin_, other->changecoin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultPreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultPreInfo_descriptor_;
  metadata.reflection = ResultPreInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultPreInfo

// optional uint32 type = 1;
void ResultPreInfo::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 ResultPreInfo::type() const {
  // @@protoc_insertion_point(field_get:mahjong.ResultPreInfo.type)
  return type_;
}
 void ResultPreInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong.ResultPreInfo.type)
}

// optional int32 oppos = 2;
void ResultPreInfo::clear_oppos() {
  oppos_ = 0;
}
 ::google::protobuf::int32 ResultPreInfo::oppos() const {
  // @@protoc_insertion_point(field_get:mahjong.ResultPreInfo.oppos)
  return oppos_;
}
 void ResultPreInfo::set_oppos(::google::protobuf::int32 value) {
  
  oppos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.ResultPreInfo.oppos)
}

// optional int32 putpos = 3;
void ResultPreInfo::clear_putpos() {
  putpos_ = 0;
}
 ::google::protobuf::int32 ResultPreInfo::putpos() const {
  // @@protoc_insertion_point(field_get:mahjong.ResultPreInfo.putpos)
  return putpos_;
}
 void ResultPreInfo::set_putpos(::google::protobuf::int32 value) {
  
  putpos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.ResultPreInfo.putpos)
}

// optional int32 changecoin = 4;
void ResultPreInfo::clear_changecoin() {
  changecoin_ = 0;
}
 ::google::protobuf::int32 ResultPreInfo::changecoin() const {
  // @@protoc_insertion_point(field_get:mahjong.ResultPreInfo.changecoin)
  return changecoin_;
}
 void ResultPreInfo::set_changecoin(::google::protobuf::int32 value) {
  
  changecoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.ResultPreInfo.changecoin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MahjongCoinChangeinfo::kUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MahjongCoinChangeinfo::MahjongCoinChangeinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.MahjongCoinChangeinfo)
}

void MahjongCoinChangeinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MahjongCoinChangeinfo::MahjongCoinChangeinfo(const MahjongCoinChangeinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.MahjongCoinChangeinfo)
}

void MahjongCoinChangeinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MahjongCoinChangeinfo::~MahjongCoinChangeinfo() {
  // @@protoc_insertion_point(destructor:mahjong.MahjongCoinChangeinfo)
  SharedDtor();
}

void MahjongCoinChangeinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongCoinChangeinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahjongCoinChangeinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongCoinChangeinfo_descriptor_;
}

const MahjongCoinChangeinfo& MahjongCoinChangeinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MahjongCoinChangeinfo* MahjongCoinChangeinfo::default_instance_ = NULL;

MahjongCoinChangeinfo* MahjongCoinChangeinfo::New(::google::protobuf::Arena* arena) const {
  MahjongCoinChangeinfo* n = new MahjongCoinChangeinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MahjongCoinChangeinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.MahjongCoinChangeinfo)
  userlist_.Clear();
}

bool MahjongCoinChangeinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.MahjongCoinChangeinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mahjong.MahjongUserCoinChinfo userlist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.MahjongCoinChangeinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.MahjongCoinChangeinfo)
  return false;
#undef DO_
}

void MahjongCoinChangeinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.MahjongCoinChangeinfo)
  // repeated .mahjong.MahjongUserCoinChinfo userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.MahjongCoinChangeinfo)
}

::google::protobuf::uint8* MahjongCoinChangeinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.MahjongCoinChangeinfo)
  // repeated .mahjong.MahjongUserCoinChinfo userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->userlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.MahjongCoinChangeinfo)
  return target;
}

int MahjongCoinChangeinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.MahjongCoinChangeinfo)
  int total_size = 0;

  // repeated .mahjong.MahjongUserCoinChinfo userlist = 1;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongCoinChangeinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.MahjongCoinChangeinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MahjongCoinChangeinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MahjongCoinChangeinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.MahjongCoinChangeinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.MahjongCoinChangeinfo)
    MergeFrom(*source);
  }
}

void MahjongCoinChangeinfo::MergeFrom(const MahjongCoinChangeinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.MahjongCoinChangeinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
}

void MahjongCoinChangeinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.MahjongCoinChangeinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongCoinChangeinfo::CopyFrom(const MahjongCoinChangeinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.MahjongCoinChangeinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongCoinChangeinfo::IsInitialized() const {

  return true;
}

void MahjongCoinChangeinfo::Swap(MahjongCoinChangeinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MahjongCoinChangeinfo::InternalSwap(MahjongCoinChangeinfo* other) {
  userlist_.UnsafeArenaSwap(&other->userlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MahjongCoinChangeinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahjongCoinChangeinfo_descriptor_;
  metadata.reflection = MahjongCoinChangeinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MahjongCoinChangeinfo

// repeated .mahjong.MahjongUserCoinChinfo userlist = 1;
int MahjongCoinChangeinfo::userlist_size() const {
  return userlist_.size();
}
void MahjongCoinChangeinfo::clear_userlist() {
  userlist_.Clear();
}
const ::mahjong::MahjongUserCoinChinfo& MahjongCoinChangeinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongCoinChangeinfo.userlist)
  return userlist_.Get(index);
}
::mahjong::MahjongUserCoinChinfo* MahjongCoinChangeinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongCoinChangeinfo.userlist)
  return userlist_.Mutable(index);
}
::mahjong::MahjongUserCoinChinfo* MahjongCoinChangeinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:mahjong.MahjongCoinChangeinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserCoinChinfo >*
MahjongCoinChangeinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:mahjong.MahjongCoinChangeinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::mahjong::MahjongUserCoinChinfo >&
MahjongCoinChangeinfo::userlist() const {
  // @@protoc_insertion_point(field_list:mahjong.MahjongCoinChangeinfo.userlist)
  return userlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MahjongUserCoinChinfo::kUidFieldNumber;
const int MahjongUserCoinChinfo::kPosFieldNumber;
const int MahjongUserCoinChinfo::kResultFieldNumber;
const int MahjongUserCoinChinfo::kValueFieldNumber;
const int MahjongUserCoinChinfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MahjongUserCoinChinfo::MahjongUserCoinChinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.MahjongUserCoinChinfo)
}

void MahjongUserCoinChinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MahjongUserCoinChinfo::MahjongUserCoinChinfo(const MahjongUserCoinChinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.MahjongUserCoinChinfo)
}

void MahjongUserCoinChinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0u;
  pos_ = 0u;
  result_ = 0u;
  value_ = 0;
  type_ = 0u;
}

MahjongUserCoinChinfo::~MahjongUserCoinChinfo() {
  // @@protoc_insertion_point(destructor:mahjong.MahjongUserCoinChinfo)
  SharedDtor();
}

void MahjongUserCoinChinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongUserCoinChinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahjongUserCoinChinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongUserCoinChinfo_descriptor_;
}

const MahjongUserCoinChinfo& MahjongUserCoinChinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MahjongUserCoinChinfo* MahjongUserCoinChinfo::default_instance_ = NULL;

MahjongUserCoinChinfo* MahjongUserCoinChinfo::New(::google::protobuf::Arena* arena) const {
  MahjongUserCoinChinfo* n = new MahjongUserCoinChinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MahjongUserCoinChinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.MahjongUserCoinChinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MahjongUserCoinChinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MahjongUserCoinChinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool MahjongUserCoinChinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.MahjongUserCoinChinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.MahjongUserCoinChinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.MahjongUserCoinChinfo)
  return false;
#undef DO_
}

void MahjongUserCoinChinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.MahjongUserCoinChinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // optional int32 value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  // optional uint32 type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.MahjongUserCoinChinfo)
}

::google::protobuf::uint8* MahjongUserCoinChinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.MahjongUserCoinChinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // optional int32 value = 4;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }

  // optional uint32 type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.MahjongUserCoinChinfo)
  return target;
}

int MahjongUserCoinChinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.MahjongUserCoinChinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional int32 value = 4;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  // optional uint32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongUserCoinChinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.MahjongUserCoinChinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MahjongUserCoinChinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MahjongUserCoinChinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.MahjongUserCoinChinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.MahjongUserCoinChinfo)
    MergeFrom(*source);
  }
}

void MahjongUserCoinChinfo::MergeFrom(const MahjongUserCoinChinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.MahjongUserCoinChinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MahjongUserCoinChinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.MahjongUserCoinChinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongUserCoinChinfo::CopyFrom(const MahjongUserCoinChinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.MahjongUserCoinChinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongUserCoinChinfo::IsInitialized() const {

  return true;
}

void MahjongUserCoinChinfo::Swap(MahjongUserCoinChinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MahjongUserCoinChinfo::InternalSwap(MahjongUserCoinChinfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  std::swap(value_, other->value_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MahjongUserCoinChinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahjongUserCoinChinfo_descriptor_;
  metadata.reflection = MahjongUserCoinChinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MahjongUserCoinChinfo

// optional uint32 uid = 1;
void MahjongUserCoinChinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserCoinChinfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.uid)
  return uid_;
}
 void MahjongUserCoinChinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.uid)
}

// optional uint32 pos = 2;
void MahjongUserCoinChinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserCoinChinfo::pos() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.pos)
  return pos_;
}
 void MahjongUserCoinChinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.pos)
}

// optional uint32 result = 3;
void MahjongUserCoinChinfo::clear_result() {
  result_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserCoinChinfo::result() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.result)
  return result_;
}
 void MahjongUserCoinChinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.result)
}

// optional int32 value = 4;
void MahjongUserCoinChinfo::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 MahjongUserCoinChinfo::value() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.value)
  return value_;
}
 void MahjongUserCoinChinfo::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.value)
}

// optional uint32 type = 5;
void MahjongUserCoinChinfo::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 MahjongUserCoinChinfo::type() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongUserCoinChinfo.type)
  return type_;
}
 void MahjongUserCoinChinfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongUserCoinChinfo.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MahjongMatchInfo::kMatchidFieldNumber;
const int MahjongMatchInfo::kTrunindexFieldNumber;
const int MahjongMatchInfo::kCurnumFieldNumber;
const int MahjongMatchInfo::kGamevalueFieldNumber;
const int MahjongMatchInfo::kIfmatchFieldNumber;
const int MahjongMatchInfo::kLeftnumFieldNumber;
const int MahjongMatchInfo::kBegintimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MahjongMatchInfo::MahjongMatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.MahjongMatchInfo)
}

void MahjongMatchInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MahjongMatchInfo::MahjongMatchInfo(const MahjongMatchInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.MahjongMatchInfo)
}

void MahjongMatchInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  matchid_ = 0u;
  trunindex_ = 0u;
  curnum_ = 0u;
  gamevalue_ = 0;
  ifmatch_ = 0;
  leftnum_ = 0u;
  begintime_ = 0u;
}

MahjongMatchInfo::~MahjongMatchInfo() {
  // @@protoc_insertion_point(destructor:mahjong.MahjongMatchInfo)
  SharedDtor();
}

void MahjongMatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahjongMatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongMatchInfo_descriptor_;
}

const MahjongMatchInfo& MahjongMatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MahjongMatchInfo* MahjongMatchInfo::default_instance_ = NULL;

MahjongMatchInfo* MahjongMatchInfo::New(::google::protobuf::Arena* arena) const {
  MahjongMatchInfo* n = new MahjongMatchInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MahjongMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.MahjongMatchInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MahjongMatchInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MahjongMatchInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(matchid_, begintime_);

#undef ZR_HELPER_
#undef ZR_

}

bool MahjongMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.MahjongMatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matchid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trunindex;
        break;
      }

      // optional uint32 trunindex = 2;
      case 2: {
        if (tag == 16) {
         parse_trunindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trunindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curnum;
        break;
      }

      // optional uint32 curnum = 3;
      case 3: {
        if (tag == 24) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 4;
      case 4: {
        if (tag == 32) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ifmatch;
        break;
      }

      // optional int32 ifmatch = 5;
      case 5: {
        if (tag == 40) {
         parse_ifmatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifmatch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_leftnum;
        break;
      }

      // optional uint32 leftnum = 6;
      case 6: {
        if (tag == 48) {
         parse_leftnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_begintime;
        break;
      }

      // optional uint32 begintime = 7;
      case 7: {
        if (tag == 56) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.MahjongMatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.MahjongMatchInfo)
  return false;
#undef DO_
}

void MahjongMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.MahjongMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trunindex(), output);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curnum(), output);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gamevalue(), output);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifmatch(), output);
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leftnum(), output);
  }

  // optional uint32 begintime = 7;
  if (this->begintime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begintime(), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.MahjongMatchInfo)
}

::google::protobuf::uint8* MahjongMatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.MahjongMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trunindex(), target);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curnum(), target);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gamevalue(), target);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifmatch(), target);
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->leftnum(), target);
  }

  // optional uint32 begintime = 7;
  if (this->begintime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begintime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.MahjongMatchInfo)
  return target;
}

int MahjongMatchInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.MahjongMatchInfo)
  int total_size = 0;

  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trunindex());
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curnum());
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ifmatch());
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftnum());
  }

  // optional uint32 begintime = 7;
  if (this->begintime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begintime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.MahjongMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MahjongMatchInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MahjongMatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.MahjongMatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.MahjongMatchInfo)
    MergeFrom(*source);
  }
}

void MahjongMatchInfo::MergeFrom(const MahjongMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.MahjongMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.trunindex() != 0) {
    set_trunindex(from.trunindex());
  }
  if (from.curnum() != 0) {
    set_curnum(from.curnum());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.ifmatch() != 0) {
    set_ifmatch(from.ifmatch());
  }
  if (from.leftnum() != 0) {
    set_leftnum(from.leftnum());
  }
  if (from.begintime() != 0) {
    set_begintime(from.begintime());
  }
}

void MahjongMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.MahjongMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongMatchInfo::CopyFrom(const MahjongMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.MahjongMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongMatchInfo::IsInitialized() const {

  return true;
}

void MahjongMatchInfo::Swap(MahjongMatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MahjongMatchInfo::InternalSwap(MahjongMatchInfo* other) {
  std::swap(matchid_, other->matchid_);
  std::swap(trunindex_, other->trunindex_);
  std::swap(curnum_, other->curnum_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(ifmatch_, other->ifmatch_);
  std::swap(leftnum_, other->leftnum_);
  std::swap(begintime_, other->begintime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MahjongMatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahjongMatchInfo_descriptor_;
  metadata.reflection = MahjongMatchInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MahjongMatchInfo

// optional uint32 matchid = 1;
void MahjongMatchInfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 MahjongMatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.matchid)
  return matchid_;
}
 void MahjongMatchInfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.matchid)
}

// optional uint32 trunindex = 2;
void MahjongMatchInfo::clear_trunindex() {
  trunindex_ = 0u;
}
 ::google::protobuf::uint32 MahjongMatchInfo::trunindex() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.trunindex)
  return trunindex_;
}
 void MahjongMatchInfo::set_trunindex(::google::protobuf::uint32 value) {
  
  trunindex_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.trunindex)
}

// optional uint32 curnum = 3;
void MahjongMatchInfo::clear_curnum() {
  curnum_ = 0u;
}
 ::google::protobuf::uint32 MahjongMatchInfo::curnum() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.curnum)
  return curnum_;
}
 void MahjongMatchInfo::set_curnum(::google::protobuf::uint32 value) {
  
  curnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.curnum)
}

// optional int32 gamevalue = 4;
void MahjongMatchInfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 MahjongMatchInfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.gamevalue)
  return gamevalue_;
}
 void MahjongMatchInfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.gamevalue)
}

// optional int32 ifmatch = 5;
void MahjongMatchInfo::clear_ifmatch() {
  ifmatch_ = 0;
}
 ::google::protobuf::int32 MahjongMatchInfo::ifmatch() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.ifmatch)
  return ifmatch_;
}
 void MahjongMatchInfo::set_ifmatch(::google::protobuf::int32 value) {
  
  ifmatch_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.ifmatch)
}

// optional uint32 leftnum = 6;
void MahjongMatchInfo::clear_leftnum() {
  leftnum_ = 0u;
}
 ::google::protobuf::uint32 MahjongMatchInfo::leftnum() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.leftnum)
  return leftnum_;
}
 void MahjongMatchInfo::set_leftnum(::google::protobuf::uint32 value) {
  
  leftnum_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.leftnum)
}

// optional uint32 begintime = 7;
void MahjongMatchInfo::clear_begintime() {
  begintime_ = 0u;
}
 ::google::protobuf::uint32 MahjongMatchInfo::begintime() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongMatchInfo.begintime)
  return begintime_;
}
 void MahjongMatchInfo::set_begintime(::google::protobuf::uint32 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongMatchInfo.begintime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MahjongSelfRoomInfo::kRoomidFieldNumber;
const int MahjongSelfRoomInfo::kRoomcodeFieldNumber;
const int MahjongSelfRoomInfo::kEndtimeFieldNumber;
const int MahjongSelfRoomInfo::kCreateuidFieldNumber;
const int MahjongSelfRoomInfo::kBasecoinFieldNumber;
const int MahjongSelfRoomInfo::kPlaycountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MahjongSelfRoomInfo::MahjongSelfRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong.MahjongSelfRoomInfo)
}

void MahjongSelfRoomInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MahjongSelfRoomInfo::MahjongSelfRoomInfo(const MahjongSelfRoomInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong.MahjongSelfRoomInfo)
}

void MahjongSelfRoomInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0u;
  roomcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = 0u;
  createuid_ = 0u;
  basecoin_ = 0u;
  playcount_ = 0u;
}

MahjongSelfRoomInfo::~MahjongSelfRoomInfo() {
  // @@protoc_insertion_point(destructor:mahjong.MahjongSelfRoomInfo)
  SharedDtor();
}

void MahjongSelfRoomInfo::SharedDtor() {
  roomcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MahjongSelfRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahjongSelfRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongSelfRoomInfo_descriptor_;
}

const MahjongSelfRoomInfo& MahjongSelfRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MahjongSelfRoomInfo* MahjongSelfRoomInfo::default_instance_ = NULL;

MahjongSelfRoomInfo* MahjongSelfRoomInfo::New(::google::protobuf::Arena* arena) const {
  MahjongSelfRoomInfo* n = new MahjongSelfRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MahjongSelfRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mahjong.MahjongSelfRoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MahjongSelfRoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MahjongSelfRoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roomid_, playcount_);
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MahjongSelfRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong.MahjongSelfRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roomid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomcode;
        break;
      }

      // optional bytes roomcode = 2;
      case 2: {
        if (tag == 18) {
         parse_roomcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createuid;
        break;
      }

      // optional uint32 createuid = 4;
      case 4: {
        if (tag == 32) {
         parse_createuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createuid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basecoin;
        break;
      }

      // optional uint32 basecoin = 5;
      case 5: {
        if (tag == 40) {
         parse_basecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basecoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playcount;
        break;
      }

      // optional uint32 playcount = 6;
      case 6: {
        if (tag == 48) {
         parse_playcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong.MahjongSelfRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong.MahjongSelfRoomInfo)
  return false;
#undef DO_
}

void MahjongSelfRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong.MahjongSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomcode(), output);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createuid(), output);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->basecoin(), output);
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:mahjong.MahjongSelfRoomInfo)
}

::google::protobuf::uint8* MahjongSelfRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong.MahjongSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomcode(), target);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createuid(), target);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->basecoin(), target);
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mahjong.MahjongSelfRoomInfo)
  return target;
}

int MahjongSelfRoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mahjong.MahjongSelfRoomInfo)
  int total_size = 0;

  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomcode());
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endtime());
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createuid());
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->basecoin());
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playcount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongSelfRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mahjong.MahjongSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MahjongSelfRoomInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MahjongSelfRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mahjong.MahjongSelfRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mahjong.MahjongSelfRoomInfo)
    MergeFrom(*source);
  }
}

void MahjongSelfRoomInfo::MergeFrom(const MahjongSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mahjong.MahjongSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.roomcode().size() > 0) {

    roomcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomcode_);
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.createuid() != 0) {
    set_createuid(from.createuid());
  }
  if (from.basecoin() != 0) {
    set_basecoin(from.basecoin());
  }
  if (from.playcount() != 0) {
    set_playcount(from.playcount());
  }
}

void MahjongSelfRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mahjong.MahjongSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongSelfRoomInfo::CopyFrom(const MahjongSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mahjong.MahjongSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongSelfRoomInfo::IsInitialized() const {

  return true;
}

void MahjongSelfRoomInfo::Swap(MahjongSelfRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MahjongSelfRoomInfo::InternalSwap(MahjongSelfRoomInfo* other) {
  std::swap(roomid_, other->roomid_);
  roomcode_.Swap(&other->roomcode_);
  std::swap(endtime_, other->endtime_);
  std::swap(createuid_, other->createuid_);
  std::swap(basecoin_, other->basecoin_);
  std::swap(playcount_, other->playcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MahjongSelfRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahjongSelfRoomInfo_descriptor_;
  metadata.reflection = MahjongSelfRoomInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MahjongSelfRoomInfo

// optional uint32 roomid = 1;
void MahjongSelfRoomInfo::clear_roomid() {
  roomid_ = 0u;
}
 ::google::protobuf::uint32 MahjongSelfRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.roomid)
  return roomid_;
}
 void MahjongSelfRoomInfo::set_roomid(::google::protobuf::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.roomid)
}

// optional bytes roomcode = 2;
void MahjongSelfRoomInfo::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MahjongSelfRoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.roomcode)
  return roomcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MahjongSelfRoomInfo::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.roomcode)
}
 void MahjongSelfRoomInfo::set_roomcode(const char* value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mahjong.MahjongSelfRoomInfo.roomcode)
}
 void MahjongSelfRoomInfo::set_roomcode(const void* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mahjong.MahjongSelfRoomInfo.roomcode)
}
 ::std::string* MahjongSelfRoomInfo::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:mahjong.MahjongSelfRoomInfo.roomcode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MahjongSelfRoomInfo::release_roomcode() {
  // @@protoc_insertion_point(field_release:mahjong.MahjongSelfRoomInfo.roomcode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MahjongSelfRoomInfo::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:mahjong.MahjongSelfRoomInfo.roomcode)
}

// optional uint32 endtime = 3;
void MahjongSelfRoomInfo::clear_endtime() {
  endtime_ = 0u;
}
 ::google::protobuf::uint32 MahjongSelfRoomInfo::endtime() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.endtime)
  return endtime_;
}
 void MahjongSelfRoomInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.endtime)
}

// optional uint32 createuid = 4;
void MahjongSelfRoomInfo::clear_createuid() {
  createuid_ = 0u;
}
 ::google::protobuf::uint32 MahjongSelfRoomInfo::createuid() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.createuid)
  return createuid_;
}
 void MahjongSelfRoomInfo::set_createuid(::google::protobuf::uint32 value) {
  
  createuid_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.createuid)
}

// optional uint32 basecoin = 5;
void MahjongSelfRoomInfo::clear_basecoin() {
  basecoin_ = 0u;
}
 ::google::protobuf::uint32 MahjongSelfRoomInfo::basecoin() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.basecoin)
  return basecoin_;
}
 void MahjongSelfRoomInfo::set_basecoin(::google::protobuf::uint32 value) {
  
  basecoin_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.basecoin)
}

// optional uint32 playcount = 6;
void MahjongSelfRoomInfo::clear_playcount() {
  playcount_ = 0u;
}
 ::google::protobuf::uint32 MahjongSelfRoomInfo::playcount() const {
  // @@protoc_insertion_point(field_get:mahjong.MahjongSelfRoomInfo.playcount)
  return playcount_;
}
 void MahjongSelfRoomInfo::set_playcount(::google::protobuf::uint32 value) {
  
  playcount_ = value;
  // @@protoc_insertion_point(field_set:mahjong.MahjongSelfRoomInfo.playcount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mahjong

// @@protoc_insertion_point(global_scope)
