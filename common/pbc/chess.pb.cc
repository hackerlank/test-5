// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chess.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chess.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chess {

namespace {

const ::google::protobuf::Descriptor* ChessCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessDeskUserinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessDeskUserinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessDeskinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessDeskinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessDeskResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessDeskResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessUserResultinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessUserResultinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessOneStepInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessOneStepInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessMatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessMatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessSelfRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessSelfRoomInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chess_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chess_2eproto() {
  protobuf_AddDesc_chess_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chess.proto");
  GOOGLE_CHECK(file != NULL);
  ChessCard_descriptor_ = file->message_type(0);
  static const int ChessCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCard, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCard, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCard, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCard, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCard, pos_),
  };
  ChessCard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessCard_descriptor_,
      ChessCard::default_instance_,
      ChessCard_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChessCard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCard, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessCard, _is_default_instance_));
  ChessDeskUserinfo_descriptor_ = file->message_type(1);
  static const int ChessDeskUserinfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, offline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, totalbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, cardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, usetimes_),
  };
  ChessDeskUserinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessDeskUserinfo_descriptor_,
      ChessDeskUserinfo::default_instance_,
      ChessDeskUserinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChessDeskUserinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskUserinfo, _is_default_instance_));
  ChessDeskinfo_descriptor_ = file->message_type(2);
  static const int ChessDeskinfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskinfo, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskinfo, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskinfo, totalbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskinfo, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskinfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskinfo, hostpos_),
  };
  ChessDeskinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessDeskinfo_descriptor_,
      ChessDeskinfo::default_instance_,
      ChessDeskinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChessDeskinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskinfo, _is_default_instance_));
  ChessDeskResultinfo_descriptor_ = file->message_type(3);
  static const int ChessDeskResultinfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskResultinfo, userlist_),
  };
  ChessDeskResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessDeskResultinfo_descriptor_,
      ChessDeskResultinfo::default_instance_,
      ChessDeskResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChessDeskResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessDeskResultinfo, _is_default_instance_));
  ChessUserResultinfo_descriptor_ = file->message_type(4);
  static const int ChessUserResultinfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, leftvalue_),
  };
  ChessUserResultinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessUserResultinfo_descriptor_,
      ChessUserResultinfo::default_instance_,
      ChessUserResultinfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChessUserResultinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessUserResultinfo, _is_default_instance_));
  ChessOneStepInfo_descriptor_ = file->message_type(5);
  static const int ChessOneStepInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessOneStepInfo, sposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessOneStepInfo, sposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessOneStepInfo, eposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessOneStepInfo, eposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessOneStepInfo, startchess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessOneStepInfo, endchess_),
  };
  ChessOneStepInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessOneStepInfo_descriptor_,
      ChessOneStepInfo::default_instance_,
      ChessOneStepInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChessOneStepInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessOneStepInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessOneStepInfo, _is_default_instance_));
  ChessMatchInfo_descriptor_ = file->message_type(6);
  static const int ChessMatchInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMatchInfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMatchInfo, trunindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMatchInfo, curnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMatchInfo, gamevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMatchInfo, ifmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMatchInfo, leftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMatchInfo, begintime_),
  };
  ChessMatchInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessMatchInfo_descriptor_,
      ChessMatchInfo::default_instance_,
      ChessMatchInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChessMatchInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMatchInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessMatchInfo, _is_default_instance_));
  ChessSelfRoomInfo_descriptor_ = file->message_type(7);
  static const int ChessSelfRoomInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelfRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelfRoomInfo, roomcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelfRoomInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelfRoomInfo, createuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelfRoomInfo, basecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelfRoomInfo, playcount_),
  };
  ChessSelfRoomInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessSelfRoomInfo_descriptor_,
      ChessSelfRoomInfo::default_instance_,
      ChessSelfRoomInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChessSelfRoomInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelfRoomInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessSelfRoomInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chess_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessCard_descriptor_, &ChessCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessDeskUserinfo_descriptor_, &ChessDeskUserinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessDeskinfo_descriptor_, &ChessDeskinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessDeskResultinfo_descriptor_, &ChessDeskResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessUserResultinfo_descriptor_, &ChessUserResultinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessOneStepInfo_descriptor_, &ChessOneStepInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessMatchInfo_descriptor_, &ChessMatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessSelfRoomInfo_descriptor_, &ChessSelfRoomInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chess_2eproto() {
  delete ChessCard::default_instance_;
  delete ChessCard_reflection_;
  delete ChessDeskUserinfo::default_instance_;
  delete ChessDeskUserinfo_reflection_;
  delete ChessDeskinfo::default_instance_;
  delete ChessDeskinfo_reflection_;
  delete ChessDeskResultinfo::default_instance_;
  delete ChessDeskResultinfo_reflection_;
  delete ChessUserResultinfo::default_instance_;
  delete ChessUserResultinfo_reflection_;
  delete ChessOneStepInfo::default_instance_;
  delete ChessOneStepInfo_reflection_;
  delete ChessMatchInfo::default_instance_;
  delete ChessMatchInfo_reflection_;
  delete ChessSelfRoomInfo::default_instance_;
  delete ChessSelfRoomInfo_reflection_;
}

void protobuf_AddDesc_chess_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_chess_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013chess.proto\022\005chess\"M\n\tChessCard\022\r\n\005val"
    "ue\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\016\n\006status"
    "\030\004 \001(\r\022\013\n\003pos\030\005 \001(\r\"\214\002\n\021ChessDeskUserinf"
    "o\022\013\n\003uid\030\001 \001(\r\022\r\n\005uname\030\002 \001(\014\022\017\n\007coinnum"
    "\030\003 \001(\r\022\017\n\007headurl\030\004 \001(\014\022\016\n\006deskid\030\005 \001(\r\022"
    "\013\n\003pos\030\006 \001(\r\022\016\n\006status\030\007 \001(\r\022\017\n\007offline\030"
    "\010 \001(\r\022\016\n\006gender\030\n \001(\r\022\020\n\010integral\030\013 \001(\r\022"
    "\021\n\tgamevalue\030\014 \001(\005\022\020\n\010totalbet\030\r \001(\r\022\"\n\010"
    "cardlist\030\016 \003(\0132\020.chess.ChessCard\022\020\n\010uset"
    "imes\030\017 \001(\r\"\237\001\n\rChessDeskinfo\022\016\n\006deskid\030\001"
    " \001(\r\022\016\n\006status\030\002 \001(\r\022\016\n\006curpos\030\003 \001(\r\022\020\n\010"
    "totalbet\030\004 \001(\r\022*\n\010userlist\030\005 \003(\0132\030.chess"
    ".ChessDeskUserinfo\022\017\n\007matchid\030\006 \001(\r\022\017\n\007h"
    "ostpos\030\007 \001(\r\"C\n\023ChessDeskResultinfo\022,\n\010u"
    "serlist\030\001 \003(\0132\032.chess.ChessUserResultinf"
    "o\"\220\001\n\023ChessUserResultinfo\022\013\n\003uid\030\001 \001(\r\022\013"
    "\n\003pos\030\002 \001(\r\022\016\n\006result\030\003 \001(\r\022\r\n\005value\030\004 \001"
    "(\r\022\014\n\004coin\030\005 \001(\r\022\021\n\tgamevalue\030\006 \001(\005\022\014\n\004r"
    "ank\030\007 \001(\r\022\021\n\tleftvalue\030\010 \001(\r\"\230\001\n\020ChessOn"
    "eStepInfo\022\r\n\005sposx\030\001 \001(\r\022\r\n\005sposy\030\002 \001(\r\022"
    "\r\n\005eposx\030\003 \001(\r\022\r\n\005eposy\030\004 \001(\r\022$\n\nstartch"
    "ess\030\005 \001(\0132\020.chess.ChessCard\022\"\n\010endchess\030"
    "\006 \001(\0132\020.chess.ChessCard\"\214\001\n\016ChessMatchIn"
    "fo\022\017\n\007matchid\030\001 \001(\r\022\021\n\ttrunindex\030\002 \001(\r\022\016"
    "\n\006curnum\030\003 \001(\r\022\021\n\tgamevalue\030\004 \001(\005\022\017\n\007ifm"
    "atch\030\005 \001(\005\022\017\n\007leftnum\030\006 \001(\r\022\021\n\tbegintime"
    "\030\007 \001(\r\"~\n\021ChessSelfRoomInfo\022\016\n\006roomid\030\001 "
    "\001(\r\022\020\n\010roomcode\030\002 \001(\014\022\017\n\007endtime\030\003 \001(\r\022\021"
    "\n\tcreateuid\030\004 \001(\r\022\020\n\010basecoin\030\005 \001(\r\022\021\n\tp"
    "laycount\030\006 \001(\rb\006proto3", 1182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chess.proto", &protobuf_RegisterTypes);
  ChessCard::default_instance_ = new ChessCard();
  ChessDeskUserinfo::default_instance_ = new ChessDeskUserinfo();
  ChessDeskinfo::default_instance_ = new ChessDeskinfo();
  ChessDeskResultinfo::default_instance_ = new ChessDeskResultinfo();
  ChessUserResultinfo::default_instance_ = new ChessUserResultinfo();
  ChessOneStepInfo::default_instance_ = new ChessOneStepInfo();
  ChessMatchInfo::default_instance_ = new ChessMatchInfo();
  ChessSelfRoomInfo::default_instance_ = new ChessSelfRoomInfo();
  ChessCard::default_instance_->InitAsDefaultInstance();
  ChessDeskUserinfo::default_instance_->InitAsDefaultInstance();
  ChessDeskinfo::default_instance_->InitAsDefaultInstance();
  ChessDeskResultinfo::default_instance_->InitAsDefaultInstance();
  ChessUserResultinfo::default_instance_->InitAsDefaultInstance();
  ChessOneStepInfo::default_instance_->InitAsDefaultInstance();
  ChessMatchInfo::default_instance_->InitAsDefaultInstance();
  ChessSelfRoomInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chess_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chess_2eproto {
  StaticDescriptorInitializer_chess_2eproto() {
    protobuf_AddDesc_chess_2eproto();
  }
} static_descriptor_initializer_chess_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessCard::kValueFieldNumber;
const int ChessCard::kXFieldNumber;
const int ChessCard::kYFieldNumber;
const int ChessCard::kStatusFieldNumber;
const int ChessCard::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessCard::ChessCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess.ChessCard)
}

void ChessCard::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChessCard::ChessCard(const ChessCard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess.ChessCard)
}

void ChessCard::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
  x_ = 0u;
  y_ = 0u;
  status_ = 0u;
  pos_ = 0u;
}

ChessCard::~ChessCard() {
  // @@protoc_insertion_point(destructor:chess.ChessCard)
  SharedDtor();
}

void ChessCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChessCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessCard_descriptor_;
}

const ChessCard& ChessCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

ChessCard* ChessCard::default_instance_ = NULL;

ChessCard* ChessCard::New(::google::protobuf::Arena* arena) const {
  ChessCard* n = new ChessCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessCard::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.ChessCard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChessCard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChessCard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, pos_);

#undef ZR_HELPER_
#undef ZR_

}

bool ChessCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess.ChessCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 5;
      case 5: {
        if (tag == 40) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess.ChessCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess.ChessCard)
  return false;
#undef DO_
}

void ChessCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess.ChessCard)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // optional uint32 x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional uint32 status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // optional uint32 pos = 5;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pos(), output);
  }

  // @@protoc_insertion_point(serialize_end:chess.ChessCard)
}

::google::protobuf::uint8* ChessCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.ChessCard)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // optional uint32 x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional uint32 status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // optional uint32 pos = 5;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chess.ChessCard)
  return target;
}

int ChessCard::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chess.ChessCard)
  int total_size = 0;

  // optional uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // optional uint32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // optional uint32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  // optional uint32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 pos = 5;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chess.ChessCard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChessCard* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chess.ChessCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chess.ChessCard)
    MergeFrom(*source);
  }
}

void ChessCard::MergeFrom(const ChessCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chess.ChessCard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void ChessCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chess.ChessCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessCard::CopyFrom(const ChessCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.ChessCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessCard::IsInitialized() const {

  return true;
}

void ChessCard::Swap(ChessCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessCard::InternalSwap(ChessCard* other) {
  std::swap(value_, other->value_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(status_, other->status_);
  std::swap(pos_, other->pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessCard_descriptor_;
  metadata.reflection = ChessCard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessCard

// optional uint32 value = 1;
void ChessCard::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 ChessCard::value() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.value)
  return value_;
}
 void ChessCard::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.value)
}

// optional uint32 x = 2;
void ChessCard::clear_x() {
  x_ = 0u;
}
 ::google::protobuf::uint32 ChessCard::x() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.x)
  return x_;
}
 void ChessCard::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.x)
}

// optional uint32 y = 3;
void ChessCard::clear_y() {
  y_ = 0u;
}
 ::google::protobuf::uint32 ChessCard::y() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.y)
  return y_;
}
 void ChessCard::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.y)
}

// optional uint32 status = 4;
void ChessCard::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 ChessCard::status() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.status)
  return status_;
}
 void ChessCard::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.status)
}

// optional uint32 pos = 5;
void ChessCard::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 ChessCard::pos() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.pos)
  return pos_;
}
 void ChessCard::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessDeskUserinfo::kUidFieldNumber;
const int ChessDeskUserinfo::kUnameFieldNumber;
const int ChessDeskUserinfo::kCoinnumFieldNumber;
const int ChessDeskUserinfo::kHeadurlFieldNumber;
const int ChessDeskUserinfo::kDeskidFieldNumber;
const int ChessDeskUserinfo::kPosFieldNumber;
const int ChessDeskUserinfo::kStatusFieldNumber;
const int ChessDeskUserinfo::kOfflineFieldNumber;
const int ChessDeskUserinfo::kGenderFieldNumber;
const int ChessDeskUserinfo::kIntegralFieldNumber;
const int ChessDeskUserinfo::kGamevalueFieldNumber;
const int ChessDeskUserinfo::kTotalbetFieldNumber;
const int ChessDeskUserinfo::kCardlistFieldNumber;
const int ChessDeskUserinfo::kUsetimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessDeskUserinfo::ChessDeskUserinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess.ChessDeskUserinfo)
}

void ChessDeskUserinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChessDeskUserinfo::ChessDeskUserinfo(const ChessDeskUserinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess.ChessDeskUserinfo)
}

void ChessDeskUserinfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinnum_ = 0u;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deskid_ = 0u;
  pos_ = 0u;
  status_ = 0u;
  offline_ = 0u;
  gender_ = 0u;
  integral_ = 0u;
  gamevalue_ = 0;
  totalbet_ = 0u;
  usetimes_ = 0u;
}

ChessDeskUserinfo::~ChessDeskUserinfo() {
  // @@protoc_insertion_point(destructor:chess.ChessDeskUserinfo)
  SharedDtor();
}

void ChessDeskUserinfo::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChessDeskUserinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessDeskUserinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessDeskUserinfo_descriptor_;
}

const ChessDeskUserinfo& ChessDeskUserinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

ChessDeskUserinfo* ChessDeskUserinfo::default_instance_ = NULL;

ChessDeskUserinfo* ChessDeskUserinfo::New(::google::protobuf::Arena* arena) const {
  ChessDeskUserinfo* n = new ChessDeskUserinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessDeskUserinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.ChessDeskUserinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChessDeskUserinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChessDeskUserinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, coinnum_);
  ZR_(deskid_, offline_);
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(gender_, totalbet_);
  usetimes_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  cardlist_.Clear();
}

bool ChessDeskUserinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess.ChessDeskUserinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uname;
        break;
      }

      // optional bytes uname = 2;
      case 2: {
        if (tag == 18) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coinnum;
        break;
      }

      // optional uint32 coinnum = 3;
      case 3: {
        if (tag == 24) {
         parse_coinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_headurl;
        break;
      }

      // optional bytes headurl = 4;
      case 4: {
        if (tag == 34) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_headurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deskid;
        break;
      }

      // optional uint32 deskid = 5;
      case 5: {
        if (tag == 40) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 6;
      case 6: {
        if (tag == 48) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offline;
        break;
      }

      // optional uint32 offline = 8;
      case 8: {
        if (tag == 64) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 10;
      case 10: {
        if (tag == 80) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 11;
      case 11: {
        if (tag == 88) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 12;
      case 12: {
        if (tag == 96) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_totalbet;
        break;
      }

      // optional uint32 totalbet = 13;
      case 13: {
        if (tag == 104) {
         parse_totalbet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_cardlist;
        break;
      }

      // repeated .chess.ChessCard cardlist = 14;
      case 14: {
        if (tag == 114) {
         parse_cardlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cardlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cardlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_cardlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(120)) goto parse_usetimes;
        break;
      }

      // optional uint32 usetimes = 15;
      case 15: {
        if (tag == 120) {
         parse_usetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetimes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess.ChessDeskUserinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess.ChessDeskUserinfo)
  return false;
#undef DO_
}

void ChessDeskUserinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess.ChessDeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coinnum(), output);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->headurl(), output);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deskid(), output);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos(), output);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offline(), output);
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gender(), output);
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->integral(), output);
  }

  // optional int32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gamevalue(), output);
  }

  // optional uint32 totalbet = 13;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->totalbet(), output);
  }

  // repeated .chess.ChessCard cardlist = 14;
  for (unsigned int i = 0, n = this->cardlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cardlist(i), output);
  }

  // optional uint32 usetimes = 15;
  if (this->usetimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->usetimes(), output);
  }

  // @@protoc_insertion_point(serialize_end:chess.ChessDeskUserinfo)
}

::google::protobuf::uint8* ChessDeskUserinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.ChessDeskUserinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uname(), target);
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coinnum(), target);
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->headurl(), target);
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deskid(), target);
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos(), target);
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->offline(), target);
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gender(), target);
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->integral(), target);
  }

  // optional int32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gamevalue(), target);
  }

  // optional uint32 totalbet = 13;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->totalbet(), target);
  }

  // repeated .chess.ChessCard cardlist = 14;
  for (unsigned int i = 0, n = this->cardlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->cardlist(i), false, target);
  }

  // optional uint32 usetimes = 15;
  if (this->usetimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->usetimes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chess.ChessDeskUserinfo)
  return target;
}

int ChessDeskUserinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chess.ChessDeskUserinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional bytes uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uname());
  }

  // optional uint32 coinnum = 3;
  if (this->coinnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coinnum());
  }

  // optional bytes headurl = 4;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->headurl());
  }

  // optional uint32 deskid = 5;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 pos = 6;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 offline = 8;
  if (this->offline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline());
  }

  // optional uint32 gender = 10;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional uint32 integral = 11;
  if (this->integral() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->integral());
  }

  // optional int32 gamevalue = 12;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 totalbet = 13;
  if (this->totalbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalbet());
  }

  // optional uint32 usetimes = 15;
  if (this->usetimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usetimes());
  }

  // repeated .chess.ChessCard cardlist = 14;
  total_size += 1 * this->cardlist_size();
  for (int i = 0; i < this->cardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessDeskUserinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chess.ChessDeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChessDeskUserinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessDeskUserinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chess.ChessDeskUserinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chess.ChessDeskUserinfo)
    MergeFrom(*source);
  }
}

void ChessDeskUserinfo::MergeFrom(const ChessDeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chess.ChessDeskUserinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cardlist_.MergeFrom(from.cardlist_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.coinnum() != 0) {
    set_coinnum(from.coinnum());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.offline() != 0) {
    set_offline(from.offline());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.integral() != 0) {
    set_integral(from.integral());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
  if (from.usetimes() != 0) {
    set_usetimes(from.usetimes());
  }
}

void ChessDeskUserinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chess.ChessDeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessDeskUserinfo::CopyFrom(const ChessDeskUserinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.ChessDeskUserinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessDeskUserinfo::IsInitialized() const {

  return true;
}

void ChessDeskUserinfo::Swap(ChessDeskUserinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessDeskUserinfo::InternalSwap(ChessDeskUserinfo* other) {
  std::swap(uid_, other->uid_);
  uname_.Swap(&other->uname_);
  std::swap(coinnum_, other->coinnum_);
  headurl_.Swap(&other->headurl_);
  std::swap(deskid_, other->deskid_);
  std::swap(pos_, other->pos_);
  std::swap(status_, other->status_);
  std::swap(offline_, other->offline_);
  std::swap(gender_, other->gender_);
  std::swap(integral_, other->integral_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(totalbet_, other->totalbet_);
  cardlist_.UnsafeArenaSwap(&other->cardlist_);
  std::swap(usetimes_, other->usetimes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessDeskUserinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessDeskUserinfo_descriptor_;
  metadata.reflection = ChessDeskUserinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessDeskUserinfo

// optional uint32 uid = 1;
void ChessDeskUserinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.uid)
  return uid_;
}
 void ChessDeskUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.uid)
}

// optional bytes uname = 2;
void ChessDeskUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChessDeskUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChessDeskUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.uname)
}
 void ChessDeskUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chess.ChessDeskUserinfo.uname)
}
 void ChessDeskUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chess.ChessDeskUserinfo.uname)
}
 ::std::string* ChessDeskUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChessDeskUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:chess.ChessDeskUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChessDeskUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:chess.ChessDeskUserinfo.uname)
}

// optional uint32 coinnum = 3;
void ChessDeskUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.coinnum)
  return coinnum_;
}
 void ChessDeskUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.coinnum)
}

// optional bytes headurl = 4;
void ChessDeskUserinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChessDeskUserinfo::headurl() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChessDeskUserinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.headurl)
}
 void ChessDeskUserinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chess.ChessDeskUserinfo.headurl)
}
 void ChessDeskUserinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chess.ChessDeskUserinfo.headurl)
}
 ::std::string* ChessDeskUserinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskUserinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChessDeskUserinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:chess.ChessDeskUserinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChessDeskUserinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:chess.ChessDeskUserinfo.headurl)
}

// optional uint32 deskid = 5;
void ChessDeskUserinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::deskid() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.deskid)
  return deskid_;
}
 void ChessDeskUserinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.deskid)
}

// optional uint32 pos = 6;
void ChessDeskUserinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::pos() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.pos)
  return pos_;
}
 void ChessDeskUserinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.pos)
}

// optional uint32 status = 7;
void ChessDeskUserinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::status() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.status)
  return status_;
}
 void ChessDeskUserinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.status)
}

// optional uint32 offline = 8;
void ChessDeskUserinfo::clear_offline() {
  offline_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::offline() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.offline)
  return offline_;
}
 void ChessDeskUserinfo::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.offline)
}

// optional uint32 gender = 10;
void ChessDeskUserinfo::clear_gender() {
  gender_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.gender)
  return gender_;
}
 void ChessDeskUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.gender)
}

// optional uint32 integral = 11;
void ChessDeskUserinfo::clear_integral() {
  integral_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::integral() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.integral)
  return integral_;
}
 void ChessDeskUserinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.integral)
}

// optional int32 gamevalue = 12;
void ChessDeskUserinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 ChessDeskUserinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.gamevalue)
  return gamevalue_;
}
 void ChessDeskUserinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.gamevalue)
}

// optional uint32 totalbet = 13;
void ChessDeskUserinfo::clear_totalbet() {
  totalbet_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::totalbet() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.totalbet)
  return totalbet_;
}
 void ChessDeskUserinfo::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.totalbet)
}

// repeated .chess.ChessCard cardlist = 14;
int ChessDeskUserinfo::cardlist_size() const {
  return cardlist_.size();
}
void ChessDeskUserinfo::clear_cardlist() {
  cardlist_.Clear();
}
const ::chess::ChessCard& ChessDeskUserinfo::cardlist(int index) const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.cardlist)
  return cardlist_.Get(index);
}
::chess::ChessCard* ChessDeskUserinfo::mutable_cardlist(int index) {
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskUserinfo.cardlist)
  return cardlist_.Mutable(index);
}
::chess::ChessCard* ChessDeskUserinfo::add_cardlist() {
  // @@protoc_insertion_point(field_add:chess.ChessDeskUserinfo.cardlist)
  return cardlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::chess::ChessCard >*
ChessDeskUserinfo::mutable_cardlist() {
  // @@protoc_insertion_point(field_mutable_list:chess.ChessDeskUserinfo.cardlist)
  return &cardlist_;
}
const ::google::protobuf::RepeatedPtrField< ::chess::ChessCard >&
ChessDeskUserinfo::cardlist() const {
  // @@protoc_insertion_point(field_list:chess.ChessDeskUserinfo.cardlist)
  return cardlist_;
}

// optional uint32 usetimes = 15;
void ChessDeskUserinfo::clear_usetimes() {
  usetimes_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskUserinfo::usetimes() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.usetimes)
  return usetimes_;
}
 void ChessDeskUserinfo::set_usetimes(::google::protobuf::uint32 value) {
  
  usetimes_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.usetimes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessDeskinfo::kDeskidFieldNumber;
const int ChessDeskinfo::kStatusFieldNumber;
const int ChessDeskinfo::kCurposFieldNumber;
const int ChessDeskinfo::kTotalbetFieldNumber;
const int ChessDeskinfo::kUserlistFieldNumber;
const int ChessDeskinfo::kMatchidFieldNumber;
const int ChessDeskinfo::kHostposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessDeskinfo::ChessDeskinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess.ChessDeskinfo)
}

void ChessDeskinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChessDeskinfo::ChessDeskinfo(const ChessDeskinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess.ChessDeskinfo)
}

void ChessDeskinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  deskid_ = 0u;
  status_ = 0u;
  curpos_ = 0u;
  totalbet_ = 0u;
  matchid_ = 0u;
  hostpos_ = 0u;
}

ChessDeskinfo::~ChessDeskinfo() {
  // @@protoc_insertion_point(destructor:chess.ChessDeskinfo)
  SharedDtor();
}

void ChessDeskinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChessDeskinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessDeskinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessDeskinfo_descriptor_;
}

const ChessDeskinfo& ChessDeskinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

ChessDeskinfo* ChessDeskinfo::default_instance_ = NULL;

ChessDeskinfo* ChessDeskinfo::New(::google::protobuf::Arena* arena) const {
  ChessDeskinfo* n = new ChessDeskinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessDeskinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.ChessDeskinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChessDeskinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChessDeskinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deskid_, totalbet_);
  ZR_(matchid_, hostpos_);

#undef ZR_HELPER_
#undef ZR_

  userlist_.Clear();
}

bool ChessDeskinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess.ChessDeskinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curpos;
        break;
      }

      // optional uint32 curpos = 3;
      case 3: {
        if (tag == 24) {
         parse_curpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_totalbet;
        break;
      }

      // optional uint32 totalbet = 4;
      case 4: {
        if (tag == 32) {
         parse_totalbet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbet_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userlist;
        break;
      }

      // repeated .chess.ChessDeskUserinfo userlist = 5;
      case 5: {
        if (tag == 42) {
         parse_userlist:
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_matchid;
        break;
      }

      // optional uint32 matchid = 6;
      case 6: {
        if (tag == 48) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hostpos;
        break;
      }

      // optional uint32 hostpos = 7;
      case 7: {
        if (tag == 56) {
         parse_hostpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hostpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess.ChessDeskinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess.ChessDeskinfo)
  return false;
#undef DO_
}

void ChessDeskinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess.ChessDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deskid(), output);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpos(), output);
  }

  // optional uint32 totalbet = 4;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalbet(), output);
  }

  // repeated .chess.ChessDeskUserinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userlist(i), output);
  }

  // optional uint32 matchid = 6;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->matchid(), output);
  }

  // optional uint32 hostpos = 7;
  if (this->hostpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hostpos(), output);
  }

  // @@protoc_insertion_point(serialize_end:chess.ChessDeskinfo)
}

::google::protobuf::uint8* ChessDeskinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.ChessDeskinfo)
  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deskid(), target);
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpos(), target);
  }

  // optional uint32 totalbet = 4;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totalbet(), target);
  }

  // repeated .chess.ChessDeskUserinfo userlist = 5;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->userlist(i), false, target);
  }

  // optional uint32 matchid = 6;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->matchid(), target);
  }

  // optional uint32 hostpos = 7;
  if (this->hostpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hostpos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chess.ChessDeskinfo)
  return target;
}

int ChessDeskinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chess.ChessDeskinfo)
  int total_size = 0;

  // optional uint32 deskid = 1;
  if (this->deskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deskid());
  }

  // optional uint32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 curpos = 3;
  if (this->curpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curpos());
  }

  // optional uint32 totalbet = 4;
  if (this->totalbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalbet());
  }

  // optional uint32 matchid = 6;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // optional uint32 hostpos = 7;
  if (this->hostpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hostpos());
  }

  // repeated .chess.ChessDeskUserinfo userlist = 5;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessDeskinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chess.ChessDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChessDeskinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessDeskinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chess.ChessDeskinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chess.ChessDeskinfo)
    MergeFrom(*source);
  }
}

void ChessDeskinfo::MergeFrom(const ChessDeskinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chess.ChessDeskinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
  if (from.deskid() != 0) {
    set_deskid(from.deskid());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.curpos() != 0) {
    set_curpos(from.curpos());
  }
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.hostpos() != 0) {
    set_hostpos(from.hostpos());
  }
}

void ChessDeskinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chess.ChessDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessDeskinfo::CopyFrom(const ChessDeskinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.ChessDeskinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessDeskinfo::IsInitialized() const {

  return true;
}

void ChessDeskinfo::Swap(ChessDeskinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessDeskinfo::InternalSwap(ChessDeskinfo* other) {
  std::swap(deskid_, other->deskid_);
  std::swap(status_, other->status_);
  std::swap(curpos_, other->curpos_);
  std::swap(totalbet_, other->totalbet_);
  userlist_.UnsafeArenaSwap(&other->userlist_);
  std::swap(matchid_, other->matchid_);
  std::swap(hostpos_, other->hostpos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessDeskinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessDeskinfo_descriptor_;
  metadata.reflection = ChessDeskinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessDeskinfo

// optional uint32 deskid = 1;
void ChessDeskinfo::clear_deskid() {
  deskid_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskinfo::deskid() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.deskid)
  return deskid_;
}
 void ChessDeskinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.deskid)
}

// optional uint32 status = 2;
void ChessDeskinfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskinfo::status() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.status)
  return status_;
}
 void ChessDeskinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.status)
}

// optional uint32 curpos = 3;
void ChessDeskinfo::clear_curpos() {
  curpos_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskinfo::curpos() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.curpos)
  return curpos_;
}
 void ChessDeskinfo::set_curpos(::google::protobuf::uint32 value) {
  
  curpos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.curpos)
}

// optional uint32 totalbet = 4;
void ChessDeskinfo::clear_totalbet() {
  totalbet_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskinfo::totalbet() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.totalbet)
  return totalbet_;
}
 void ChessDeskinfo::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.totalbet)
}

// repeated .chess.ChessDeskUserinfo userlist = 5;
int ChessDeskinfo::userlist_size() const {
  return userlist_.size();
}
void ChessDeskinfo::clear_userlist() {
  userlist_.Clear();
}
const ::chess::ChessDeskUserinfo& ChessDeskinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.userlist)
  return userlist_.Get(index);
}
::chess::ChessDeskUserinfo* ChessDeskinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskinfo.userlist)
  return userlist_.Mutable(index);
}
::chess::ChessDeskUserinfo* ChessDeskinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:chess.ChessDeskinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::chess::ChessDeskUserinfo >*
ChessDeskinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:chess.ChessDeskinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::chess::ChessDeskUserinfo >&
ChessDeskinfo::userlist() const {
  // @@protoc_insertion_point(field_list:chess.ChessDeskinfo.userlist)
  return userlist_;
}

// optional uint32 matchid = 6;
void ChessDeskinfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskinfo::matchid() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.matchid)
  return matchid_;
}
 void ChessDeskinfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.matchid)
}

// optional uint32 hostpos = 7;
void ChessDeskinfo::clear_hostpos() {
  hostpos_ = 0u;
}
 ::google::protobuf::uint32 ChessDeskinfo::hostpos() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.hostpos)
  return hostpos_;
}
 void ChessDeskinfo::set_hostpos(::google::protobuf::uint32 value) {
  
  hostpos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.hostpos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessDeskResultinfo::kUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessDeskResultinfo::ChessDeskResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess.ChessDeskResultinfo)
}

void ChessDeskResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChessDeskResultinfo::ChessDeskResultinfo(const ChessDeskResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess.ChessDeskResultinfo)
}

void ChessDeskResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ChessDeskResultinfo::~ChessDeskResultinfo() {
  // @@protoc_insertion_point(destructor:chess.ChessDeskResultinfo)
  SharedDtor();
}

void ChessDeskResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChessDeskResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessDeskResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessDeskResultinfo_descriptor_;
}

const ChessDeskResultinfo& ChessDeskResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

ChessDeskResultinfo* ChessDeskResultinfo::default_instance_ = NULL;

ChessDeskResultinfo* ChessDeskResultinfo::New(::google::protobuf::Arena* arena) const {
  ChessDeskResultinfo* n = new ChessDeskResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessDeskResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.ChessDeskResultinfo)
  userlist_.Clear();
}

bool ChessDeskResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess.ChessDeskResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chess.ChessUserResultinfo userlist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_userlist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess.ChessDeskResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess.ChessDeskResultinfo)
  return false;
#undef DO_
}

void ChessDeskResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess.ChessDeskResultinfo)
  // repeated .chess.ChessUserResultinfo userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:chess.ChessDeskResultinfo)
}

::google::protobuf::uint8* ChessDeskResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.ChessDeskResultinfo)
  // repeated .chess.ChessUserResultinfo userlist = 1;
  for (unsigned int i = 0, n = this->userlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->userlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chess.ChessDeskResultinfo)
  return target;
}

int ChessDeskResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chess.ChessDeskResultinfo)
  int total_size = 0;

  // repeated .chess.ChessUserResultinfo userlist = 1;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessDeskResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chess.ChessDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChessDeskResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessDeskResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chess.ChessDeskResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chess.ChessDeskResultinfo)
    MergeFrom(*source);
  }
}

void ChessDeskResultinfo::MergeFrom(const ChessDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chess.ChessDeskResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  userlist_.MergeFrom(from.userlist_);
}

void ChessDeskResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chess.ChessDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessDeskResultinfo::CopyFrom(const ChessDeskResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.ChessDeskResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessDeskResultinfo::IsInitialized() const {

  return true;
}

void ChessDeskResultinfo::Swap(ChessDeskResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessDeskResultinfo::InternalSwap(ChessDeskResultinfo* other) {
  userlist_.UnsafeArenaSwap(&other->userlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessDeskResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessDeskResultinfo_descriptor_;
  metadata.reflection = ChessDeskResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessDeskResultinfo

// repeated .chess.ChessUserResultinfo userlist = 1;
int ChessDeskResultinfo::userlist_size() const {
  return userlist_.size();
}
void ChessDeskResultinfo::clear_userlist() {
  userlist_.Clear();
}
const ::chess::ChessUserResultinfo& ChessDeskResultinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskResultinfo.userlist)
  return userlist_.Get(index);
}
::chess::ChessUserResultinfo* ChessDeskResultinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskResultinfo.userlist)
  return userlist_.Mutable(index);
}
::chess::ChessUserResultinfo* ChessDeskResultinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:chess.ChessDeskResultinfo.userlist)
  return userlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::chess::ChessUserResultinfo >*
ChessDeskResultinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:chess.ChessDeskResultinfo.userlist)
  return &userlist_;
}
const ::google::protobuf::RepeatedPtrField< ::chess::ChessUserResultinfo >&
ChessDeskResultinfo::userlist() const {
  // @@protoc_insertion_point(field_list:chess.ChessDeskResultinfo.userlist)
  return userlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessUserResultinfo::kUidFieldNumber;
const int ChessUserResultinfo::kPosFieldNumber;
const int ChessUserResultinfo::kResultFieldNumber;
const int ChessUserResultinfo::kValueFieldNumber;
const int ChessUserResultinfo::kCoinFieldNumber;
const int ChessUserResultinfo::kGamevalueFieldNumber;
const int ChessUserResultinfo::kRankFieldNumber;
const int ChessUserResultinfo::kLeftvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessUserResultinfo::ChessUserResultinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess.ChessUserResultinfo)
}

void ChessUserResultinfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChessUserResultinfo::ChessUserResultinfo(const ChessUserResultinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess.ChessUserResultinfo)
}

void ChessUserResultinfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0u;
  pos_ = 0u;
  result_ = 0u;
  value_ = 0u;
  coin_ = 0u;
  gamevalue_ = 0;
  rank_ = 0u;
  leftvalue_ = 0u;
}

ChessUserResultinfo::~ChessUserResultinfo() {
  // @@protoc_insertion_point(destructor:chess.ChessUserResultinfo)
  SharedDtor();
}

void ChessUserResultinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChessUserResultinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessUserResultinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessUserResultinfo_descriptor_;
}

const ChessUserResultinfo& ChessUserResultinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

ChessUserResultinfo* ChessUserResultinfo::default_instance_ = NULL;

ChessUserResultinfo* ChessUserResultinfo::New(::google::protobuf::Arena* arena) const {
  ChessUserResultinfo* n = new ChessUserResultinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessUserResultinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.ChessUserResultinfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChessUserResultinfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChessUserResultinfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, leftvalue_);

#undef ZR_HELPER_
#undef ZR_

}

bool ChessUserResultinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess.ChessUserResultinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional uint32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 5;
      case 5: {
        if (tag == 40) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 6;
      case 6: {
        if (tag == 48) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 7;
      case 7: {
        if (tag == 56) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_leftvalue;
        break;
      }

      // optional uint32 leftvalue = 8;
      case 8: {
        if (tag == 64) {
         parse_leftvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftvalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess.ChessUserResultinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess.ChessUserResultinfo)
  return false;
#undef DO_
}

void ChessUserResultinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess.ChessUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // optional uint32 value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // optional uint32 coin = 5;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coin(), output);
  }

  // optional int32 gamevalue = 6;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gamevalue(), output);
  }

  // optional uint32 rank = 7;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rank(), output);
  }

  // optional uint32 leftvalue = 8;
  if (this->leftvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->leftvalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:chess.ChessUserResultinfo)
}

::google::protobuf::uint8* ChessUserResultinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.ChessUserResultinfo)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // optional uint32 value = 4;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // optional uint32 coin = 5;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->coin(), target);
  }

  // optional int32 gamevalue = 6;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gamevalue(), target);
  }

  // optional uint32 rank = 7;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rank(), target);
  }

  // optional uint32 leftvalue = 8;
  if (this->leftvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->leftvalue(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chess.ChessUserResultinfo)
  return target;
}

int ChessUserResultinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chess.ChessUserResultinfo)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional uint32 value = 4;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // optional uint32 coin = 5;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  // optional int32 gamevalue = 6;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional uint32 rank = 7;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rank());
  }

  // optional uint32 leftvalue = 8;
  if (this->leftvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftvalue());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessUserResultinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chess.ChessUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChessUserResultinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessUserResultinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chess.ChessUserResultinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chess.ChessUserResultinfo)
    MergeFrom(*source);
  }
}

void ChessUserResultinfo::MergeFrom(const ChessUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chess.ChessUserResultinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.leftvalue() != 0) {
    set_leftvalue(from.leftvalue());
  }
}

void ChessUserResultinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chess.ChessUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessUserResultinfo::CopyFrom(const ChessUserResultinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.ChessUserResultinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessUserResultinfo::IsInitialized() const {

  return true;
}

void ChessUserResultinfo::Swap(ChessUserResultinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessUserResultinfo::InternalSwap(ChessUserResultinfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  std::swap(value_, other->value_);
  std::swap(coin_, other->coin_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(rank_, other->rank_);
  std::swap(leftvalue_, other->leftvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessUserResultinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessUserResultinfo_descriptor_;
  metadata.reflection = ChessUserResultinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessUserResultinfo

// optional uint32 uid = 1;
void ChessUserResultinfo::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 ChessUserResultinfo::uid() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.uid)
  return uid_;
}
 void ChessUserResultinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.uid)
}

// optional uint32 pos = 2;
void ChessUserResultinfo::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 ChessUserResultinfo::pos() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.pos)
  return pos_;
}
 void ChessUserResultinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.pos)
}

// optional uint32 result = 3;
void ChessUserResultinfo::clear_result() {
  result_ = 0u;
}
 ::google::protobuf::uint32 ChessUserResultinfo::result() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.result)
  return result_;
}
 void ChessUserResultinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.result)
}

// optional uint32 value = 4;
void ChessUserResultinfo::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 ChessUserResultinfo::value() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.value)
  return value_;
}
 void ChessUserResultinfo::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.value)
}

// optional uint32 coin = 5;
void ChessUserResultinfo::clear_coin() {
  coin_ = 0u;
}
 ::google::protobuf::uint32 ChessUserResultinfo::coin() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.coin)
  return coin_;
}
 void ChessUserResultinfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.coin)
}

// optional int32 gamevalue = 6;
void ChessUserResultinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 ChessUserResultinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.gamevalue)
  return gamevalue_;
}
 void ChessUserResultinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.gamevalue)
}

// optional uint32 rank = 7;
void ChessUserResultinfo::clear_rank() {
  rank_ = 0u;
}
 ::google::protobuf::uint32 ChessUserResultinfo::rank() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.rank)
  return rank_;
}
 void ChessUserResultinfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.rank)
}

// optional uint32 leftvalue = 8;
void ChessUserResultinfo::clear_leftvalue() {
  leftvalue_ = 0u;
}
 ::google::protobuf::uint32 ChessUserResultinfo::leftvalue() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.leftvalue)
  return leftvalue_;
}
 void ChessUserResultinfo::set_leftvalue(::google::protobuf::uint32 value) {
  
  leftvalue_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.leftvalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessOneStepInfo::kSposxFieldNumber;
const int ChessOneStepInfo::kSposyFieldNumber;
const int ChessOneStepInfo::kEposxFieldNumber;
const int ChessOneStepInfo::kEposyFieldNumber;
const int ChessOneStepInfo::kStartchessFieldNumber;
const int ChessOneStepInfo::kEndchessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessOneStepInfo::ChessOneStepInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess.ChessOneStepInfo)
}

void ChessOneStepInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  startchess_ = const_cast< ::chess::ChessCard*>(&::chess::ChessCard::default_instance());
  endchess_ = const_cast< ::chess::ChessCard*>(&::chess::ChessCard::default_instance());
}

ChessOneStepInfo::ChessOneStepInfo(const ChessOneStepInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess.ChessOneStepInfo)
}

void ChessOneStepInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sposx_ = 0u;
  sposy_ = 0u;
  eposx_ = 0u;
  eposy_ = 0u;
  startchess_ = NULL;
  endchess_ = NULL;
}

ChessOneStepInfo::~ChessOneStepInfo() {
  // @@protoc_insertion_point(destructor:chess.ChessOneStepInfo)
  SharedDtor();
}

void ChessOneStepInfo::SharedDtor() {
  if (this != default_instance_) {
    delete startchess_;
    delete endchess_;
  }
}

void ChessOneStepInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessOneStepInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessOneStepInfo_descriptor_;
}

const ChessOneStepInfo& ChessOneStepInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

ChessOneStepInfo* ChessOneStepInfo::default_instance_ = NULL;

ChessOneStepInfo* ChessOneStepInfo::New(::google::protobuf::Arena* arena) const {
  ChessOneStepInfo* n = new ChessOneStepInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessOneStepInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.ChessOneStepInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChessOneStepInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChessOneStepInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sposx_, eposy_);
  if (GetArenaNoVirtual() == NULL && startchess_ != NULL) delete startchess_;
  startchess_ = NULL;
  if (GetArenaNoVirtual() == NULL && endchess_ != NULL) delete endchess_;
  endchess_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ChessOneStepInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess.ChessOneStepInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sposx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sposx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sposy;
        break;
      }

      // optional uint32 sposy = 2;
      case 2: {
        if (tag == 16) {
         parse_sposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sposy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eposx;
        break;
      }

      // optional uint32 eposx = 3;
      case 3: {
        if (tag == 24) {
         parse_eposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eposx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eposy;
        break;
      }

      // optional uint32 eposy = 4;
      case 4: {
        if (tag == 32) {
         parse_eposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eposy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_startchess;
        break;
      }

      // optional .chess.ChessCard startchess = 5;
      case 5: {
        if (tag == 42) {
         parse_startchess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startchess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_endchess;
        break;
      }

      // optional .chess.ChessCard endchess = 6;
      case 6: {
        if (tag == 50) {
         parse_endchess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endchess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess.ChessOneStepInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess.ChessOneStepInfo)
  return false;
#undef DO_
}

void ChessOneStepInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess.ChessOneStepInfo)
  // optional uint32 sposx = 1;
  if (this->sposx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sposx(), output);
  }

  // optional uint32 sposy = 2;
  if (this->sposy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sposy(), output);
  }

  // optional uint32 eposx = 3;
  if (this->eposx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eposx(), output);
  }

  // optional uint32 eposy = 4;
  if (this->eposy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eposy(), output);
  }

  // optional .chess.ChessCard startchess = 5;
  if (this->has_startchess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->startchess_, output);
  }

  // optional .chess.ChessCard endchess = 6;
  if (this->has_endchess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->endchess_, output);
  }

  // @@protoc_insertion_point(serialize_end:chess.ChessOneStepInfo)
}

::google::protobuf::uint8* ChessOneStepInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.ChessOneStepInfo)
  // optional uint32 sposx = 1;
  if (this->sposx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sposx(), target);
  }

  // optional uint32 sposy = 2;
  if (this->sposy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sposy(), target);
  }

  // optional uint32 eposx = 3;
  if (this->eposx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eposx(), target);
  }

  // optional uint32 eposy = 4;
  if (this->eposy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eposy(), target);
  }

  // optional .chess.ChessCard startchess = 5;
  if (this->has_startchess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->startchess_, false, target);
  }

  // optional .chess.ChessCard endchess = 6;
  if (this->has_endchess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->endchess_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chess.ChessOneStepInfo)
  return target;
}

int ChessOneStepInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chess.ChessOneStepInfo)
  int total_size = 0;

  // optional uint32 sposx = 1;
  if (this->sposx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sposx());
  }

  // optional uint32 sposy = 2;
  if (this->sposy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sposy());
  }

  // optional uint32 eposx = 3;
  if (this->eposx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eposx());
  }

  // optional uint32 eposy = 4;
  if (this->eposy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eposy());
  }

  // optional .chess.ChessCard startchess = 5;
  if (this->has_startchess()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->startchess_);
  }

  // optional .chess.ChessCard endchess = 6;
  if (this->has_endchess()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->endchess_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessOneStepInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chess.ChessOneStepInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChessOneStepInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessOneStepInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chess.ChessOneStepInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chess.ChessOneStepInfo)
    MergeFrom(*source);
  }
}

void ChessOneStepInfo::MergeFrom(const ChessOneStepInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chess.ChessOneStepInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sposx() != 0) {
    set_sposx(from.sposx());
  }
  if (from.sposy() != 0) {
    set_sposy(from.sposy());
  }
  if (from.eposx() != 0) {
    set_eposx(from.eposx());
  }
  if (from.eposy() != 0) {
    set_eposy(from.eposy());
  }
  if (from.has_startchess()) {
    mutable_startchess()->::chess::ChessCard::MergeFrom(from.startchess());
  }
  if (from.has_endchess()) {
    mutable_endchess()->::chess::ChessCard::MergeFrom(from.endchess());
  }
}

void ChessOneStepInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chess.ChessOneStepInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessOneStepInfo::CopyFrom(const ChessOneStepInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.ChessOneStepInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessOneStepInfo::IsInitialized() const {

  return true;
}

void ChessOneStepInfo::Swap(ChessOneStepInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessOneStepInfo::InternalSwap(ChessOneStepInfo* other) {
  std::swap(sposx_, other->sposx_);
  std::swap(sposy_, other->sposy_);
  std::swap(eposx_, other->eposx_);
  std::swap(eposy_, other->eposy_);
  std::swap(startchess_, other->startchess_);
  std::swap(endchess_, other->endchess_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessOneStepInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessOneStepInfo_descriptor_;
  metadata.reflection = ChessOneStepInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessOneStepInfo

// optional uint32 sposx = 1;
void ChessOneStepInfo::clear_sposx() {
  sposx_ = 0u;
}
 ::google::protobuf::uint32 ChessOneStepInfo::sposx() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.sposx)
  return sposx_;
}
 void ChessOneStepInfo::set_sposx(::google::protobuf::uint32 value) {
  
  sposx_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessOneStepInfo.sposx)
}

// optional uint32 sposy = 2;
void ChessOneStepInfo::clear_sposy() {
  sposy_ = 0u;
}
 ::google::protobuf::uint32 ChessOneStepInfo::sposy() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.sposy)
  return sposy_;
}
 void ChessOneStepInfo::set_sposy(::google::protobuf::uint32 value) {
  
  sposy_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessOneStepInfo.sposy)
}

// optional uint32 eposx = 3;
void ChessOneStepInfo::clear_eposx() {
  eposx_ = 0u;
}
 ::google::protobuf::uint32 ChessOneStepInfo::eposx() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.eposx)
  return eposx_;
}
 void ChessOneStepInfo::set_eposx(::google::protobuf::uint32 value) {
  
  eposx_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessOneStepInfo.eposx)
}

// optional uint32 eposy = 4;
void ChessOneStepInfo::clear_eposy() {
  eposy_ = 0u;
}
 ::google::protobuf::uint32 ChessOneStepInfo::eposy() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.eposy)
  return eposy_;
}
 void ChessOneStepInfo::set_eposy(::google::protobuf::uint32 value) {
  
  eposy_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessOneStepInfo.eposy)
}

// optional .chess.ChessCard startchess = 5;
bool ChessOneStepInfo::has_startchess() const {
  return !_is_default_instance_ && startchess_ != NULL;
}
void ChessOneStepInfo::clear_startchess() {
  if (GetArenaNoVirtual() == NULL && startchess_ != NULL) delete startchess_;
  startchess_ = NULL;
}
const ::chess::ChessCard& ChessOneStepInfo::startchess() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.startchess)
  return startchess_ != NULL ? *startchess_ : *default_instance_->startchess_;
}
::chess::ChessCard* ChessOneStepInfo::mutable_startchess() {
  
  if (startchess_ == NULL) {
    startchess_ = new ::chess::ChessCard;
  }
  // @@protoc_insertion_point(field_mutable:chess.ChessOneStepInfo.startchess)
  return startchess_;
}
::chess::ChessCard* ChessOneStepInfo::release_startchess() {
  // @@protoc_insertion_point(field_release:chess.ChessOneStepInfo.startchess)
  
  ::chess::ChessCard* temp = startchess_;
  startchess_ = NULL;
  return temp;
}
void ChessOneStepInfo::set_allocated_startchess(::chess::ChessCard* startchess) {
  delete startchess_;
  startchess_ = startchess;
  if (startchess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chess.ChessOneStepInfo.startchess)
}

// optional .chess.ChessCard endchess = 6;
bool ChessOneStepInfo::has_endchess() const {
  return !_is_default_instance_ && endchess_ != NULL;
}
void ChessOneStepInfo::clear_endchess() {
  if (GetArenaNoVirtual() == NULL && endchess_ != NULL) delete endchess_;
  endchess_ = NULL;
}
const ::chess::ChessCard& ChessOneStepInfo::endchess() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.endchess)
  return endchess_ != NULL ? *endchess_ : *default_instance_->endchess_;
}
::chess::ChessCard* ChessOneStepInfo::mutable_endchess() {
  
  if (endchess_ == NULL) {
    endchess_ = new ::chess::ChessCard;
  }
  // @@protoc_insertion_point(field_mutable:chess.ChessOneStepInfo.endchess)
  return endchess_;
}
::chess::ChessCard* ChessOneStepInfo::release_endchess() {
  // @@protoc_insertion_point(field_release:chess.ChessOneStepInfo.endchess)
  
  ::chess::ChessCard* temp = endchess_;
  endchess_ = NULL;
  return temp;
}
void ChessOneStepInfo::set_allocated_endchess(::chess::ChessCard* endchess) {
  delete endchess_;
  endchess_ = endchess;
  if (endchess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chess.ChessOneStepInfo.endchess)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessMatchInfo::kMatchidFieldNumber;
const int ChessMatchInfo::kTrunindexFieldNumber;
const int ChessMatchInfo::kCurnumFieldNumber;
const int ChessMatchInfo::kGamevalueFieldNumber;
const int ChessMatchInfo::kIfmatchFieldNumber;
const int ChessMatchInfo::kLeftnumFieldNumber;
const int ChessMatchInfo::kBegintimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessMatchInfo::ChessMatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess.ChessMatchInfo)
}

void ChessMatchInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChessMatchInfo::ChessMatchInfo(const ChessMatchInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess.ChessMatchInfo)
}

void ChessMatchInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  matchid_ = 0u;
  trunindex_ = 0u;
  curnum_ = 0u;
  gamevalue_ = 0;
  ifmatch_ = 0;
  leftnum_ = 0u;
  begintime_ = 0u;
}

ChessMatchInfo::~ChessMatchInfo() {
  // @@protoc_insertion_point(destructor:chess.ChessMatchInfo)
  SharedDtor();
}

void ChessMatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChessMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessMatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessMatchInfo_descriptor_;
}

const ChessMatchInfo& ChessMatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

ChessMatchInfo* ChessMatchInfo::default_instance_ = NULL;

ChessMatchInfo* ChessMatchInfo::New(::google::protobuf::Arena* arena) const {
  ChessMatchInfo* n = new ChessMatchInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.ChessMatchInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChessMatchInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChessMatchInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(matchid_, begintime_);

#undef ZR_HELPER_
#undef ZR_

}

bool ChessMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess.ChessMatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matchid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trunindex;
        break;
      }

      // optional uint32 trunindex = 2;
      case 2: {
        if (tag == 16) {
         parse_trunindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trunindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curnum;
        break;
      }

      // optional uint32 curnum = 3;
      case 3: {
        if (tag == 24) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gamevalue;
        break;
      }

      // optional int32 gamevalue = 4;
      case 4: {
        if (tag == 32) {
         parse_gamevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamevalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ifmatch;
        break;
      }

      // optional int32 ifmatch = 5;
      case 5: {
        if (tag == 40) {
         parse_ifmatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifmatch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_leftnum;
        break;
      }

      // optional uint32 leftnum = 6;
      case 6: {
        if (tag == 48) {
         parse_leftnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_begintime;
        break;
      }

      // optional uint32 begintime = 7;
      case 7: {
        if (tag == 56) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess.ChessMatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess.ChessMatchInfo)
  return false;
#undef DO_
}

void ChessMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess.ChessMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trunindex(), output);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curnum(), output);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gamevalue(), output);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifmatch(), output);
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leftnum(), output);
  }

  // optional uint32 begintime = 7;
  if (this->begintime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begintime(), output);
  }

  // @@protoc_insertion_point(serialize_end:chess.ChessMatchInfo)
}

::google::protobuf::uint8* ChessMatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.ChessMatchInfo)
  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trunindex(), target);
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curnum(), target);
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gamevalue(), target);
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifmatch(), target);
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->leftnum(), target);
  }

  // optional uint32 begintime = 7;
  if (this->begintime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begintime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chess.ChessMatchInfo)
  return target;
}

int ChessMatchInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chess.ChessMatchInfo)
  int total_size = 0;

  // optional uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // optional uint32 trunindex = 2;
  if (this->trunindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trunindex());
  }

  // optional uint32 curnum = 3;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curnum());
  }

  // optional int32 gamevalue = 4;
  if (this->gamevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamevalue());
  }

  // optional int32 ifmatch = 5;
  if (this->ifmatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ifmatch());
  }

  // optional uint32 leftnum = 6;
  if (this->leftnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leftnum());
  }

  // optional uint32 begintime = 7;
  if (this->begintime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begintime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chess.ChessMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChessMatchInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessMatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chess.ChessMatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chess.ChessMatchInfo)
    MergeFrom(*source);
  }
}

void ChessMatchInfo::MergeFrom(const ChessMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chess.ChessMatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.trunindex() != 0) {
    set_trunindex(from.trunindex());
  }
  if (from.curnum() != 0) {
    set_curnum(from.curnum());
  }
  if (from.gamevalue() != 0) {
    set_gamevalue(from.gamevalue());
  }
  if (from.ifmatch() != 0) {
    set_ifmatch(from.ifmatch());
  }
  if (from.leftnum() != 0) {
    set_leftnum(from.leftnum());
  }
  if (from.begintime() != 0) {
    set_begintime(from.begintime());
  }
}

void ChessMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chess.ChessMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessMatchInfo::CopyFrom(const ChessMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.ChessMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessMatchInfo::IsInitialized() const {

  return true;
}

void ChessMatchInfo::Swap(ChessMatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessMatchInfo::InternalSwap(ChessMatchInfo* other) {
  std::swap(matchid_, other->matchid_);
  std::swap(trunindex_, other->trunindex_);
  std::swap(curnum_, other->curnum_);
  std::swap(gamevalue_, other->gamevalue_);
  std::swap(ifmatch_, other->ifmatch_);
  std::swap(leftnum_, other->leftnum_);
  std::swap(begintime_, other->begintime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessMatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessMatchInfo_descriptor_;
  metadata.reflection = ChessMatchInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessMatchInfo

// optional uint32 matchid = 1;
void ChessMatchInfo::clear_matchid() {
  matchid_ = 0u;
}
 ::google::protobuf::uint32 ChessMatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.matchid)
  return matchid_;
}
 void ChessMatchInfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.matchid)
}

// optional uint32 trunindex = 2;
void ChessMatchInfo::clear_trunindex() {
  trunindex_ = 0u;
}
 ::google::protobuf::uint32 ChessMatchInfo::trunindex() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.trunindex)
  return trunindex_;
}
 void ChessMatchInfo::set_trunindex(::google::protobuf::uint32 value) {
  
  trunindex_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.trunindex)
}

// optional uint32 curnum = 3;
void ChessMatchInfo::clear_curnum() {
  curnum_ = 0u;
}
 ::google::protobuf::uint32 ChessMatchInfo::curnum() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.curnum)
  return curnum_;
}
 void ChessMatchInfo::set_curnum(::google::protobuf::uint32 value) {
  
  curnum_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.curnum)
}

// optional int32 gamevalue = 4;
void ChessMatchInfo::clear_gamevalue() {
  gamevalue_ = 0;
}
 ::google::protobuf::int32 ChessMatchInfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.gamevalue)
  return gamevalue_;
}
 void ChessMatchInfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.gamevalue)
}

// optional int32 ifmatch = 5;
void ChessMatchInfo::clear_ifmatch() {
  ifmatch_ = 0;
}
 ::google::protobuf::int32 ChessMatchInfo::ifmatch() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.ifmatch)
  return ifmatch_;
}
 void ChessMatchInfo::set_ifmatch(::google::protobuf::int32 value) {
  
  ifmatch_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.ifmatch)
}

// optional uint32 leftnum = 6;
void ChessMatchInfo::clear_leftnum() {
  leftnum_ = 0u;
}
 ::google::protobuf::uint32 ChessMatchInfo::leftnum() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.leftnum)
  return leftnum_;
}
 void ChessMatchInfo::set_leftnum(::google::protobuf::uint32 value) {
  
  leftnum_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.leftnum)
}

// optional uint32 begintime = 7;
void ChessMatchInfo::clear_begintime() {
  begintime_ = 0u;
}
 ::google::protobuf::uint32 ChessMatchInfo::begintime() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.begintime)
  return begintime_;
}
 void ChessMatchInfo::set_begintime(::google::protobuf::uint32 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.begintime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessSelfRoomInfo::kRoomidFieldNumber;
const int ChessSelfRoomInfo::kRoomcodeFieldNumber;
const int ChessSelfRoomInfo::kEndtimeFieldNumber;
const int ChessSelfRoomInfo::kCreateuidFieldNumber;
const int ChessSelfRoomInfo::kBasecoinFieldNumber;
const int ChessSelfRoomInfo::kPlaycountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessSelfRoomInfo::ChessSelfRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess.ChessSelfRoomInfo)
}

void ChessSelfRoomInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChessSelfRoomInfo::ChessSelfRoomInfo(const ChessSelfRoomInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess.ChessSelfRoomInfo)
}

void ChessSelfRoomInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0u;
  roomcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = 0u;
  createuid_ = 0u;
  basecoin_ = 0u;
  playcount_ = 0u;
}

ChessSelfRoomInfo::~ChessSelfRoomInfo() {
  // @@protoc_insertion_point(destructor:chess.ChessSelfRoomInfo)
  SharedDtor();
}

void ChessSelfRoomInfo::SharedDtor() {
  roomcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChessSelfRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessSelfRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessSelfRoomInfo_descriptor_;
}

const ChessSelfRoomInfo& ChessSelfRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

ChessSelfRoomInfo* ChessSelfRoomInfo::default_instance_ = NULL;

ChessSelfRoomInfo* ChessSelfRoomInfo::New(::google::protobuf::Arena* arena) const {
  ChessSelfRoomInfo* n = new ChessSelfRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessSelfRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.ChessSelfRoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChessSelfRoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChessSelfRoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roomid_, playcount_);
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ChessSelfRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess.ChessSelfRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roomid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomcode;
        break;
      }

      // optional bytes roomcode = 2;
      case 2: {
        if (tag == 18) {
         parse_roomcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createuid;
        break;
      }

      // optional uint32 createuid = 4;
      case 4: {
        if (tag == 32) {
         parse_createuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createuid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basecoin;
        break;
      }

      // optional uint32 basecoin = 5;
      case 5: {
        if (tag == 40) {
         parse_basecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basecoin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playcount;
        break;
      }

      // optional uint32 playcount = 6;
      case 6: {
        if (tag == 48) {
         parse_playcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess.ChessSelfRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess.ChessSelfRoomInfo)
  return false;
#undef DO_
}

void ChessSelfRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess.ChessSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomcode(), output);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createuid(), output);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->basecoin(), output);
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:chess.ChessSelfRoomInfo)
}

::google::protobuf::uint8* ChessSelfRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.ChessSelfRoomInfo)
  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomcode(), target);
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createuid(), target);
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->basecoin(), target);
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chess.ChessSelfRoomInfo)
  return target;
}

int ChessSelfRoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chess.ChessSelfRoomInfo)
  int total_size = 0;

  // optional uint32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  // optional bytes roomcode = 2;
  if (this->roomcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomcode());
  }

  // optional uint32 endtime = 3;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endtime());
  }

  // optional uint32 createuid = 4;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createuid());
  }

  // optional uint32 basecoin = 5;
  if (this->basecoin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->basecoin());
  }

  // optional uint32 playcount = 6;
  if (this->playcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playcount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessSelfRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chess.ChessSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChessSelfRoomInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessSelfRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chess.ChessSelfRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chess.ChessSelfRoomInfo)
    MergeFrom(*source);
  }
}

void ChessSelfRoomInfo::MergeFrom(const ChessSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chess.ChessSelfRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.roomcode().size() > 0) {

    roomcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomcode_);
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.createuid() != 0) {
    set_createuid(from.createuid());
  }
  if (from.basecoin() != 0) {
    set_basecoin(from.basecoin());
  }
  if (from.playcount() != 0) {
    set_playcount(from.playcount());
  }
}

void ChessSelfRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chess.ChessSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessSelfRoomInfo::CopyFrom(const ChessSelfRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.ChessSelfRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessSelfRoomInfo::IsInitialized() const {

  return true;
}

void ChessSelfRoomInfo::Swap(ChessSelfRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessSelfRoomInfo::InternalSwap(ChessSelfRoomInfo* other) {
  std::swap(roomid_, other->roomid_);
  roomcode_.Swap(&other->roomcode_);
  std::swap(endtime_, other->endtime_);
  std::swap(createuid_, other->createuid_);
  std::swap(basecoin_, other->basecoin_);
  std::swap(playcount_, other->playcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessSelfRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessSelfRoomInfo_descriptor_;
  metadata.reflection = ChessSelfRoomInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessSelfRoomInfo

// optional uint32 roomid = 1;
void ChessSelfRoomInfo::clear_roomid() {
  roomid_ = 0u;
}
 ::google::protobuf::uint32 ChessSelfRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.roomid)
  return roomid_;
}
 void ChessSelfRoomInfo::set_roomid(::google::protobuf::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.roomid)
}

// optional bytes roomcode = 2;
void ChessSelfRoomInfo::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChessSelfRoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.roomcode)
  return roomcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChessSelfRoomInfo::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.roomcode)
}
 void ChessSelfRoomInfo::set_roomcode(const char* value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chess.ChessSelfRoomInfo.roomcode)
}
 void ChessSelfRoomInfo::set_roomcode(const void* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chess.ChessSelfRoomInfo.roomcode)
}
 ::std::string* ChessSelfRoomInfo::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:chess.ChessSelfRoomInfo.roomcode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChessSelfRoomInfo::release_roomcode() {
  // @@protoc_insertion_point(field_release:chess.ChessSelfRoomInfo.roomcode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChessSelfRoomInfo::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:chess.ChessSelfRoomInfo.roomcode)
}

// optional uint32 endtime = 3;
void ChessSelfRoomInfo::clear_endtime() {
  endtime_ = 0u;
}
 ::google::protobuf::uint32 ChessSelfRoomInfo::endtime() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.endtime)
  return endtime_;
}
 void ChessSelfRoomInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.endtime)
}

// optional uint32 createuid = 4;
void ChessSelfRoomInfo::clear_createuid() {
  createuid_ = 0u;
}
 ::google::protobuf::uint32 ChessSelfRoomInfo::createuid() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.createuid)
  return createuid_;
}
 void ChessSelfRoomInfo::set_createuid(::google::protobuf::uint32 value) {
  
  createuid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.createuid)
}

// optional uint32 basecoin = 5;
void ChessSelfRoomInfo::clear_basecoin() {
  basecoin_ = 0u;
}
 ::google::protobuf::uint32 ChessSelfRoomInfo::basecoin() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.basecoin)
  return basecoin_;
}
 void ChessSelfRoomInfo::set_basecoin(::google::protobuf::uint32 value) {
  
  basecoin_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.basecoin)
}

// optional uint32 playcount = 6;
void ChessSelfRoomInfo::clear_playcount() {
  playcount_ = 0u;
}
 ::google::protobuf::uint32 ChessSelfRoomInfo::playcount() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.playcount)
  return playcount_;
}
 void ChessSelfRoomInfo::set_playcount(::google::protobuf::uint32 value) {
  
  playcount_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.playcount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chess

// @@protoc_insertion_point(global_scope)
