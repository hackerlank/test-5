// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chess.proto

#ifndef PROTOBUF_chess_2eproto__INCLUDED
#define PROTOBUF_chess_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chess {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chess_2eproto();
void protobuf_AssignDesc_chess_2eproto();
void protobuf_ShutdownFile_chess_2eproto();

class ChessCard;
class ChessDeskResultinfo;
class ChessDeskUserinfo;
class ChessDeskinfo;
class ChessMatchInfo;
class ChessOneStepInfo;
class ChessSelfRoomInfo;
class ChessUserResultinfo;

// ===================================================================

class ChessCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chess.ChessCard) */ {
 public:
  ChessCard();
  virtual ~ChessCard();

  ChessCard(const ChessCard& from);

  inline ChessCard& operator=(const ChessCard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessCard& default_instance();

  void Swap(ChessCard* other);

  // implements Message ----------------------------------------------

  inline ChessCard* New() const { return New(NULL); }

  ChessCard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessCard& from);
  void MergeFrom(const ChessCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChessCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 pos = 5;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chess.ChessCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 pos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static ChessCard* default_instance_;
};
// -------------------------------------------------------------------

class ChessDeskUserinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chess.ChessDeskUserinfo) */ {
 public:
  ChessDeskUserinfo();
  virtual ~ChessDeskUserinfo();

  ChessDeskUserinfo(const ChessDeskUserinfo& from);

  inline ChessDeskUserinfo& operator=(const ChessDeskUserinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessDeskUserinfo& default_instance();

  void Swap(ChessDeskUserinfo* other);

  // implements Message ----------------------------------------------

  inline ChessDeskUserinfo* New() const { return New(NULL); }

  ChessDeskUserinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessDeskUserinfo& from);
  void MergeFrom(const ChessDeskUserinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChessDeskUserinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional bytes uname = 2;
  void clear_uname();
  static const int kUnameFieldNumber = 2;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  void set_uname(const char* value);
  void set_uname(const void* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // optional uint32 coinnum = 3;
  void clear_coinnum();
  static const int kCoinnumFieldNumber = 3;
  ::google::protobuf::uint32 coinnum() const;
  void set_coinnum(::google::protobuf::uint32 value);

  // optional bytes headurl = 4;
  void clear_headurl();
  static const int kHeadurlFieldNumber = 4;
  const ::std::string& headurl() const;
  void set_headurl(const ::std::string& value);
  void set_headurl(const char* value);
  void set_headurl(const void* value, size_t size);
  ::std::string* mutable_headurl();
  ::std::string* release_headurl();
  void set_allocated_headurl(::std::string* headurl);

  // optional uint32 deskid = 5;
  void clear_deskid();
  static const int kDeskidFieldNumber = 5;
  ::google::protobuf::uint32 deskid() const;
  void set_deskid(::google::protobuf::uint32 value);

  // optional uint32 pos = 6;
  void clear_pos();
  static const int kPosFieldNumber = 6;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // optional uint32 status = 7;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 offline = 8;
  void clear_offline();
  static const int kOfflineFieldNumber = 8;
  ::google::protobuf::uint32 offline() const;
  void set_offline(::google::protobuf::uint32 value);

  // optional uint32 gender = 10;
  void clear_gender();
  static const int kGenderFieldNumber = 10;
  ::google::protobuf::uint32 gender() const;
  void set_gender(::google::protobuf::uint32 value);

  // optional uint32 integral = 11;
  void clear_integral();
  static const int kIntegralFieldNumber = 11;
  ::google::protobuf::uint32 integral() const;
  void set_integral(::google::protobuf::uint32 value);

  // optional int32 gamevalue = 12;
  void clear_gamevalue();
  static const int kGamevalueFieldNumber = 12;
  ::google::protobuf::int32 gamevalue() const;
  void set_gamevalue(::google::protobuf::int32 value);

  // optional uint32 totalbet = 13;
  void clear_totalbet();
  static const int kTotalbetFieldNumber = 13;
  ::google::protobuf::uint32 totalbet() const;
  void set_totalbet(::google::protobuf::uint32 value);

  // repeated .chess.ChessCard cardlist = 14;
  int cardlist_size() const;
  void clear_cardlist();
  static const int kCardlistFieldNumber = 14;
  const ::chess::ChessCard& cardlist(int index) const;
  ::chess::ChessCard* mutable_cardlist(int index);
  ::chess::ChessCard* add_cardlist();
  ::google::protobuf::RepeatedPtrField< ::chess::ChessCard >*
      mutable_cardlist();
  const ::google::protobuf::RepeatedPtrField< ::chess::ChessCard >&
      cardlist() const;

  // optional uint32 usetimes = 15;
  void clear_usetimes();
  static const int kUsetimesFieldNumber = 15;
  ::google::protobuf::uint32 usetimes() const;
  void set_usetimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chess.ChessDeskUserinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 coinnum_;
  ::google::protobuf::internal::ArenaStringPtr headurl_;
  ::google::protobuf::uint32 deskid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 offline_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 integral_;
  ::google::protobuf::int32 gamevalue_;
  ::google::protobuf::uint32 totalbet_;
  ::google::protobuf::RepeatedPtrField< ::chess::ChessCard > cardlist_;
  ::google::protobuf::uint32 usetimes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static ChessDeskUserinfo* default_instance_;
};
// -------------------------------------------------------------------

class ChessDeskinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chess.ChessDeskinfo) */ {
 public:
  ChessDeskinfo();
  virtual ~ChessDeskinfo();

  ChessDeskinfo(const ChessDeskinfo& from);

  inline ChessDeskinfo& operator=(const ChessDeskinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessDeskinfo& default_instance();

  void Swap(ChessDeskinfo* other);

  // implements Message ----------------------------------------------

  inline ChessDeskinfo* New() const { return New(NULL); }

  ChessDeskinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessDeskinfo& from);
  void MergeFrom(const ChessDeskinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChessDeskinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deskid = 1;
  void clear_deskid();
  static const int kDeskidFieldNumber = 1;
  ::google::protobuf::uint32 deskid() const;
  void set_deskid(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 curpos = 3;
  void clear_curpos();
  static const int kCurposFieldNumber = 3;
  ::google::protobuf::uint32 curpos() const;
  void set_curpos(::google::protobuf::uint32 value);

  // optional uint32 totalbet = 4;
  void clear_totalbet();
  static const int kTotalbetFieldNumber = 4;
  ::google::protobuf::uint32 totalbet() const;
  void set_totalbet(::google::protobuf::uint32 value);

  // repeated .chess.ChessDeskUserinfo userlist = 5;
  int userlist_size() const;
  void clear_userlist();
  static const int kUserlistFieldNumber = 5;
  const ::chess::ChessDeskUserinfo& userlist(int index) const;
  ::chess::ChessDeskUserinfo* mutable_userlist(int index);
  ::chess::ChessDeskUserinfo* add_userlist();
  ::google::protobuf::RepeatedPtrField< ::chess::ChessDeskUserinfo >*
      mutable_userlist();
  const ::google::protobuf::RepeatedPtrField< ::chess::ChessDeskUserinfo >&
      userlist() const;

  // optional uint32 matchid = 6;
  void clear_matchid();
  static const int kMatchidFieldNumber = 6;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // optional uint32 hostpos = 7;
  void clear_hostpos();
  static const int kHostposFieldNumber = 7;
  ::google::protobuf::uint32 hostpos() const;
  void set_hostpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chess.ChessDeskinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 deskid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 curpos_;
  ::google::protobuf::uint32 totalbet_;
  ::google::protobuf::RepeatedPtrField< ::chess::ChessDeskUserinfo > userlist_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 hostpos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static ChessDeskinfo* default_instance_;
};
// -------------------------------------------------------------------

class ChessDeskResultinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chess.ChessDeskResultinfo) */ {
 public:
  ChessDeskResultinfo();
  virtual ~ChessDeskResultinfo();

  ChessDeskResultinfo(const ChessDeskResultinfo& from);

  inline ChessDeskResultinfo& operator=(const ChessDeskResultinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessDeskResultinfo& default_instance();

  void Swap(ChessDeskResultinfo* other);

  // implements Message ----------------------------------------------

  inline ChessDeskResultinfo* New() const { return New(NULL); }

  ChessDeskResultinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessDeskResultinfo& from);
  void MergeFrom(const ChessDeskResultinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChessDeskResultinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chess.ChessUserResultinfo userlist = 1;
  int userlist_size() const;
  void clear_userlist();
  static const int kUserlistFieldNumber = 1;
  const ::chess::ChessUserResultinfo& userlist(int index) const;
  ::chess::ChessUserResultinfo* mutable_userlist(int index);
  ::chess::ChessUserResultinfo* add_userlist();
  ::google::protobuf::RepeatedPtrField< ::chess::ChessUserResultinfo >*
      mutable_userlist();
  const ::google::protobuf::RepeatedPtrField< ::chess::ChessUserResultinfo >&
      userlist() const;

  // @@protoc_insertion_point(class_scope:chess.ChessDeskResultinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::chess::ChessUserResultinfo > userlist_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static ChessDeskResultinfo* default_instance_;
};
// -------------------------------------------------------------------

class ChessUserResultinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chess.ChessUserResultinfo) */ {
 public:
  ChessUserResultinfo();
  virtual ~ChessUserResultinfo();

  ChessUserResultinfo(const ChessUserResultinfo& from);

  inline ChessUserResultinfo& operator=(const ChessUserResultinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessUserResultinfo& default_instance();

  void Swap(ChessUserResultinfo* other);

  // implements Message ----------------------------------------------

  inline ChessUserResultinfo* New() const { return New(NULL); }

  ChessUserResultinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessUserResultinfo& from);
  void MergeFrom(const ChessUserResultinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChessUserResultinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional uint32 value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // optional uint32 coin = 5;
  void clear_coin();
  static const int kCoinFieldNumber = 5;
  ::google::protobuf::uint32 coin() const;
  void set_coin(::google::protobuf::uint32 value);

  // optional int32 gamevalue = 6;
  void clear_gamevalue();
  static const int kGamevalueFieldNumber = 6;
  ::google::protobuf::int32 gamevalue() const;
  void set_gamevalue(::google::protobuf::int32 value);

  // optional uint32 rank = 7;
  void clear_rank();
  static const int kRankFieldNumber = 7;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint32 leftvalue = 8;
  void clear_leftvalue();
  static const int kLeftvalueFieldNumber = 8;
  ::google::protobuf::uint32 leftvalue() const;
  void set_leftvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chess.ChessUserResultinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::int32 gamevalue_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 leftvalue_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static ChessUserResultinfo* default_instance_;
};
// -------------------------------------------------------------------

class ChessOneStepInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chess.ChessOneStepInfo) */ {
 public:
  ChessOneStepInfo();
  virtual ~ChessOneStepInfo();

  ChessOneStepInfo(const ChessOneStepInfo& from);

  inline ChessOneStepInfo& operator=(const ChessOneStepInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessOneStepInfo& default_instance();

  void Swap(ChessOneStepInfo* other);

  // implements Message ----------------------------------------------

  inline ChessOneStepInfo* New() const { return New(NULL); }

  ChessOneStepInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessOneStepInfo& from);
  void MergeFrom(const ChessOneStepInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChessOneStepInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sposx = 1;
  void clear_sposx();
  static const int kSposxFieldNumber = 1;
  ::google::protobuf::uint32 sposx() const;
  void set_sposx(::google::protobuf::uint32 value);

  // optional uint32 sposy = 2;
  void clear_sposy();
  static const int kSposyFieldNumber = 2;
  ::google::protobuf::uint32 sposy() const;
  void set_sposy(::google::protobuf::uint32 value);

  // optional uint32 eposx = 3;
  void clear_eposx();
  static const int kEposxFieldNumber = 3;
  ::google::protobuf::uint32 eposx() const;
  void set_eposx(::google::protobuf::uint32 value);

  // optional uint32 eposy = 4;
  void clear_eposy();
  static const int kEposyFieldNumber = 4;
  ::google::protobuf::uint32 eposy() const;
  void set_eposy(::google::protobuf::uint32 value);

  // optional .chess.ChessCard startchess = 5;
  bool has_startchess() const;
  void clear_startchess();
  static const int kStartchessFieldNumber = 5;
  const ::chess::ChessCard& startchess() const;
  ::chess::ChessCard* mutable_startchess();
  ::chess::ChessCard* release_startchess();
  void set_allocated_startchess(::chess::ChessCard* startchess);

  // optional .chess.ChessCard endchess = 6;
  bool has_endchess() const;
  void clear_endchess();
  static const int kEndchessFieldNumber = 6;
  const ::chess::ChessCard& endchess() const;
  ::chess::ChessCard* mutable_endchess();
  ::chess::ChessCard* release_endchess();
  void set_allocated_endchess(::chess::ChessCard* endchess);

  // @@protoc_insertion_point(class_scope:chess.ChessOneStepInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 sposx_;
  ::google::protobuf::uint32 sposy_;
  ::google::protobuf::uint32 eposx_;
  ::google::protobuf::uint32 eposy_;
  ::chess::ChessCard* startchess_;
  ::chess::ChessCard* endchess_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static ChessOneStepInfo* default_instance_;
};
// -------------------------------------------------------------------

class ChessMatchInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chess.ChessMatchInfo) */ {
 public:
  ChessMatchInfo();
  virtual ~ChessMatchInfo();

  ChessMatchInfo(const ChessMatchInfo& from);

  inline ChessMatchInfo& operator=(const ChessMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessMatchInfo& default_instance();

  void Swap(ChessMatchInfo* other);

  // implements Message ----------------------------------------------

  inline ChessMatchInfo* New() const { return New(NULL); }

  ChessMatchInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessMatchInfo& from);
  void MergeFrom(const ChessMatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChessMatchInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // optional uint32 trunindex = 2;
  void clear_trunindex();
  static const int kTrunindexFieldNumber = 2;
  ::google::protobuf::uint32 trunindex() const;
  void set_trunindex(::google::protobuf::uint32 value);

  // optional uint32 curnum = 3;
  void clear_curnum();
  static const int kCurnumFieldNumber = 3;
  ::google::protobuf::uint32 curnum() const;
  void set_curnum(::google::protobuf::uint32 value);

  // optional int32 gamevalue = 4;
  void clear_gamevalue();
  static const int kGamevalueFieldNumber = 4;
  ::google::protobuf::int32 gamevalue() const;
  void set_gamevalue(::google::protobuf::int32 value);

  // optional int32 ifmatch = 5;
  void clear_ifmatch();
  static const int kIfmatchFieldNumber = 5;
  ::google::protobuf::int32 ifmatch() const;
  void set_ifmatch(::google::protobuf::int32 value);

  // optional uint32 leftnum = 6;
  void clear_leftnum();
  static const int kLeftnumFieldNumber = 6;
  ::google::protobuf::uint32 leftnum() const;
  void set_leftnum(::google::protobuf::uint32 value);

  // optional uint32 begintime = 7;
  void clear_begintime();
  static const int kBegintimeFieldNumber = 7;
  ::google::protobuf::uint32 begintime() const;
  void set_begintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chess.ChessMatchInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 trunindex_;
  ::google::protobuf::uint32 curnum_;
  ::google::protobuf::int32 gamevalue_;
  ::google::protobuf::int32 ifmatch_;
  ::google::protobuf::uint32 leftnum_;
  ::google::protobuf::uint32 begintime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static ChessMatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class ChessSelfRoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chess.ChessSelfRoomInfo) */ {
 public:
  ChessSelfRoomInfo();
  virtual ~ChessSelfRoomInfo();

  ChessSelfRoomInfo(const ChessSelfRoomInfo& from);

  inline ChessSelfRoomInfo& operator=(const ChessSelfRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessSelfRoomInfo& default_instance();

  void Swap(ChessSelfRoomInfo* other);

  // implements Message ----------------------------------------------

  inline ChessSelfRoomInfo* New() const { return New(NULL); }

  ChessSelfRoomInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChessSelfRoomInfo& from);
  void MergeFrom(const ChessSelfRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChessSelfRoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint32 roomid() const;
  void set_roomid(::google::protobuf::uint32 value);

  // optional bytes roomcode = 2;
  void clear_roomcode();
  static const int kRoomcodeFieldNumber = 2;
  const ::std::string& roomcode() const;
  void set_roomcode(const ::std::string& value);
  void set_roomcode(const char* value);
  void set_roomcode(const void* value, size_t size);
  ::std::string* mutable_roomcode();
  ::std::string* release_roomcode();
  void set_allocated_roomcode(::std::string* roomcode);

  // optional uint32 endtime = 3;
  void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  ::google::protobuf::uint32 endtime() const;
  void set_endtime(::google::protobuf::uint32 value);

  // optional uint32 createuid = 4;
  void clear_createuid();
  static const int kCreateuidFieldNumber = 4;
  ::google::protobuf::uint32 createuid() const;
  void set_createuid(::google::protobuf::uint32 value);

  // optional uint32 basecoin = 5;
  void clear_basecoin();
  static const int kBasecoinFieldNumber = 5;
  ::google::protobuf::uint32 basecoin() const;
  void set_basecoin(::google::protobuf::uint32 value);

  // optional uint32 playcount = 6;
  void clear_playcount();
  static const int kPlaycountFieldNumber = 6;
  ::google::protobuf::uint32 playcount() const;
  void set_playcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chess.ChessSelfRoomInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr roomcode_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::uint32 createuid_;
  ::google::protobuf::uint32 basecoin_;
  ::google::protobuf::uint32 playcount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static ChessSelfRoomInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessCard

// optional uint32 value = 1;
inline void ChessCard::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 ChessCard::value() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.value)
  return value_;
}
inline void ChessCard::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.value)
}

// optional uint32 x = 2;
inline void ChessCard::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 ChessCard::x() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.x)
  return x_;
}
inline void ChessCard::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.x)
}

// optional uint32 y = 3;
inline void ChessCard::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 ChessCard::y() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.y)
  return y_;
}
inline void ChessCard::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.y)
}

// optional uint32 status = 4;
inline void ChessCard::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 ChessCard::status() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.status)
  return status_;
}
inline void ChessCard::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.status)
}

// optional uint32 pos = 5;
inline void ChessCard::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 ChessCard::pos() const {
  // @@protoc_insertion_point(field_get:chess.ChessCard.pos)
  return pos_;
}
inline void ChessCard::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessCard.pos)
}

// -------------------------------------------------------------------

// ChessDeskUserinfo

// optional uint32 uid = 1;
inline void ChessDeskUserinfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::uid() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.uid)
  return uid_;
}
inline void ChessDeskUserinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.uid)
}

// optional bytes uname = 2;
inline void ChessDeskUserinfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChessDeskUserinfo::uname() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChessDeskUserinfo::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.uname)
}
inline void ChessDeskUserinfo::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chess.ChessDeskUserinfo.uname)
}
inline void ChessDeskUserinfo::set_uname(const void* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chess.ChessDeskUserinfo.uname)
}
inline ::std::string* ChessDeskUserinfo::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskUserinfo.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChessDeskUserinfo::release_uname() {
  // @@protoc_insertion_point(field_release:chess.ChessDeskUserinfo.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChessDeskUserinfo::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:chess.ChessDeskUserinfo.uname)
}

// optional uint32 coinnum = 3;
inline void ChessDeskUserinfo::clear_coinnum() {
  coinnum_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::coinnum() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.coinnum)
  return coinnum_;
}
inline void ChessDeskUserinfo::set_coinnum(::google::protobuf::uint32 value) {
  
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.coinnum)
}

// optional bytes headurl = 4;
inline void ChessDeskUserinfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChessDeskUserinfo::headurl() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChessDeskUserinfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.headurl)
}
inline void ChessDeskUserinfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chess.ChessDeskUserinfo.headurl)
}
inline void ChessDeskUserinfo::set_headurl(const void* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chess.ChessDeskUserinfo.headurl)
}
inline ::std::string* ChessDeskUserinfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskUserinfo.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChessDeskUserinfo::release_headurl() {
  // @@protoc_insertion_point(field_release:chess.ChessDeskUserinfo.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChessDeskUserinfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:chess.ChessDeskUserinfo.headurl)
}

// optional uint32 deskid = 5;
inline void ChessDeskUserinfo::clear_deskid() {
  deskid_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::deskid() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.deskid)
  return deskid_;
}
inline void ChessDeskUserinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.deskid)
}

// optional uint32 pos = 6;
inline void ChessDeskUserinfo::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::pos() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.pos)
  return pos_;
}
inline void ChessDeskUserinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.pos)
}

// optional uint32 status = 7;
inline void ChessDeskUserinfo::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::status() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.status)
  return status_;
}
inline void ChessDeskUserinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.status)
}

// optional uint32 offline = 8;
inline void ChessDeskUserinfo::clear_offline() {
  offline_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::offline() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.offline)
  return offline_;
}
inline void ChessDeskUserinfo::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.offline)
}

// optional uint32 gender = 10;
inline void ChessDeskUserinfo::clear_gender() {
  gender_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::gender() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.gender)
  return gender_;
}
inline void ChessDeskUserinfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.gender)
}

// optional uint32 integral = 11;
inline void ChessDeskUserinfo::clear_integral() {
  integral_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::integral() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.integral)
  return integral_;
}
inline void ChessDeskUserinfo::set_integral(::google::protobuf::uint32 value) {
  
  integral_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.integral)
}

// optional int32 gamevalue = 12;
inline void ChessDeskUserinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
inline ::google::protobuf::int32 ChessDeskUserinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.gamevalue)
  return gamevalue_;
}
inline void ChessDeskUserinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.gamevalue)
}

// optional uint32 totalbet = 13;
inline void ChessDeskUserinfo::clear_totalbet() {
  totalbet_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::totalbet() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.totalbet)
  return totalbet_;
}
inline void ChessDeskUserinfo::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.totalbet)
}

// repeated .chess.ChessCard cardlist = 14;
inline int ChessDeskUserinfo::cardlist_size() const {
  return cardlist_.size();
}
inline void ChessDeskUserinfo::clear_cardlist() {
  cardlist_.Clear();
}
inline const ::chess::ChessCard& ChessDeskUserinfo::cardlist(int index) const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.cardlist)
  return cardlist_.Get(index);
}
inline ::chess::ChessCard* ChessDeskUserinfo::mutable_cardlist(int index) {
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskUserinfo.cardlist)
  return cardlist_.Mutable(index);
}
inline ::chess::ChessCard* ChessDeskUserinfo::add_cardlist() {
  // @@protoc_insertion_point(field_add:chess.ChessDeskUserinfo.cardlist)
  return cardlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chess::ChessCard >*
ChessDeskUserinfo::mutable_cardlist() {
  // @@protoc_insertion_point(field_mutable_list:chess.ChessDeskUserinfo.cardlist)
  return &cardlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chess::ChessCard >&
ChessDeskUserinfo::cardlist() const {
  // @@protoc_insertion_point(field_list:chess.ChessDeskUserinfo.cardlist)
  return cardlist_;
}

// optional uint32 usetimes = 15;
inline void ChessDeskUserinfo::clear_usetimes() {
  usetimes_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskUserinfo::usetimes() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskUserinfo.usetimes)
  return usetimes_;
}
inline void ChessDeskUserinfo::set_usetimes(::google::protobuf::uint32 value) {
  
  usetimes_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskUserinfo.usetimes)
}

// -------------------------------------------------------------------

// ChessDeskinfo

// optional uint32 deskid = 1;
inline void ChessDeskinfo::clear_deskid() {
  deskid_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskinfo::deskid() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.deskid)
  return deskid_;
}
inline void ChessDeskinfo::set_deskid(::google::protobuf::uint32 value) {
  
  deskid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.deskid)
}

// optional uint32 status = 2;
inline void ChessDeskinfo::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskinfo::status() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.status)
  return status_;
}
inline void ChessDeskinfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.status)
}

// optional uint32 curpos = 3;
inline void ChessDeskinfo::clear_curpos() {
  curpos_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskinfo::curpos() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.curpos)
  return curpos_;
}
inline void ChessDeskinfo::set_curpos(::google::protobuf::uint32 value) {
  
  curpos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.curpos)
}

// optional uint32 totalbet = 4;
inline void ChessDeskinfo::clear_totalbet() {
  totalbet_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskinfo::totalbet() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.totalbet)
  return totalbet_;
}
inline void ChessDeskinfo::set_totalbet(::google::protobuf::uint32 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.totalbet)
}

// repeated .chess.ChessDeskUserinfo userlist = 5;
inline int ChessDeskinfo::userlist_size() const {
  return userlist_.size();
}
inline void ChessDeskinfo::clear_userlist() {
  userlist_.Clear();
}
inline const ::chess::ChessDeskUserinfo& ChessDeskinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.userlist)
  return userlist_.Get(index);
}
inline ::chess::ChessDeskUserinfo* ChessDeskinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskinfo.userlist)
  return userlist_.Mutable(index);
}
inline ::chess::ChessDeskUserinfo* ChessDeskinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:chess.ChessDeskinfo.userlist)
  return userlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chess::ChessDeskUserinfo >*
ChessDeskinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:chess.ChessDeskinfo.userlist)
  return &userlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chess::ChessDeskUserinfo >&
ChessDeskinfo::userlist() const {
  // @@protoc_insertion_point(field_list:chess.ChessDeskinfo.userlist)
  return userlist_;
}

// optional uint32 matchid = 6;
inline void ChessDeskinfo::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskinfo::matchid() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.matchid)
  return matchid_;
}
inline void ChessDeskinfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.matchid)
}

// optional uint32 hostpos = 7;
inline void ChessDeskinfo::clear_hostpos() {
  hostpos_ = 0u;
}
inline ::google::protobuf::uint32 ChessDeskinfo::hostpos() const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskinfo.hostpos)
  return hostpos_;
}
inline void ChessDeskinfo::set_hostpos(::google::protobuf::uint32 value) {
  
  hostpos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessDeskinfo.hostpos)
}

// -------------------------------------------------------------------

// ChessDeskResultinfo

// repeated .chess.ChessUserResultinfo userlist = 1;
inline int ChessDeskResultinfo::userlist_size() const {
  return userlist_.size();
}
inline void ChessDeskResultinfo::clear_userlist() {
  userlist_.Clear();
}
inline const ::chess::ChessUserResultinfo& ChessDeskResultinfo::userlist(int index) const {
  // @@protoc_insertion_point(field_get:chess.ChessDeskResultinfo.userlist)
  return userlist_.Get(index);
}
inline ::chess::ChessUserResultinfo* ChessDeskResultinfo::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:chess.ChessDeskResultinfo.userlist)
  return userlist_.Mutable(index);
}
inline ::chess::ChessUserResultinfo* ChessDeskResultinfo::add_userlist() {
  // @@protoc_insertion_point(field_add:chess.ChessDeskResultinfo.userlist)
  return userlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chess::ChessUserResultinfo >*
ChessDeskResultinfo::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:chess.ChessDeskResultinfo.userlist)
  return &userlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chess::ChessUserResultinfo >&
ChessDeskResultinfo::userlist() const {
  // @@protoc_insertion_point(field_list:chess.ChessDeskResultinfo.userlist)
  return userlist_;
}

// -------------------------------------------------------------------

// ChessUserResultinfo

// optional uint32 uid = 1;
inline void ChessUserResultinfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 ChessUserResultinfo::uid() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.uid)
  return uid_;
}
inline void ChessUserResultinfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.uid)
}

// optional uint32 pos = 2;
inline void ChessUserResultinfo::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 ChessUserResultinfo::pos() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.pos)
  return pos_;
}
inline void ChessUserResultinfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.pos)
}

// optional uint32 result = 3;
inline void ChessUserResultinfo::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 ChessUserResultinfo::result() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.result)
  return result_;
}
inline void ChessUserResultinfo::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.result)
}

// optional uint32 value = 4;
inline void ChessUserResultinfo::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 ChessUserResultinfo::value() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.value)
  return value_;
}
inline void ChessUserResultinfo::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.value)
}

// optional uint32 coin = 5;
inline void ChessUserResultinfo::clear_coin() {
  coin_ = 0u;
}
inline ::google::protobuf::uint32 ChessUserResultinfo::coin() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.coin)
  return coin_;
}
inline void ChessUserResultinfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.coin)
}

// optional int32 gamevalue = 6;
inline void ChessUserResultinfo::clear_gamevalue() {
  gamevalue_ = 0;
}
inline ::google::protobuf::int32 ChessUserResultinfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.gamevalue)
  return gamevalue_;
}
inline void ChessUserResultinfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.gamevalue)
}

// optional uint32 rank = 7;
inline void ChessUserResultinfo::clear_rank() {
  rank_ = 0u;
}
inline ::google::protobuf::uint32 ChessUserResultinfo::rank() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.rank)
  return rank_;
}
inline void ChessUserResultinfo::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.rank)
}

// optional uint32 leftvalue = 8;
inline void ChessUserResultinfo::clear_leftvalue() {
  leftvalue_ = 0u;
}
inline ::google::protobuf::uint32 ChessUserResultinfo::leftvalue() const {
  // @@protoc_insertion_point(field_get:chess.ChessUserResultinfo.leftvalue)
  return leftvalue_;
}
inline void ChessUserResultinfo::set_leftvalue(::google::protobuf::uint32 value) {
  
  leftvalue_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessUserResultinfo.leftvalue)
}

// -------------------------------------------------------------------

// ChessOneStepInfo

// optional uint32 sposx = 1;
inline void ChessOneStepInfo::clear_sposx() {
  sposx_ = 0u;
}
inline ::google::protobuf::uint32 ChessOneStepInfo::sposx() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.sposx)
  return sposx_;
}
inline void ChessOneStepInfo::set_sposx(::google::protobuf::uint32 value) {
  
  sposx_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessOneStepInfo.sposx)
}

// optional uint32 sposy = 2;
inline void ChessOneStepInfo::clear_sposy() {
  sposy_ = 0u;
}
inline ::google::protobuf::uint32 ChessOneStepInfo::sposy() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.sposy)
  return sposy_;
}
inline void ChessOneStepInfo::set_sposy(::google::protobuf::uint32 value) {
  
  sposy_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessOneStepInfo.sposy)
}

// optional uint32 eposx = 3;
inline void ChessOneStepInfo::clear_eposx() {
  eposx_ = 0u;
}
inline ::google::protobuf::uint32 ChessOneStepInfo::eposx() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.eposx)
  return eposx_;
}
inline void ChessOneStepInfo::set_eposx(::google::protobuf::uint32 value) {
  
  eposx_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessOneStepInfo.eposx)
}

// optional uint32 eposy = 4;
inline void ChessOneStepInfo::clear_eposy() {
  eposy_ = 0u;
}
inline ::google::protobuf::uint32 ChessOneStepInfo::eposy() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.eposy)
  return eposy_;
}
inline void ChessOneStepInfo::set_eposy(::google::protobuf::uint32 value) {
  
  eposy_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessOneStepInfo.eposy)
}

// optional .chess.ChessCard startchess = 5;
inline bool ChessOneStepInfo::has_startchess() const {
  return !_is_default_instance_ && startchess_ != NULL;
}
inline void ChessOneStepInfo::clear_startchess() {
  if (GetArenaNoVirtual() == NULL && startchess_ != NULL) delete startchess_;
  startchess_ = NULL;
}
inline const ::chess::ChessCard& ChessOneStepInfo::startchess() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.startchess)
  return startchess_ != NULL ? *startchess_ : *default_instance_->startchess_;
}
inline ::chess::ChessCard* ChessOneStepInfo::mutable_startchess() {
  
  if (startchess_ == NULL) {
    startchess_ = new ::chess::ChessCard;
  }
  // @@protoc_insertion_point(field_mutable:chess.ChessOneStepInfo.startchess)
  return startchess_;
}
inline ::chess::ChessCard* ChessOneStepInfo::release_startchess() {
  // @@protoc_insertion_point(field_release:chess.ChessOneStepInfo.startchess)
  
  ::chess::ChessCard* temp = startchess_;
  startchess_ = NULL;
  return temp;
}
inline void ChessOneStepInfo::set_allocated_startchess(::chess::ChessCard* startchess) {
  delete startchess_;
  startchess_ = startchess;
  if (startchess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chess.ChessOneStepInfo.startchess)
}

// optional .chess.ChessCard endchess = 6;
inline bool ChessOneStepInfo::has_endchess() const {
  return !_is_default_instance_ && endchess_ != NULL;
}
inline void ChessOneStepInfo::clear_endchess() {
  if (GetArenaNoVirtual() == NULL && endchess_ != NULL) delete endchess_;
  endchess_ = NULL;
}
inline const ::chess::ChessCard& ChessOneStepInfo::endchess() const {
  // @@protoc_insertion_point(field_get:chess.ChessOneStepInfo.endchess)
  return endchess_ != NULL ? *endchess_ : *default_instance_->endchess_;
}
inline ::chess::ChessCard* ChessOneStepInfo::mutable_endchess() {
  
  if (endchess_ == NULL) {
    endchess_ = new ::chess::ChessCard;
  }
  // @@protoc_insertion_point(field_mutable:chess.ChessOneStepInfo.endchess)
  return endchess_;
}
inline ::chess::ChessCard* ChessOneStepInfo::release_endchess() {
  // @@protoc_insertion_point(field_release:chess.ChessOneStepInfo.endchess)
  
  ::chess::ChessCard* temp = endchess_;
  endchess_ = NULL;
  return temp;
}
inline void ChessOneStepInfo::set_allocated_endchess(::chess::ChessCard* endchess) {
  delete endchess_;
  endchess_ = endchess;
  if (endchess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chess.ChessOneStepInfo.endchess)
}

// -------------------------------------------------------------------

// ChessMatchInfo

// optional uint32 matchid = 1;
inline void ChessMatchInfo::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 ChessMatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.matchid)
  return matchid_;
}
inline void ChessMatchInfo::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.matchid)
}

// optional uint32 trunindex = 2;
inline void ChessMatchInfo::clear_trunindex() {
  trunindex_ = 0u;
}
inline ::google::protobuf::uint32 ChessMatchInfo::trunindex() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.trunindex)
  return trunindex_;
}
inline void ChessMatchInfo::set_trunindex(::google::protobuf::uint32 value) {
  
  trunindex_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.trunindex)
}

// optional uint32 curnum = 3;
inline void ChessMatchInfo::clear_curnum() {
  curnum_ = 0u;
}
inline ::google::protobuf::uint32 ChessMatchInfo::curnum() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.curnum)
  return curnum_;
}
inline void ChessMatchInfo::set_curnum(::google::protobuf::uint32 value) {
  
  curnum_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.curnum)
}

// optional int32 gamevalue = 4;
inline void ChessMatchInfo::clear_gamevalue() {
  gamevalue_ = 0;
}
inline ::google::protobuf::int32 ChessMatchInfo::gamevalue() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.gamevalue)
  return gamevalue_;
}
inline void ChessMatchInfo::set_gamevalue(::google::protobuf::int32 value) {
  
  gamevalue_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.gamevalue)
}

// optional int32 ifmatch = 5;
inline void ChessMatchInfo::clear_ifmatch() {
  ifmatch_ = 0;
}
inline ::google::protobuf::int32 ChessMatchInfo::ifmatch() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.ifmatch)
  return ifmatch_;
}
inline void ChessMatchInfo::set_ifmatch(::google::protobuf::int32 value) {
  
  ifmatch_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.ifmatch)
}

// optional uint32 leftnum = 6;
inline void ChessMatchInfo::clear_leftnum() {
  leftnum_ = 0u;
}
inline ::google::protobuf::uint32 ChessMatchInfo::leftnum() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.leftnum)
  return leftnum_;
}
inline void ChessMatchInfo::set_leftnum(::google::protobuf::uint32 value) {
  
  leftnum_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.leftnum)
}

// optional uint32 begintime = 7;
inline void ChessMatchInfo::clear_begintime() {
  begintime_ = 0u;
}
inline ::google::protobuf::uint32 ChessMatchInfo::begintime() const {
  // @@protoc_insertion_point(field_get:chess.ChessMatchInfo.begintime)
  return begintime_;
}
inline void ChessMatchInfo::set_begintime(::google::protobuf::uint32 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessMatchInfo.begintime)
}

// -------------------------------------------------------------------

// ChessSelfRoomInfo

// optional uint32 roomid = 1;
inline void ChessSelfRoomInfo::clear_roomid() {
  roomid_ = 0u;
}
inline ::google::protobuf::uint32 ChessSelfRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.roomid)
  return roomid_;
}
inline void ChessSelfRoomInfo::set_roomid(::google::protobuf::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.roomid)
}

// optional bytes roomcode = 2;
inline void ChessSelfRoomInfo::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChessSelfRoomInfo::roomcode() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.roomcode)
  return roomcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChessSelfRoomInfo::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.roomcode)
}
inline void ChessSelfRoomInfo::set_roomcode(const char* value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chess.ChessSelfRoomInfo.roomcode)
}
inline void ChessSelfRoomInfo::set_roomcode(const void* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chess.ChessSelfRoomInfo.roomcode)
}
inline ::std::string* ChessSelfRoomInfo::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:chess.ChessSelfRoomInfo.roomcode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChessSelfRoomInfo::release_roomcode() {
  // @@protoc_insertion_point(field_release:chess.ChessSelfRoomInfo.roomcode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChessSelfRoomInfo::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:chess.ChessSelfRoomInfo.roomcode)
}

// optional uint32 endtime = 3;
inline void ChessSelfRoomInfo::clear_endtime() {
  endtime_ = 0u;
}
inline ::google::protobuf::uint32 ChessSelfRoomInfo::endtime() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.endtime)
  return endtime_;
}
inline void ChessSelfRoomInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.endtime)
}

// optional uint32 createuid = 4;
inline void ChessSelfRoomInfo::clear_createuid() {
  createuid_ = 0u;
}
inline ::google::protobuf::uint32 ChessSelfRoomInfo::createuid() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.createuid)
  return createuid_;
}
inline void ChessSelfRoomInfo::set_createuid(::google::protobuf::uint32 value) {
  
  createuid_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.createuid)
}

// optional uint32 basecoin = 5;
inline void ChessSelfRoomInfo::clear_basecoin() {
  basecoin_ = 0u;
}
inline ::google::protobuf::uint32 ChessSelfRoomInfo::basecoin() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.basecoin)
  return basecoin_;
}
inline void ChessSelfRoomInfo::set_basecoin(::google::protobuf::uint32 value) {
  
  basecoin_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.basecoin)
}

// optional uint32 playcount = 6;
inline void ChessSelfRoomInfo::clear_playcount() {
  playcount_ = 0u;
}
inline ::google::protobuf::uint32 ChessSelfRoomInfo::playcount() const {
  // @@protoc_insertion_point(field_get:chess.ChessSelfRoomInfo.playcount)
  return playcount_;
}
inline void ChessSelfRoomInfo::set_playcount(::google::protobuf::uint32 value) {
  
  playcount_ = value;
  // @@protoc_insertion_point(field_set:chess.ChessSelfRoomInfo.playcount)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chess

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chess_2eproto__INCLUDED
